
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c4d4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c4d4  0040c4d4  0001c4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  0040c4dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000488  204009c8  0040cea4  000209c8  2**2
                  ALLOC
  4 .stack        00002000  20400e50  0040d32c  000209c8  2**0
                  ALLOC
  5 .heap         00000200  20402e50  0040f32c  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00027b07  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000055bb  00000000  00000000  00048556  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e8cf  00000000  00000000  0004db11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001120  00000000  00000000  0005c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016a8  00000000  00000000  0005d500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000f0d8  00000000  00000000  0005eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000160f4  00000000  00000000  0006dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a658  00000000  00000000  00083d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000427c  00000000  00000000  0011e3cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2e 40 20 c9 1b 40 00 c7 1b 40 00 c7 1b 40 00     P.@ ..@...@...@.
  400010:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 1f 40 00 c7 1b 40 00 00 00 00 00 41 20 40 00     ..@...@.....A @.
  40003c:	a9 20 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     . @...@...@...@.
  40004c:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  40005c:	c7 1b 40 00 c7 1b 40 00 00 00 00 00 b9 18 40 00     ..@...@.......@.
  40006c:	cd 18 40 00 e1 18 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  40007c:	c7 1b 40 00 f5 18 40 00 09 19 40 00 c7 1b 40 00     ..@...@...@...@.
  40008c:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  40009c:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  4000ac:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  4000bc:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  4000cc:	c7 1b 40 00 00 00 00 00 c7 1b 40 00 00 00 00 00     ..@.......@.....
  4000dc:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  4000ec:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  4000fc:	c7 1b 40 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ..@...@...@...@.
  40010c:	c7 1b 40 00 c7 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c7 1b 40 00 c7 1b 40 00 c7 1b 40 00     ......@...@...@.
  40012c:	c7 1b 40 00 c7 1b 40 00 00 00 00 00 c7 1b 40 00     ..@...@.......@.
  40013c:	c7 1b 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c8 	.word	0x204009c8
  40015c:	00000000 	.word	0x00000000
  400160:	0040c4dc 	.word	0x0040c4dc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040c4dc 	.word	0x0040c4dc
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	0040c4dc 	.word	0x0040c4dc
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00401a3d 	.word	0x00401a3d

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr
	...

004002f8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4002f8:	4b28      	ldr	r3, [pc, #160]	; (40039c <twihs_set_speed+0xa4>)
  4002fa:	4299      	cmp	r1, r3
  4002fc:	d84b      	bhi.n	400396 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4002fe:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400302:	4299      	cmp	r1, r3
  400304:	d92d      	bls.n	400362 <twihs_set_speed+0x6a>
{
  400306:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400308:	4c25      	ldr	r4, [pc, #148]	; (4003a0 <twihs_set_speed+0xa8>)
  40030a:	fba4 3402 	umull	r3, r4, r4, r2
  40030e:	0ba4      	lsrs	r4, r4, #14
  400310:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400312:	4b24      	ldr	r3, [pc, #144]	; (4003a4 <twihs_set_speed+0xac>)
  400314:	440b      	add	r3, r1
  400316:	009b      	lsls	r3, r3, #2
  400318:	fbb2 f2f3 	udiv	r2, r2, r3
  40031c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40031e:	2cff      	cmp	r4, #255	; 0xff
  400320:	d91d      	bls.n	40035e <twihs_set_speed+0x66>
  400322:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400324:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400326:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400328:	2cff      	cmp	r4, #255	; 0xff
  40032a:	d901      	bls.n	400330 <twihs_set_speed+0x38>
  40032c:	2906      	cmp	r1, #6
  40032e:	d9f9      	bls.n	400324 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400330:	2aff      	cmp	r2, #255	; 0xff
  400332:	d907      	bls.n	400344 <twihs_set_speed+0x4c>
  400334:	2906      	cmp	r1, #6
  400336:	d805      	bhi.n	400344 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400338:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40033a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40033c:	2aff      	cmp	r2, #255	; 0xff
  40033e:	d901      	bls.n	400344 <twihs_set_speed+0x4c>
  400340:	2906      	cmp	r1, #6
  400342:	d9f9      	bls.n	400338 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400344:	0213      	lsls	r3, r2, #8
  400346:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400348:	0409      	lsls	r1, r1, #16
  40034a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40034e:	430b      	orrs	r3, r1
  400350:	b2e4      	uxtb	r4, r4
  400352:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400354:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400356:	2000      	movs	r0, #0
}
  400358:	f85d 4b04 	ldr.w	r4, [sp], #4
  40035c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40035e:	2100      	movs	r1, #0
  400360:	e7e6      	b.n	400330 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400362:	0049      	lsls	r1, r1, #1
  400364:	fbb2 f2f1 	udiv	r2, r2, r1
  400368:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40036a:	2aff      	cmp	r2, #255	; 0xff
  40036c:	d911      	bls.n	400392 <twihs_set_speed+0x9a>
  40036e:	2300      	movs	r3, #0
			ckdiv++;
  400370:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400372:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400374:	2aff      	cmp	r2, #255	; 0xff
  400376:	d901      	bls.n	40037c <twihs_set_speed+0x84>
  400378:	2b06      	cmp	r3, #6
  40037a:	d9f9      	bls.n	400370 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40037c:	0211      	lsls	r1, r2, #8
  40037e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400380:	041b      	lsls	r3, r3, #16
  400382:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400386:	430b      	orrs	r3, r1
  400388:	b2d2      	uxtb	r2, r2
  40038a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40038c:	6102      	str	r2, [r0, #16]
	return PASS;
  40038e:	2000      	movs	r0, #0
  400390:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400392:	2300      	movs	r3, #0
  400394:	e7f2      	b.n	40037c <twihs_set_speed+0x84>
		return FAIL;
  400396:	2001      	movs	r0, #1
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	00061a80 	.word	0x00061a80
  4003a0:	057619f1 	.word	0x057619f1
  4003a4:	3ffd1200 	.word	0x3ffd1200

004003a8 <twihs_master_init>:
{
  4003a8:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4003aa:	f04f 32ff 	mov.w	r2, #4294967295
  4003ae:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4003b0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4003b2:	2280      	movs	r2, #128	; 0x80
  4003b4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4003b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4003b8:	2208      	movs	r2, #8
  4003ba:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4003bc:	2220      	movs	r2, #32
  4003be:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4003c0:	2204      	movs	r2, #4
  4003c2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4003c4:	680a      	ldr	r2, [r1, #0]
  4003c6:	6849      	ldr	r1, [r1, #4]
  4003c8:	4b03      	ldr	r3, [pc, #12]	; (4003d8 <twihs_master_init+0x30>)
  4003ca:	4798      	blx	r3
}
  4003cc:	2801      	cmp	r0, #1
  4003ce:	bf14      	ite	ne
  4003d0:	2000      	movne	r0, #0
  4003d2:	2001      	moveq	r0, #1
  4003d4:	bd08      	pop	{r3, pc}
  4003d6:	bf00      	nop
  4003d8:	004002f9 	.word	0x004002f9

004003dc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4003dc:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4003de:	2a00      	cmp	r2, #0
  4003e0:	d04c      	beq.n	40047c <twihs_master_read+0xa0>
{
  4003e2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4003e4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4003e6:	2600      	movs	r6, #0
  4003e8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4003ea:	684b      	ldr	r3, [r1, #4]
  4003ec:	021b      	lsls	r3, r3, #8
  4003ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4003f6:	7c0d      	ldrb	r5, [r1, #16]
  4003f8:	042d      	lsls	r5, r5, #16
  4003fa:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4003fe:	432b      	orrs	r3, r5
  400400:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400402:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400404:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400406:	b15d      	cbz	r5, 400420 <twihs_master_read+0x44>
	val = addr[0];
  400408:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40040a:	2d01      	cmp	r5, #1
  40040c:	dd02      	ble.n	400414 <twihs_master_read+0x38>
		val |= addr[1];
  40040e:	784e      	ldrb	r6, [r1, #1]
  400410:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400414:	2d02      	cmp	r5, #2
  400416:	dd04      	ble.n	400422 <twihs_master_read+0x46>
		val |= addr[2];
  400418:	7889      	ldrb	r1, [r1, #2]
  40041a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40041e:	e000      	b.n	400422 <twihs_master_read+0x46>
		return 0;
  400420:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400422:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400424:	2301      	movs	r3, #1
  400426:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400428:	2502      	movs	r5, #2
  40042a:	e012      	b.n	400452 <twihs_master_read+0x76>
  40042c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40042e:	f013 0f02 	tst.w	r3, #2
  400432:	d01b      	beq.n	40046c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400434:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400436:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400438:	6a03      	ldr	r3, [r0, #32]
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d0fb      	beq.n	400438 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400440:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400442:	2000      	movs	r0, #0
}
  400444:	bc70      	pop	{r4, r5, r6}
  400446:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  40044e:	3a01      	subs	r2, #1
  400450:	d0f2      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400452:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400454:	f413 7f80 	tst.w	r3, #256	; 0x100
  400458:	d114      	bne.n	400484 <twihs_master_read+0xa8>
  40045a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40045e:	2a01      	cmp	r2, #1
  400460:	d0e4      	beq.n	40042c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400462:	f013 0f02 	tst.w	r3, #2
  400466:	d1ef      	bne.n	400448 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400468:	2a00      	cmp	r2, #0
  40046a:	d0e5      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40046c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40046e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400472:	d105      	bne.n	400480 <twihs_master_read+0xa4>
		if (!timeout--) {
  400474:	3901      	subs	r1, #1
  400476:	d1f2      	bne.n	40045e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400478:	2009      	movs	r0, #9
  40047a:	e7e3      	b.n	400444 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  40047c:	2001      	movs	r0, #1
  40047e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400480:	2005      	movs	r0, #5
  400482:	e7df      	b.n	400444 <twihs_master_read+0x68>
  400484:	2005      	movs	r0, #5
  400486:	e7dd      	b.n	400444 <twihs_master_read+0x68>

00400488 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400488:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40048a:	2b00      	cmp	r3, #0
  40048c:	d043      	beq.n	400516 <twihs_master_write+0x8e>
{
  40048e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400490:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400492:	2600      	movs	r6, #0
  400494:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400496:	7c0a      	ldrb	r2, [r1, #16]
  400498:	0412      	lsls	r2, r2, #16
  40049a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40049e:	684d      	ldr	r5, [r1, #4]
  4004a0:	022d      	lsls	r5, r5, #8
  4004a2:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4004a6:	432a      	orrs	r2, r5
  4004a8:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4004aa:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ac:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4004ae:	b15d      	cbz	r5, 4004c8 <twihs_master_write+0x40>
	val = addr[0];
  4004b0:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4004b2:	2d01      	cmp	r5, #1
  4004b4:	dd02      	ble.n	4004bc <twihs_master_write+0x34>
		val |= addr[1];
  4004b6:	784e      	ldrb	r6, [r1, #1]
  4004b8:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4004bc:	2d02      	cmp	r5, #2
  4004be:	dd04      	ble.n	4004ca <twihs_master_write+0x42>
		val |= addr[2];
  4004c0:	7889      	ldrb	r1, [r1, #2]
  4004c2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4004c6:	e000      	b.n	4004ca <twihs_master_write+0x42>
		return 0;
  4004c8:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ca:	60c2      	str	r2, [r0, #12]
  4004cc:	e004      	b.n	4004d8 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4004ce:	f814 2b01 	ldrb.w	r2, [r4], #1
  4004d2:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4004d4:	3b01      	subs	r3, #1
  4004d6:	d00f      	beq.n	4004f8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4004d8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004da:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004de:	d11e      	bne.n	40051e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004e0:	f012 0f04 	tst.w	r2, #4
  4004e4:	d1f3      	bne.n	4004ce <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4004e6:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004e8:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004ec:	d115      	bne.n	40051a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004ee:	f012 0f04 	tst.w	r2, #4
  4004f2:	d1ec      	bne.n	4004ce <twihs_master_write+0x46>
	while (cnt > 0) {
  4004f4:	2b00      	cmp	r3, #0
  4004f6:	d1f6      	bne.n	4004e6 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4004f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004fa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004fe:	d111      	bne.n	400524 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  400500:	f013 0f04 	tst.w	r3, #4
  400504:	d0f8      	beq.n	4004f8 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400506:	2302      	movs	r3, #2
  400508:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40050a:	6a03      	ldr	r3, [r0, #32]
  40050c:	f013 0f01 	tst.w	r3, #1
  400510:	d0fb      	beq.n	40050a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  400512:	2000      	movs	r0, #0
  400514:	e004      	b.n	400520 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400516:	2001      	movs	r0, #1
  400518:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40051a:	2005      	movs	r0, #5
  40051c:	e000      	b.n	400520 <twihs_master_write+0x98>
  40051e:	2005      	movs	r0, #5
}
  400520:	bc70      	pop	{r4, r5, r6}
  400522:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400524:	2005      	movs	r0, #5
  400526:	e7fb      	b.n	400520 <twihs_master_write+0x98>

00400528 <twihs_probe>:
{
  400528:	b500      	push	{lr}
  40052a:	b087      	sub	sp, #28
	uint8_t data = 0;
  40052c:	2300      	movs	r3, #0
  40052e:	aa06      	add	r2, sp, #24
  400530:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  400534:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  400536:	2201      	movs	r2, #1
  400538:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  40053a:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  40053e:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  400542:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  400544:	a901      	add	r1, sp, #4
  400546:	4b02      	ldr	r3, [pc, #8]	; (400550 <twihs_probe+0x28>)
  400548:	4798      	blx	r3
}
  40054a:	b007      	add	sp, #28
  40054c:	f85d fb04 	ldr.w	pc, [sp], #4
  400550:	00400489 	.word	0x00400489

00400554 <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  400554:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  400558:	6143      	str	r3, [r0, #20]
  40055a:	2300      	movs	r3, #0
  40055c:	6183      	str	r3, [r0, #24]
  40055e:	61c3      	str	r3, [r0, #28]
  400560:	6203      	str	r3, [r0, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  400562:	6243      	str	r3, [r0, #36]	; 0x24
  400564:	6283      	str	r3, [r0, #40]	; 0x28
  400566:	62c3      	str	r3, [r0, #44]	; 0x2c
    ahrs->initialising = true;
  400568:	2201      	movs	r2, #1
  40056a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
  40056e:	4a0a      	ldr	r2, [pc, #40]	; (400598 <FusionAhrsReset+0x44>)
  400570:	6342      	str	r2, [r0, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400572:	63c3      	str	r3, [r0, #60]	; 0x3c
  400574:	6403      	str	r3, [r0, #64]	; 0x40
  400576:	6443      	str	r3, [r0, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400578:	6483      	str	r3, [r0, #72]	; 0x48
  40057a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40057c:	6503      	str	r3, [r0, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
  40057e:	2300      	movs	r3, #0
  400580:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
  400584:	6583      	str	r3, [r0, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
  400586:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
  40058a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
  40058e:	6603      	str	r3, [r0, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
  400590:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	41200000 	.word	0x41200000

0040059c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  40059c:	b538      	push	{r3, r4, r5, lr}
  40059e:	ed2d 8b02 	vpush	{d8}
  4005a2:	4604      	mov	r4, r0
  4005a4:	460d      	mov	r5, r1
    ahrs->settings.convention = settings->convention;
  4005a6:	780b      	ldrb	r3, [r1, #0]
  4005a8:	7003      	strb	r3, [r0, #0]
    ahrs->settings.gain = settings->gain;
  4005aa:	ed91 8a01 	vldr	s16, [r1, #4]
  4005ae:	ed80 8a01 	vstr	s16, [r0, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  4005b2:	edd1 7a02 	vldr	s15, [r1, #8]
  4005b6:	eef5 7a40 	vcmp.f32	s15, #0.0
  4005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005be:	d001      	beq.n	4005c4 <FusionAhrsSetSettings+0x28>
  4005c0:	690b      	ldr	r3, [r1, #16]
  4005c2:	bb03      	cbnz	r3, 400606 <FusionAhrsSetSettings+0x6a>
        ahrs->settings.accelerationRejection = FLT_MAX;
  4005c4:	4b23      	ldr	r3, [pc, #140]	; (400654 <FusionAhrsSetSettings+0xb8>)
  4005c6:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  4005c8:	edd5 7a03 	vldr	s15, [r5, #12]
  4005cc:	eef5 7a40 	vcmp.f32	s15, #0.0
  4005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005d4:	d001      	beq.n	4005da <FusionAhrsSetSettings+0x3e>
  4005d6:	692b      	ldr	r3, [r5, #16]
  4005d8:	bb43      	cbnz	r3, 40062c <FusionAhrsSetSettings+0x90>
        ahrs->settings.magneticRejection = FLT_MAX;
  4005da:	4b1e      	ldr	r3, [pc, #120]	; (400654 <FusionAhrsSetSettings+0xb8>)
  4005dc:	60e3      	str	r3, [r4, #12]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  4005de:	692b      	ldr	r3, [r5, #16]
  4005e0:	6123      	str	r3, [r4, #16]
    if (ahrs->initialising == false) {
  4005e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4005e6:	b90b      	cbnz	r3, 4005ec <FusionAhrsSetSettings+0x50>
        ahrs->rampedGain = ahrs->settings.gain;
  4005e8:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  4005ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  4005f0:	ee77 7ac8 	vsub.f32	s15, s15, s16
  4005f4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  4005f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4005fc:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
}
  400600:	ecbd 8b02 	vpop	{d8}
  400604:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  400606:	ed9f 7a14 	vldr	s14, [pc, #80]	; 400658 <FusionAhrsSetSettings+0xbc>
  40060a:	ee67 7a87 	vmul.f32	s15, s15, s14
  40060e:	ee17 0a90 	vmov	r0, s15
  400612:	4b12      	ldr	r3, [pc, #72]	; (40065c <FusionAhrsSetSettings+0xc0>)
  400614:	4798      	blx	r3
  400616:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  40061a:	ee07 0a10 	vmov	s14, r0
  40061e:	ee67 7a27 	vmul.f32	s15, s14, s15
  400622:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400626:	edc4 7a02 	vstr	s15, [r4, #8]
  40062a:	e7cd      	b.n	4005c8 <FusionAhrsSetSettings+0x2c>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  40062c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 400658 <FusionAhrsSetSettings+0xbc>
  400630:	ee67 7a87 	vmul.f32	s15, s15, s14
  400634:	ee17 0a90 	vmov	r0, s15
  400638:	4b08      	ldr	r3, [pc, #32]	; (40065c <FusionAhrsSetSettings+0xc0>)
  40063a:	4798      	blx	r3
  40063c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400640:	ee07 0a10 	vmov	s14, r0
  400644:	ee67 7a27 	vmul.f32	s15, s14, s15
  400648:	ee67 7aa7 	vmul.f32	s15, s15, s15
  40064c:	edc4 7a03 	vstr	s15, [r4, #12]
  400650:	e7c5      	b.n	4005de <FusionAhrsSetSettings+0x42>
  400652:	bf00      	nop
  400654:	7f7fffff 	.word	0x7f7fffff
  400658:	3c8efa35 	.word	0x3c8efa35
  40065c:	004045b1 	.word	0x004045b1

00400660 <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  400660:	b570      	push	{r4, r5, r6, lr}
  400662:	b086      	sub	sp, #24
  400664:	4606      	mov	r6, r0
    const FusionAhrsSettings settings = {
  400666:	ac01      	add	r4, sp, #4
  400668:	4d06      	ldr	r5, [pc, #24]	; (400684 <FusionAhrsInitialise+0x24>)
  40066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40066e:	682b      	ldr	r3, [r5, #0]
  400670:	6023      	str	r3, [r4, #0]
    FusionAhrsSetSettings(ahrs, &settings);
  400672:	a901      	add	r1, sp, #4
  400674:	4630      	mov	r0, r6
  400676:	4b04      	ldr	r3, [pc, #16]	; (400688 <FusionAhrsInitialise+0x28>)
  400678:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  40067a:	4630      	mov	r0, r6
  40067c:	4b03      	ldr	r3, [pc, #12]	; (40068c <FusionAhrsInitialise+0x2c>)
  40067e:	4798      	blx	r3
}
  400680:	b006      	add	sp, #24
  400682:	bd70      	pop	{r4, r5, r6, pc}
  400684:	0040bc30 	.word	0x0040bc30
  400688:	0040059d 	.word	0x0040059d
  40068c:	00400555 	.word	0x00400555

00400690 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  400690:	b410      	push	{r4}
  400692:	4604      	mov	r4, r0
    return ahrs->quaternion;
  400694:	3114      	adds	r1, #20
  400696:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  400698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  40069c:	4620      	mov	r0, r4
  40069e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006a2:	4770      	bx	lr

004006a4 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  4006a4:	b510      	push	{r4, lr}
  4006a6:	ed2d 8b04 	vpush	{d8-d9}
  4006aa:	4604      	mov	r4, r0
  4006ac:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  4006b0:	ed90 7a08 	vldr	s14, [r0, #32]
  4006b4:	edd0 7a07 	vldr	s15, [r0, #28]
  4006b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
  4006bc:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  4006c0:	ee79 6a66 	vsub.f32	s13, s18, s13
  4006c4:	ee27 6a07 	vmul.f32	s12, s14, s14
  4006c8:	edd0 5a05 	vldr	s11, [r0, #20]
  4006cc:	ee27 7a25 	vmul.f32	s14, s14, s11
  4006d0:	edd0 5a06 	vldr	s11, [r0, #24]
  4006d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
  4006d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
  4006dc:	ee16 1a90 	vmov	r1, s13
  4006e0:	ee77 7a27 	vadd.f32	s15, s14, s15
  4006e4:	ee17 0a90 	vmov	r0, s15
  4006e8:	4b2f      	ldr	r3, [pc, #188]	; (4007a8 <FusionAhrsSetHeading+0x104>)
  4006ea:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  4006ec:	eddf 8a2f 	vldr	s17, [pc, #188]	; 4007ac <FusionAhrsSetHeading+0x108>
  4006f0:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  4006f4:	ee07 0a90 	vmov	s15, r0
  4006f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
  4006fc:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
  400700:	ee18 0a90 	vmov	r0, s17
  400704:	4b2a      	ldr	r3, [pc, #168]	; (4007b0 <FusionAhrsSetHeading+0x10c>)
  400706:	4798      	blx	r3
  400708:	ee08 0a10 	vmov	s16, r0
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
  40070c:	ee18 0a90 	vmov	r0, s17
  400710:	4b28      	ldr	r3, [pc, #160]	; (4007b4 <FusionAhrsSetHeading+0x110>)
  400712:	4798      	blx	r3
  400714:	ee07 0a90 	vmov	s15, r0
  400718:	eeb1 5a67 	vneg.f32	s10, s15
  40071c:	ed94 6a05 	vldr	s12, [r4, #20]
  400720:	edd4 5a06 	vldr	s11, [r4, #24]
  400724:	edd4 7a07 	vldr	s15, [r4, #28]
  400728:	edd4 4a08 	vldr	s9, [r4, #32]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
  40072c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 4007b8 <FusionAhrsSetHeading+0x114>
  400730:	ee25 4a87 	vmul.f32	s8, s11, s14
  400734:	ee67 3a87 	vmul.f32	s7, s15, s14
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
  400738:	ee26 3a07 	vmul.f32	s6, s12, s14
  40073c:	ee24 7a87 	vmul.f32	s14, s9, s14
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
  400740:	ee68 6a06 	vmul.f32	s13, s16, s12
  400744:	ee76 6ac4 	vsub.f32	s13, s13, s8
  400748:	ee76 6ae3 	vsub.f32	s13, s13, s7
  40074c:	ee65 2a24 	vmul.f32	s5, s10, s9
  400750:	ee76 6ae2 	vsub.f32	s13, s13, s5
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  400754:	edc4 6a05 	vstr	s13, [r4, #20]
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
  400758:	ee68 6a25 	vmul.f32	s13, s16, s11
  40075c:	ee76 6a83 	vadd.f32	s13, s13, s6
  400760:	ee76 6a87 	vadd.f32	s13, s13, s14
  400764:	ee67 2a85 	vmul.f32	s5, s15, s10
  400768:	ee76 6ae2 	vsub.f32	s13, s13, s5
  40076c:	edc4 6a06 	vstr	s13, [r4, #24]
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
  400770:	ee68 7a27 	vmul.f32	s15, s16, s15
  400774:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400778:	ee77 7a83 	vadd.f32	s15, s15, s6
  40077c:	ee65 5a85 	vmul.f32	s11, s11, s10
  400780:	ee77 7aa5 	vadd.f32	s15, s15, s11
  400784:	edc4 7a07 	vstr	s15, [r4, #28]
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
  400788:	ee28 8a24 	vmul.f32	s16, s16, s9
  40078c:	ee38 8a23 	vadd.f32	s16, s16, s7
  400790:	ee38 8a44 	vsub.f32	s16, s16, s8
  400794:	ee26 6a05 	vmul.f32	s12, s12, s10
  400798:	ee38 8a06 	vadd.f32	s16, s16, s12
  40079c:	ed84 8a08 	vstr	s16, [r4, #32]
#undef Q
}
  4007a0:	ecbd 8b04 	vpop	{d8-d9}
  4007a4:	bd10      	pop	{r4, pc}
  4007a6:	bf00      	nop
  4007a8:	00404789 	.word	0x00404789
  4007ac:	3c8efa35 	.word	0x3c8efa35
  4007b0:	00404539 	.word	0x00404539
  4007b4:	004045b1 	.word	0x004045b1
  4007b8:	00000000 	.word	0x00000000

004007bc <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  4007bc:	b570      	push	{r4, r5, r6, lr}
  4007be:	ed2d 8b0a 	vpush	{d8-d12}
  4007c2:	b090      	sub	sp, #64	; 0x40
  4007c4:	4604      	mov	r4, r0
  4007c6:	a805      	add	r0, sp, #20
  4007c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  4007cc:	ed9d 9a24 	vldr	s18, [sp, #144]	; 0x90
    ahrs->accelerometer = accelerometer;
  4007d0:	f104 0324 	add.w	r3, r4, #36	; 0x24
  4007d4:	aa1e      	add	r2, sp, #120	; 0x78
  4007d6:	ca07      	ldmia	r2, {r0, r1, r2}
  4007d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  4007dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4007e0:	b1bb      	cbz	r3, 400812 <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  4007e2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
  4007e6:	ee29 7a27 	vmul.f32	s14, s18, s15
  4007ea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  4007ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4007f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
  4007f6:	ed94 7a01 	vldr	s14, [r4, #4]
  4007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
  4007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400802:	d506      	bpl.n	400812 <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  400804:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
            ahrs->initialising = false;
  400808:	2300      	movs	r3, #0
  40080a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
  40080e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    switch (ahrs->settings.convention) {
  400812:	7823      	ldrb	r3, [r4, #0]
  400814:	2b01      	cmp	r3, #1
  400816:	d908      	bls.n	40082a <FusionAhrsUpdate+0x6e>
  400818:	2b02      	cmp	r3, #2
  40081a:	d06f      	beq.n	4008fc <FusionAhrsUpdate+0x140>
    return FUSION_VECTOR_ZERO; // avoid compiler warning
  40081c:	ed9f aa9f 	vldr	s20, [pc, #636]	; 400a9c <FusionAhrsUpdate+0x2e0>
  400820:	eef0 aa4a 	vmov.f32	s21, s20
  400824:	eeb0 ba4a 	vmov.f32	s22, s20
  400828:	e01d      	b.n	400866 <FusionAhrsUpdate+0xaa>
                    .x = Q.x * Q.z - Q.w * Q.y,
  40082a:	ed94 7a06 	vldr	s14, [r4, #24]
  40082e:	ed94 aa08 	vldr	s20, [r4, #32]
  400832:	ed94 6a05 	vldr	s12, [r4, #20]
  400836:	edd4 aa07 	vldr	s21, [r4, #28]
  40083a:	ee27 ba0a 	vmul.f32	s22, s14, s20
  40083e:	ee66 7a2a 	vmul.f32	s15, s12, s21
  400842:	ee3b ba67 	vsub.f32	s22, s22, s15
                    .y = Q.y * Q.z + Q.w * Q.x,
  400846:	ee6a aa2a 	vmul.f32	s21, s20, s21
  40084a:	ee27 7a06 	vmul.f32	s14, s14, s12
  40084e:	ee7a aa87 	vadd.f32	s21, s21, s14
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  400852:	ee26 6a06 	vmul.f32	s12, s12, s12
  400856:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  40085a:	ee36 7a47 	vsub.f32	s14, s12, s14
  40085e:	ee2a aa0a 	vmul.f32	s20, s20, s20
  400862:	ee37 aa0a 	vadd.f32	s20, s14, s20
    ahrs->accelerometerIgnored = true;
  400866:	2301      	movs	r3, #1
  400868:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  40086c:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
  400870:	ed9d 8a1f 	vldr	s16, [sp, #124]	; 0x7c
  400874:	eddd 8a20 	vldr	s17, [sp, #128]	; 0x80
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  400878:	eef5 9a40 	vcmp.f32	s19, #0.0
  40087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400880:	bf18      	it	ne
  400882:	2300      	movne	r3, #0
  400884:	eeb5 8a40 	vcmp.f32	s16, #0.0
  400888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  40088c:	f003 0301 	and.w	r3, r3, #1
  400890:	bf18      	it	ne
  400892:	2300      	movne	r3, #0
  400894:	2b00      	cmp	r3, #0
  400896:	d052      	beq.n	40093e <FusionAhrsUpdate+0x182>
  400898:	eef5 8a40 	vcmp.f32	s17, #0.0
  40089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008a0:	d14d      	bne.n	40093e <FusionAhrsUpdate+0x182>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4008a2:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 400a9c <FusionAhrsUpdate+0x2e0>
  4008a6:	eef0 8a48 	vmov.f32	s17, s16
  4008aa:	eef0 9a48 	vmov.f32	s19, s16
    ahrs->magnetometerIgnored = true;
  4008ae:	2301      	movs	r3, #1
  4008b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  4008b4:	ed9d ca21 	vldr	s24, [sp, #132]	; 0x84
  4008b8:	eddd ca22 	vldr	s25, [sp, #136]	; 0x88
  4008bc:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
  4008c0:	eef5 ca40 	vcmp.f32	s25, #0.0
  4008c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008c8:	bf18      	it	ne
  4008ca:	2300      	movne	r3, #0
  4008cc:	eeb5 ca40 	vcmp.f32	s24, #0.0
  4008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  4008d4:	f003 0301 	and.w	r3, r3, #1
  4008d8:	bf18      	it	ne
  4008da:	2300      	movne	r3, #0
  4008dc:	2b00      	cmp	r3, #0
  4008de:	f000 80aa 	beq.w	400a36 <FusionAhrsUpdate+0x27a>
  4008e2:	eef5 ba40 	vcmp.f32	s23, #0.0
  4008e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4008ea:	f040 80a4 	bne.w	400a36 <FusionAhrsUpdate+0x27a>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4008ee:	eddf 5a6b 	vldr	s11, [pc, #428]	; 400a9c <FusionAhrsUpdate+0x2e0>
  4008f2:	eef0 6a65 	vmov.f32	s13, s11
  4008f6:	eeb0 6a65 	vmov.f32	s12, s11
  4008fa:	e167      	b.n	400bcc <FusionAhrsUpdate+0x410>
                    .x = Q.w * Q.y - Q.x * Q.z,
  4008fc:	ed94 7a05 	vldr	s14, [r4, #20]
  400900:	edd4 5a07 	vldr	s11, [r4, #28]
  400904:	ed94 5a06 	vldr	s10, [r4, #24]
  400908:	ed94 6a08 	vldr	s12, [r4, #32]
  40090c:	ee27 ba25 	vmul.f32	s22, s14, s11
  400910:	ee65 7a06 	vmul.f32	s15, s10, s12
  400914:	ee3b ba67 	vsub.f32	s22, s22, s15
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
  400918:	ee65 aa86 	vmul.f32	s21, s11, s12
  40091c:	ee27 5a05 	vmul.f32	s10, s14, s10
  400920:	ee7a aa85 	vadd.f32	s21, s21, s10
  400924:	eef1 aa6a 	vneg.f32	s21, s21
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
  400928:	ee27 7a07 	vmul.f32	s14, s14, s14
  40092c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
  400930:	ee3a 7a47 	vsub.f32	s14, s20, s14
  400934:	ee26 6a06 	vmul.f32	s12, s12, s12
  400938:	ee37 aa46 	vsub.f32	s20, s14, s12
  40093c:	e793      	b.n	400866 <FusionAhrsUpdate+0xaa>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  40093e:	6da2      	ldr	r2, [r4, #88]	; 0x58
  400940:	6923      	ldr	r3, [r4, #16]
  400942:	429a      	cmp	r2, r3
  400944:	d859      	bhi.n	4009fa <FusionAhrsUpdate+0x23e>
            .x = vectorA.axis.x * vectorB.axis.x,
  400946:	ee69 7aa9 	vmul.f32	s15, s19, s19
            .y = vectorA.axis.y * vectorB.axis.y,
  40094a:	ee28 7a08 	vmul.f32	s14, s16, s16
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40094e:	ee77 7a87 	vadd.f32	s15, s15, s14
            .z = vectorA.axis.z * vectorB.axis.z,
  400952:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400956:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  40095a:	4b51      	ldr	r3, [pc, #324]	; (400aa0 <FusionAhrsUpdate+0x2e4>)
  40095c:	ee17 2a90 	vmov	r2, s15
  400960:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400964:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400968:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 400aa4 <FusionAhrsUpdate+0x2e8>
  40096c:	ee67 7a87 	vmul.f32	s15, s15, s14
  400970:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400974:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400978:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 400aa8 <FusionAhrsUpdate+0x2ec>
  40097c:	ee77 7a67 	vsub.f32	s15, s14, s15
  400980:	ee67 7aa6 	vmul.f32	s15, s15, s13
            .x = vector.axis.x * scalar,
  400984:	ee27 5aa9 	vmul.f32	s10, s15, s19
            .y = vector.axis.y * scalar,
  400988:	ee67 5a88 	vmul.f32	s11, s15, s16
            .z = vector.axis.z * scalar,
  40098c:	ee68 8aa7 	vmul.f32	s17, s17, s15
            .x = A.y * B.z - A.z * B.y,
  400990:	ee25 7a8a 	vmul.f32	s14, s11, s20
  400994:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  400998:	ee77 9a67 	vsub.f32	s19, s14, s15
            .y = A.z * B.x - A.x * B.z,
  40099c:	ee68 8a8b 	vmul.f32	s17, s17, s22
  4009a0:	ee65 6a0a 	vmul.f32	s13, s10, s20
  4009a4:	ee78 8ae6 	vsub.f32	s17, s17, s13
            .z = A.x * B.y - A.y * B.x,
  4009a8:	ee2a 8a85 	vmul.f32	s16, s21, s10
  4009ac:	ee65 5a8b 	vmul.f32	s11, s11, s22
  4009b0:	ee38 8a65 	vsub.f32	s16, s16, s11
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  4009b4:	edc4 9a0f 	vstr	s19, [r4, #60]	; 0x3c
  4009b8:	edc4 8a10 	vstr	s17, [r4, #64]	; 0x40
  4009bc:	ed84 8a11 	vstr	s16, [r4, #68]	; 0x44
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  4009c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4009c4:	b973      	cbnz	r3, 4009e4 <FusionAhrsUpdate+0x228>
            .x = vectorA.axis.x * vectorB.axis.x,
  4009c6:	ee69 7aa9 	vmul.f32	s15, s19, s19
            .y = vectorA.axis.y * vectorB.axis.y,
  4009ca:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4009ce:	ee77 7a87 	vadd.f32	s15, s15, s14
  4009d2:	ee48 7a08 	vmla.f32	s15, s16, s16
  4009d6:	ed94 7a02 	vldr	s14, [r4, #8]
  4009da:	eef4 7ac7 	vcmpe.f32	s15, s14
  4009de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4009e2:	d81e      	bhi.n	400a22 <FusionAhrsUpdate+0x266>
            ahrs->accelerometerIgnored = false;
  4009e4:	2300      	movs	r3, #0
  4009e6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  4009ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4009ec:	2b09      	cmp	r3, #9
  4009ee:	bf8c      	ite	hi
  4009f0:	220a      	movhi	r2, #10
  4009f2:	2200      	movls	r2, #0
  4009f4:	1a9b      	subs	r3, r3, r2
  4009f6:	65a3      	str	r3, [r4, #88]	; 0x58
  4009f8:	e759      	b.n	4008ae <FusionAhrsUpdate+0xf2>
            const FusionQuaternion quaternion = ahrs->quaternion;
  4009fa:	ae09      	add	r6, sp, #36	; 0x24
  4009fc:	f104 0514 	add.w	r5, r4, #20
  400a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400a04:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  400a08:	4620      	mov	r0, r4
  400a0a:	4b28      	ldr	r3, [pc, #160]	; (400aac <FusionAhrsUpdate+0x2f0>)
  400a0c:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  400a0e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400a12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  400a16:	2300      	movs	r3, #0
  400a18:	65a3      	str	r3, [r4, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
  400a1a:	2301      	movs	r3, #1
  400a1c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  400a20:	e791      	b.n	400946 <FusionAhrsUpdate+0x18a>
            ahrs->accelerationRejectionTimer++;
  400a22:	6da3      	ldr	r3, [r4, #88]	; 0x58
  400a24:	3301      	adds	r3, #1
  400a26:	65a3      	str	r3, [r4, #88]	; 0x58
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400a28:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 400a9c <FusionAhrsUpdate+0x2e0>
  400a2c:	eef0 8a48 	vmov.f32	s17, s16
  400a30:	eef0 9a48 	vmov.f32	s19, s16
  400a34:	e73b      	b.n	4008ae <FusionAhrsUpdate+0xf2>
        ahrs->magneticRejectionTimeout = false;
  400a36:	2300      	movs	r3, #0
  400a38:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  400a3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
  400a3e:	6923      	ldr	r3, [r4, #16]
  400a40:	429a      	cmp	r2, r3
  400a42:	d80f      	bhi.n	400a64 <FusionAhrsUpdate+0x2a8>
    switch (ahrs->settings.convention) {
  400a44:	7823      	ldrb	r3, [r4, #0]
  400a46:	2b01      	cmp	r3, #1
  400a48:	f000 8157 	beq.w	400cfa <FusionAhrsUpdate+0x53e>
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d033      	beq.n	400ab8 <FusionAhrsUpdate+0x2fc>
  400a50:	2b02      	cmp	r3, #2
  400a52:	f000 8173 	beq.w	400d3c <FusionAhrsUpdate+0x580>
    return FUSION_VECTOR_ZERO; // avoid compiler warning
  400a56:	eddf 4a11 	vldr	s9, [pc, #68]	; 400a9c <FusionAhrsUpdate+0x2e0>
  400a5a:	eef0 3a64 	vmov.f32	s7, s9
  400a5e:	eeb0 4a64 	vmov.f32	s8, s9
  400a62:	e047      	b.n	400af4 <FusionAhrsUpdate+0x338>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
  400a64:	7825      	ldrb	r5, [r4, #0]
  400a66:	ed8d ba0d 	vstr	s22, [sp, #52]	; 0x34
  400a6a:	edcd aa0e 	vstr	s21, [sp, #56]	; 0x38
  400a6e:	ed8d aa0f 	vstr	s20, [sp, #60]	; 0x3c
  400a72:	ab21      	add	r3, sp, #132	; 0x84
  400a74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400a78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  400a7c:	ab10      	add	r3, sp, #64	; 0x40
  400a7e:	e913 000e 	ldmdb	r3, {r1, r2, r3}
  400a82:	4628      	mov	r0, r5
  400a84:	4d0a      	ldr	r5, [pc, #40]	; (400ab0 <FusionAhrsUpdate+0x2f4>)
  400a86:	47a8      	blx	r5
  400a88:	4601      	mov	r1, r0
  400a8a:	4620      	mov	r0, r4
  400a8c:	4b09      	ldr	r3, [pc, #36]	; (400ab4 <FusionAhrsUpdate+0x2f8>)
  400a8e:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  400a90:	2300      	movs	r3, #0
  400a92:	6623      	str	r3, [r4, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
  400a94:	2301      	movs	r3, #1
  400a96:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  400a9a:	e7d3      	b.n	400a44 <FusionAhrsUpdate+0x288>
  400a9c:	00000000 	.word	0x00000000
  400aa0:	5f1f1412 	.word	0x5f1f1412
  400aa4:	3f36d312 	.word	0x3f36d312
  400aa8:	3fd851ff 	.word	0x3fd851ff
  400aac:	00400555 	.word	0x00400555
  400ab0:	00400e05 	.word	0x00400e05
  400ab4:	004006a5 	.word	0x004006a5
                    .x = Q.x * Q.y + Q.w * Q.z,
  400ab8:	edd4 6a06 	vldr	s13, [r4, #24]
  400abc:	edd4 7a07 	vldr	s15, [r4, #28]
  400ac0:	edd4 4a05 	vldr	s9, [r4, #20]
  400ac4:	ed94 6a08 	vldr	s12, [r4, #32]
  400ac8:	ee26 4aa7 	vmul.f32	s8, s13, s15
  400acc:	ee24 7a86 	vmul.f32	s14, s9, s12
  400ad0:	ee34 4a07 	vadd.f32	s8, s8, s14
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  400ad4:	ee64 5aa4 	vmul.f32	s11, s9, s9
  400ad8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
  400adc:	ee75 5ae3 	vsub.f32	s11, s11, s7
  400ae0:	ee67 3aa7 	vmul.f32	s7, s15, s15
  400ae4:	ee75 3aa3 	vadd.f32	s7, s11, s7
                    .z = Q.y * Q.z - Q.w * Q.x,
  400ae8:	ee67 7a86 	vmul.f32	s15, s15, s12
  400aec:	ee66 6aa4 	vmul.f32	s13, s13, s9
  400af0:	ee77 4ae6 	vsub.f32	s9, s15, s13
            .x = A.y * B.z - A.z * B.y,
  400af4:	ee2a 6aab 	vmul.f32	s12, s21, s23
  400af8:	ee6c 7a8a 	vmul.f32	s15, s25, s20
  400afc:	ee36 6a67 	vsub.f32	s12, s12, s15
            .y = A.z * B.x - A.x * B.z,
  400b00:	ee2c 7a0a 	vmul.f32	s14, s24, s20
  400b04:	ee6b ba2b 	vmul.f32	s23, s22, s23
  400b08:	ee37 7a6b 	vsub.f32	s14, s14, s23
            .z = A.x * B.y - A.y * B.x,
  400b0c:	ee6b 7a2c 	vmul.f32	s15, s22, s25
  400b10:	ee6a 6a8c 	vmul.f32	s13, s21, s24
  400b14:	ee77 6ae6 	vsub.f32	s13, s15, s13
            .x = vectorA.axis.x * vectorB.axis.x,
  400b18:	ee26 5a06 	vmul.f32	s10, s12, s12
            .y = vectorA.axis.y * vectorB.axis.y,
  400b1c:	ee67 7a07 	vmul.f32	s15, s14, s14
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400b20:	ee35 5a27 	vadd.f32	s10, s10, s15
            .z = vectorA.axis.z * vectorB.axis.z,
  400b24:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400b28:	ee35 5a27 	vadd.f32	s10, s10, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400b2c:	4b99      	ldr	r3, [pc, #612]	; (400d94 <FusionAhrsUpdate+0x5d8>)
  400b2e:	ee15 2a10 	vmov	r2, s10
  400b32:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400b36:	ee05 3a90 	vmov	s11, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400b3a:	eddf 7a97 	vldr	s15, [pc, #604]	; 400d98 <FusionAhrsUpdate+0x5dc>
  400b3e:	ee25 5a27 	vmul.f32	s10, s10, s15
  400b42:	ee25 5a25 	vmul.f32	s10, s10, s11
  400b46:	ee25 5a25 	vmul.f32	s10, s10, s11
  400b4a:	eddf 7a94 	vldr	s15, [pc, #592]	; 400d9c <FusionAhrsUpdate+0x5e0>
  400b4e:	ee77 7ac5 	vsub.f32	s15, s15, s10
  400b52:	ee67 7aa5 	vmul.f32	s15, s15, s11
            .x = vector.axis.x * scalar,
  400b56:	ee67 5a86 	vmul.f32	s11, s15, s12
            .y = vector.axis.y * scalar,
  400b5a:	ee27 7a87 	vmul.f32	s14, s15, s14
            .z = vector.axis.z * scalar,
  400b5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            .x = A.y * B.z - A.z * B.y,
  400b62:	ee27 6a24 	vmul.f32	s12, s14, s9
  400b66:	ee67 6aa3 	vmul.f32	s13, s15, s7
  400b6a:	ee36 6a66 	vsub.f32	s12, s12, s13
            .y = A.z * B.x - A.x * B.z,
  400b6e:	ee67 7a84 	vmul.f32	s15, s15, s8
  400b72:	ee65 6aa4 	vmul.f32	s13, s11, s9
  400b76:	ee77 6ae6 	vsub.f32	s13, s15, s13
            .z = A.x * B.y - A.y * B.x,
  400b7a:	ee65 5aa3 	vmul.f32	s11, s11, s7
  400b7e:	ee27 7a04 	vmul.f32	s14, s14, s8
  400b82:	ee75 5ac7 	vsub.f32	s11, s11, s14
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
  400b86:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
  400b8a:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
  400b8e:	edc4 5a14 	vstr	s11, [r4, #80]	; 0x50
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  400b92:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  400b96:	b97b      	cbnz	r3, 400bb8 <FusionAhrsUpdate+0x3fc>
            .x = vectorA.axis.x * vectorB.axis.x,
  400b98:	ee66 7a06 	vmul.f32	s15, s12, s12
            .y = vectorA.axis.y * vectorB.axis.y,
  400b9c:	ee26 7aa6 	vmul.f32	s14, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
  400ba4:	ee45 7aa5 	vmla.f32	s15, s11, s11
  400ba8:	ed94 7a03 	vldr	s14, [r4, #12]
  400bac:	eef4 7ac7 	vcmpe.f32	s15, s14
  400bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400bb4:	f200 80e3 	bhi.w	400d7e <FusionAhrsUpdate+0x5c2>
            ahrs->magnetometerIgnored = false;
  400bb8:	2300      	movs	r3, #0
  400bba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  400bbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
  400bc0:	2b09      	cmp	r3, #9
  400bc2:	bf8c      	ite	hi
  400bc4:	220a      	movhi	r2, #10
  400bc6:	2200      	movls	r2, #0
  400bc8:	1a9b      	subs	r3, r3, r2
  400bca:	6623      	str	r3, [r4, #96]	; 0x60
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  400bcc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
            .x = vectorA.axis.x + vectorB.axis.x,
  400bd0:	ee36 7a29 	vadd.f32	s14, s12, s19
            .x = vector.axis.x * scalar,
  400bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
  400bd8:	ed9f 5a71 	vldr	s10, [pc, #452]	; 400da0 <FusionAhrsUpdate+0x5e4>
  400bdc:	ed9d 6a05 	vldr	s12, [sp, #20]
  400be0:	ee26 6a05 	vmul.f32	s12, s12, s10
            .x = vectorA.axis.x + vectorB.axis.x,
  400be4:	ee37 7a06 	vadd.f32	s14, s14, s12
            .x = vector.axis.x * scalar,
  400be8:	ee27 7a09 	vmul.f32	s14, s14, s18
            .y = vectorA.axis.y + vectorB.axis.y,
  400bec:	ee78 6aa6 	vadd.f32	s13, s17, s13
            .y = vector.axis.y * scalar,
  400bf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
  400bf4:	eddd 8a06 	vldr	s17, [sp, #24]
  400bf8:	ee68 8a85 	vmul.f32	s17, s17, s10
            .y = vectorA.axis.y + vectorB.axis.y,
  400bfc:	ee76 6aa8 	vadd.f32	s13, s13, s17
            .y = vector.axis.y * scalar,
  400c00:	ee66 6a89 	vmul.f32	s13, s13, s18
            .z = vectorA.axis.z + vectorB.axis.z,
  400c04:	ee38 8a25 	vadd.f32	s16, s16, s11
            .z = vector.axis.z * scalar,
  400c08:	ee28 8a27 	vmul.f32	s16, s16, s15
  400c0c:	eddd 7a07 	vldr	s15, [sp, #28]
  400c10:	ee67 7a85 	vmul.f32	s15, s15, s10
            .z = vectorA.axis.z + vectorB.axis.z,
  400c14:	ee38 8a27 	vadd.f32	s16, s16, s15
            .z = vector.axis.z * scalar,
  400c18:	ee68 7a09 	vmul.f32	s15, s16, s18
  400c1c:	ed94 3a05 	vldr	s6, [r4, #20]
  400c20:	edd4 3a06 	vldr	s7, [r4, #24]
  400c24:	ed94 4a07 	vldr	s8, [r4, #28]
  400c28:	ed94 5a08 	vldr	s10, [r4, #32]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
  400c2c:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  400c30:	ee26 6a84 	vmul.f32	s12, s13, s8
  400c34:	ee75 5ac6 	vsub.f32	s11, s11, s12
  400c38:	ee27 6a85 	vmul.f32	s12, s15, s10
  400c3c:	ee75 5ac6 	vsub.f32	s11, s11, s12
            .w = quaternionA.element.w + quaternionB.element.w,
  400c40:	ee75 5a83 	vadd.f32	s11, s11, s6
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
  400c44:	ee67 4a03 	vmul.f32	s9, s14, s6
  400c48:	ee27 6a84 	vmul.f32	s12, s15, s8
  400c4c:	ee74 4a86 	vadd.f32	s9, s9, s12
  400c50:	ee26 6a85 	vmul.f32	s12, s13, s10
  400c54:	ee74 4ac6 	vsub.f32	s9, s9, s12
            .x = quaternionA.element.x + quaternionB.element.x,
  400c58:	ee74 4aa3 	vadd.f32	s9, s9, s7
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
  400c5c:	ee26 6a83 	vmul.f32	s12, s13, s6
  400c60:	ee67 2aa3 	vmul.f32	s5, s15, s7
  400c64:	ee36 6a62 	vsub.f32	s12, s12, s5
  400c68:	ee67 2a05 	vmul.f32	s5, s14, s10
  400c6c:	ee36 6a22 	vadd.f32	s12, s12, s5
            .y = quaternionA.element.y + quaternionB.element.y,
  400c70:	ee36 6a04 	vadd.f32	s12, s12, s8
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
  400c74:	ee67 7a83 	vmul.f32	s15, s15, s6
  400c78:	ee66 6aa3 	vmul.f32	s13, s13, s7
  400c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
  400c80:	ee27 7a04 	vmul.f32	s14, s14, s8
  400c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
            .z = quaternionA.element.z + quaternionB.element.z,
  400c88:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  400c8c:	ee25 7aa5 	vmul.f32	s14, s11, s11
  400c90:	ee64 6aa4 	vmul.f32	s13, s9, s9
  400c94:	ee37 7a26 	vadd.f32	s14, s14, s13
  400c98:	ee66 6a06 	vmul.f32	s13, s12, s12
  400c9c:	ee37 7a26 	vadd.f32	s14, s14, s13
  400ca0:	ee67 6aa7 	vmul.f32	s13, s15, s15
  400ca4:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400ca8:	4b3a      	ldr	r3, [pc, #232]	; (400d94 <FusionAhrsUpdate+0x5d8>)
  400caa:	ee17 2a10 	vmov	r2, s14
  400cae:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400cb2:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400cb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 400d98 <FusionAhrsUpdate+0x5dc>
  400cba:	ee27 7a26 	vmul.f32	s14, s14, s13
  400cbe:	ee27 7a05 	vmul.f32	s14, s14, s10
  400cc2:	ee27 7a05 	vmul.f32	s14, s14, s10
  400cc6:	eddf 6a35 	vldr	s13, [pc, #212]	; 400d9c <FusionAhrsUpdate+0x5e0>
  400cca:	ee36 7ac7 	vsub.f32	s14, s13, s14
  400cce:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
  400cd2:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  400cd6:	edc4 5a05 	vstr	s11, [r4, #20]
            .x = Q.x * magnitudeReciprocal,
  400cda:	ee67 6a24 	vmul.f32	s13, s14, s9
  400cde:	edc4 6a06 	vstr	s13, [r4, #24]
            .y = Q.y * magnitudeReciprocal,
  400ce2:	ee27 6a06 	vmul.f32	s12, s14, s12
  400ce6:	ed84 6a07 	vstr	s12, [r4, #28]
            .z = Q.z * magnitudeReciprocal,
  400cea:	ee27 7a27 	vmul.f32	s14, s14, s15
  400cee:	ed84 7a08 	vstr	s14, [r4, #32]
}
  400cf2:	b010      	add	sp, #64	; 0x40
  400cf4:	ecbd 8b0a 	vpop	{d8-d12}
  400cf8:	bd70      	pop	{r4, r5, r6, pc}
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
  400cfa:	edd4 6a05 	vldr	s13, [r4, #20]
  400cfe:	edd4 7a06 	vldr	s15, [r4, #24]
  400d02:	ee26 4aa6 	vmul.f32	s8, s13, s13
  400d06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  400d0a:	ee37 7a44 	vsub.f32	s14, s14, s8
  400d0e:	ee27 4aa7 	vmul.f32	s8, s15, s15
  400d12:	ee37 4a44 	vsub.f32	s8, s14, s8
                    .y = Q.w * Q.z - Q.x * Q.y,
  400d16:	edd4 4a08 	vldr	s9, [r4, #32]
  400d1a:	ed94 5a07 	vldr	s10, [r4, #28]
  400d1e:	ee66 5aa4 	vmul.f32	s11, s13, s9
  400d22:	ee27 7a85 	vmul.f32	s14, s15, s10
  400d26:	ee75 3ac7 	vsub.f32	s7, s11, s14
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
  400d2a:	ee67 4aa4 	vmul.f32	s9, s15, s9
  400d2e:	ee66 6a85 	vmul.f32	s13, s13, s10
  400d32:	ee74 4aa6 	vadd.f32	s9, s9, s13
  400d36:	eef1 4a64 	vneg.f32	s9, s9
  400d3a:	e6db      	b.n	400af4 <FusionAhrsUpdate+0x338>
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
  400d3c:	edd4 6a06 	vldr	s13, [r4, #24]
  400d40:	edd4 7a07 	vldr	s15, [r4, #28]
  400d44:	edd4 4a05 	vldr	s9, [r4, #20]
  400d48:	ed94 6a08 	vldr	s12, [r4, #32]
  400d4c:	ee26 7aa7 	vmul.f32	s14, s13, s15
  400d50:	ee24 4a86 	vmul.f32	s8, s9, s12
  400d54:	ee37 7a04 	vadd.f32	s14, s14, s8
  400d58:	eeb1 4a47 	vneg.f32	s8, s14
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
  400d5c:	ee64 3aa4 	vmul.f32	s7, s9, s9
  400d60:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
  400d64:	ee75 5ae3 	vsub.f32	s11, s11, s7
  400d68:	ee67 3aa7 	vmul.f32	s7, s15, s15
  400d6c:	ee75 3ae3 	vsub.f32	s7, s11, s7
                    .z = Q.w * Q.x - Q.y * Q.z,
  400d70:	ee66 6aa4 	vmul.f32	s13, s13, s9
  400d74:	ee67 7a86 	vmul.f32	s15, s15, s12
  400d78:	ee76 4ae7 	vsub.f32	s9, s13, s15
  400d7c:	e6ba      	b.n	400af4 <FusionAhrsUpdate+0x338>
            ahrs->magneticRejectionTimer++;
  400d7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  400d80:	3301      	adds	r3, #1
  400d82:	6623      	str	r3, [r4, #96]	; 0x60
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400d84:	eddf 5a07 	vldr	s11, [pc, #28]	; 400da4 <FusionAhrsUpdate+0x5e8>
  400d88:	eef0 6a65 	vmov.f32	s13, s11
  400d8c:	eeb0 6a65 	vmov.f32	s12, s11
  400d90:	e71c      	b.n	400bcc <FusionAhrsUpdate+0x410>
  400d92:	bf00      	nop
  400d94:	5f1f1412 	.word	0x5f1f1412
  400d98:	3f36d312 	.word	0x3f36d312
  400d9c:	3fd851ff 	.word	0x3fd851ff
  400da0:	3c0efa35 	.word	0x3c0efa35
  400da4:	00000000 	.word	0x00000000

00400da8 <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  400da8:	b530      	push	{r4, r5, lr}
  400daa:	b091      	sub	sp, #68	; 0x44
  400dac:	4605      	mov	r5, r0
  400dae:	ac09      	add	r4, sp, #36	; 0x24
  400db0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  400db4:	2300      	movs	r3, #0
  400db6:	930d      	str	r3, [sp, #52]	; 0x34
  400db8:	930e      	str	r3, [sp, #56]	; 0x38
  400dba:	930f      	str	r3, [sp, #60]	; 0x3c
  400dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  400dbe:	9306      	str	r3, [sp, #24]
  400dc0:	ab03      	add	r3, sp, #12
  400dc2:	aa10      	add	r2, sp, #64	; 0x40
  400dc4:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  400dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  400dcc:	ab14      	add	r3, sp, #80	; 0x50
  400dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400dd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  400dd6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  400dda:	4628      	mov	r0, r5
  400ddc:	4c07      	ldr	r4, [pc, #28]	; (400dfc <FusionAhrsUpdateNoMagnetometer+0x54>)
  400dde:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  400de0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  400de4:	b113      	cbz	r3, 400dec <FusionAhrsUpdateNoMagnetometer+0x44>
  400de6:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
  400dea:	b10b      	cbz	r3, 400df0 <FusionAhrsUpdateNoMagnetometer+0x48>
}
  400dec:	b011      	add	sp, #68	; 0x44
  400dee:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  400df0:	2100      	movs	r1, #0
  400df2:	4628      	mov	r0, r5
  400df4:	4b02      	ldr	r3, [pc, #8]	; (400e00 <FusionAhrsUpdateNoMagnetometer+0x58>)
  400df6:	4798      	blx	r3
}
  400df8:	e7f8      	b.n	400dec <FusionAhrsUpdateNoMagnetometer+0x44>
  400dfa:	bf00      	nop
  400dfc:	004007bd 	.word	0x004007bd
  400e00:	004006a5 	.word	0x004006a5

00400e04 <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
  400e04:	b500      	push	{lr}
  400e06:	b085      	sub	sp, #20
  400e08:	f10d 0e10 	add.w	lr, sp, #16
  400e0c:	e90e 000e 	stmdb	lr, {r1, r2, r3}
  400e10:	eddd 4a01 	vldr	s9, [sp, #4]
  400e14:	eddd 7a02 	vldr	s15, [sp, #8]
  400e18:	ed9d 7a03 	vldr	s14, [sp, #12]
  400e1c:	ed9d 5a06 	vldr	s10, [sp, #24]
  400e20:	eddd 5a07 	vldr	s11, [sp, #28]
  400e24:	ed9d 4a08 	vldr	s8, [sp, #32]
    switch (convention) {
  400e28:	2801      	cmp	r0, #1
  400e2a:	d07c      	beq.n	400f26 <FusionCompassCalculateHeading+0x122>
  400e2c:	b128      	cbz	r0, 400e3a <FusionCompassCalculateHeading+0x36>
  400e2e:	2802      	cmp	r0, #2
  400e30:	f000 80ed 	beq.w	40100e <FusionCompassCalculateHeading+0x20a>
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
        }
    }
	return 0; // avoid compiler warning
  400e34:	eddf 7ab2 	vldr	s15, [pc, #712]	; 401100 <FusionCompassCalculateHeading+0x2fc>
  400e38:	e070      	b.n	400f1c <FusionCompassCalculateHeading+0x118>
            .x = A.y * B.z - A.z * B.y,
  400e3a:	ee67 3a84 	vmul.f32	s7, s15, s8
  400e3e:	ee67 6a25 	vmul.f32	s13, s14, s11
  400e42:	ee73 3ae6 	vsub.f32	s7, s7, s13
            .y = A.z * B.x - A.x * B.z,
  400e46:	ee67 6a05 	vmul.f32	s13, s14, s10
  400e4a:	ee24 4a84 	vmul.f32	s8, s9, s8
  400e4e:	ee36 4ac4 	vsub.f32	s8, s13, s8
            .z = A.x * B.y - A.y * B.x,
  400e52:	ee24 6aa5 	vmul.f32	s12, s9, s11
  400e56:	ee27 5a85 	vmul.f32	s10, s15, s10
  400e5a:	ee36 5a45 	vsub.f32	s10, s12, s10
            .x = vectorA.axis.x * vectorB.axis.x,
  400e5e:	ee63 5aa3 	vmul.f32	s11, s7, s7
            .y = vectorA.axis.y * vectorB.axis.y,
  400e62:	ee64 6a04 	vmul.f32	s13, s8, s8
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400e66:	ee75 5aa6 	vadd.f32	s11, s11, s13
            .z = vectorA.axis.z * vectorB.axis.z,
  400e6a:	ee65 6a05 	vmul.f32	s13, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400e6e:	ee75 5aa6 	vadd.f32	s11, s11, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400e72:	4ba4      	ldr	r3, [pc, #656]	; (401104 <FusionCompassCalculateHeading+0x300>)
  400e74:	ee15 2a90 	vmov	r2, s11
  400e78:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  400e7c:	ee06 2a10 	vmov	s12, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400e80:	eddf 2aa1 	vldr	s5, [pc, #644]	; 401108 <FusionCompassCalculateHeading+0x304>
  400e84:	ee65 5aa2 	vmul.f32	s11, s11, s5
  400e88:	ee65 5a86 	vmul.f32	s11, s11, s12
  400e8c:	ee65 5a86 	vmul.f32	s11, s11, s12
  400e90:	ed9f 3a9e 	vldr	s6, [pc, #632]	; 40110c <FusionCompassCalculateHeading+0x308>
  400e94:	ee73 5a65 	vsub.f32	s11, s6, s11
  400e98:	ee25 6a86 	vmul.f32	s12, s11, s12
            .x = vector.axis.x * scalar,
  400e9c:	ee66 5a23 	vmul.f32	s11, s12, s7
            .y = vector.axis.y * scalar,
  400ea0:	ee26 4a04 	vmul.f32	s8, s12, s8
            .z = vector.axis.z * scalar,
  400ea4:	ee26 6a05 	vmul.f32	s12, s12, s10
            .x = A.y * B.z - A.z * B.y,
  400ea8:	ee24 5a07 	vmul.f32	s10, s8, s14
  400eac:	ee66 6a27 	vmul.f32	s13, s12, s15
  400eb0:	ee35 5a66 	vsub.f32	s10, s10, s13
            .y = A.z * B.x - A.x * B.z,
  400eb4:	ee26 6a24 	vmul.f32	s12, s12, s9
  400eb8:	ee25 7a87 	vmul.f32	s14, s11, s14
  400ebc:	ee36 6a47 	vsub.f32	s12, s12, s14
            .z = A.x * B.y - A.y * B.x,
  400ec0:	ee65 7aa7 	vmul.f32	s15, s11, s15
  400ec4:	ee24 4a24 	vmul.f32	s8, s8, s9
  400ec8:	ee37 4ac4 	vsub.f32	s8, s15, s8
            .x = vectorA.axis.x * vectorB.axis.x,
  400ecc:	ee25 7a05 	vmul.f32	s14, s10, s10
            .y = vectorA.axis.y * vectorB.axis.y,
  400ed0:	ee26 6a06 	vmul.f32	s12, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400ed4:	ee37 6a06 	vadd.f32	s12, s14, s12
            .z = vectorA.axis.z * vectorB.axis.z,
  400ed8:	ee24 4a04 	vmul.f32	s8, s8, s8
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400edc:	ee36 6a04 	vadd.f32	s12, s12, s8
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400ee0:	ee16 2a10 	vmov	r2, s12
  400ee4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400ee8:	ee07 3a90 	vmov	s15, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400eec:	ee26 6a22 	vmul.f32	s12, s12, s5
  400ef0:	ee26 6a27 	vmul.f32	s12, s12, s15
  400ef4:	ee26 6a27 	vmul.f32	s12, s12, s15
  400ef8:	ee33 6a46 	vsub.f32	s12, s6, s12
  400efc:	ee26 6a27 	vmul.f32	s12, s12, s15
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
  400f00:	ee66 7a05 	vmul.f32	s15, s12, s10
  400f04:	ee17 1a90 	vmov	r1, s15
  400f08:	ee15 0a90 	vmov	r0, s11
  400f0c:	4b80      	ldr	r3, [pc, #512]	; (401110 <FusionCompassCalculateHeading+0x30c>)
  400f0e:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  400f10:	eddf 7a80 	vldr	s15, [pc, #512]	; 401114 <FusionCompassCalculateHeading+0x310>
  400f14:	ee07 0a10 	vmov	s14, r0
  400f18:	ee67 7a27 	vmul.f32	s15, s14, s15
}
  400f1c:	ee17 0a90 	vmov	r0, s15
  400f20:	b005      	add	sp, #20
  400f22:	f85d fb04 	ldr.w	pc, [sp], #4
            .x = A.y * B.z - A.z * B.y,
  400f26:	ee67 3a84 	vmul.f32	s7, s15, s8
  400f2a:	ee67 6a25 	vmul.f32	s13, s14, s11
  400f2e:	ee73 3ae6 	vsub.f32	s7, s7, s13
            .y = A.z * B.x - A.x * B.z,
  400f32:	ee67 6a05 	vmul.f32	s13, s14, s10
  400f36:	ee24 4a84 	vmul.f32	s8, s9, s8
  400f3a:	ee36 4ac4 	vsub.f32	s8, s13, s8
            .z = A.x * B.y - A.y * B.x,
  400f3e:	ee64 5aa5 	vmul.f32	s11, s9, s11
  400f42:	ee67 6a85 	vmul.f32	s13, s15, s10
  400f46:	ee75 5ae6 	vsub.f32	s11, s11, s13
            .x = vectorA.axis.x * vectorB.axis.x,
  400f4a:	ee23 6aa3 	vmul.f32	s12, s7, s7
            .y = vectorA.axis.y * vectorB.axis.y,
  400f4e:	ee64 6a04 	vmul.f32	s13, s8, s8
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400f52:	ee36 6a26 	vadd.f32	s12, s12, s13
            .z = vectorA.axis.z * vectorB.axis.z,
  400f56:	ee65 6aa5 	vmul.f32	s13, s11, s11
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400f5a:	ee36 6a26 	vadd.f32	s12, s12, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400f5e:	4b69      	ldr	r3, [pc, #420]	; (401104 <FusionCompassCalculateHeading+0x300>)
  400f60:	ee16 2a10 	vmov	r2, s12
  400f64:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  400f68:	ee06 2a90 	vmov	s13, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400f6c:	eddf 2a66 	vldr	s5, [pc, #408]	; 401108 <FusionCompassCalculateHeading+0x304>
  400f70:	ee26 6a22 	vmul.f32	s12, s12, s5
  400f74:	ee26 6a26 	vmul.f32	s12, s12, s13
  400f78:	ee26 6a26 	vmul.f32	s12, s12, s13
  400f7c:	ed9f 3a63 	vldr	s6, [pc, #396]	; 40110c <FusionCompassCalculateHeading+0x308>
  400f80:	ee33 6a46 	vsub.f32	s12, s6, s12
  400f84:	ee66 6a26 	vmul.f32	s13, s12, s13
            .x = vector.axis.x * scalar,
  400f88:	ee26 5aa3 	vmul.f32	s10, s13, s7
            .y = vector.axis.y * scalar,
  400f8c:	ee26 4a84 	vmul.f32	s8, s13, s8
            .z = vector.axis.z * scalar,
  400f90:	ee66 6aa5 	vmul.f32	s13, s13, s11
            .x = A.y * B.z - A.z * B.y,
  400f94:	ee64 5a07 	vmul.f32	s11, s8, s14
  400f98:	ee26 6aa7 	vmul.f32	s12, s13, s15
  400f9c:	ee75 5ac6 	vsub.f32	s11, s11, s12
            .y = A.z * B.x - A.x * B.z,
  400fa0:	ee66 6aa4 	vmul.f32	s13, s13, s9
  400fa4:	ee25 7a07 	vmul.f32	s14, s10, s14
  400fa8:	ee76 6ac7 	vsub.f32	s13, s13, s14
            .z = A.x * B.y - A.y * B.x,
  400fac:	ee65 7a27 	vmul.f32	s15, s10, s15
  400fb0:	ee24 4a24 	vmul.f32	s8, s8, s9
  400fb4:	ee37 4ac4 	vsub.f32	s8, s15, s8
            .x = vectorA.axis.x * vectorB.axis.x,
  400fb8:	ee25 7aa5 	vmul.f32	s14, s11, s11
            .y = vectorA.axis.y * vectorB.axis.y,
  400fbc:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400fc0:	ee77 6a26 	vadd.f32	s13, s14, s13
            .z = vectorA.axis.z * vectorB.axis.z,
  400fc4:	ee24 4a04 	vmul.f32	s8, s8, s8
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400fc8:	ee76 6a84 	vadd.f32	s13, s13, s8
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400fcc:	ee16 2a90 	vmov	r2, s13
  400fd0:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400fd4:	ee07 3a90 	vmov	s15, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400fd8:	ee66 6aa2 	vmul.f32	s13, s13, s5
  400fdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
  400fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
  400fe4:	ee73 6a66 	vsub.f32	s13, s6, s13
  400fe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
  400fec:	eef1 7a45 	vneg.f32	s15, s10
  400ff0:	ee17 1a90 	vmov	r1, s15
  400ff4:	ee66 7aa5 	vmul.f32	s15, s13, s11
  400ff8:	ee17 0a90 	vmov	r0, s15
  400ffc:	4b44      	ldr	r3, [pc, #272]	; (401110 <FusionCompassCalculateHeading+0x30c>)
  400ffe:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  401000:	eddf 7a44 	vldr	s15, [pc, #272]	; 401114 <FusionCompassCalculateHeading+0x310>
  401004:	ee07 0a10 	vmov	s14, r0
  401008:	ee67 7a27 	vmul.f32	s15, s14, s15
  40100c:	e786      	b.n	400f1c <FusionCompassCalculateHeading+0x118>
            .x = vector.axis.x * scalar,
  40100e:	eef1 4a64 	vneg.f32	s9, s9
            .y = vector.axis.y * scalar,
  401012:	eef1 7a67 	vneg.f32	s15, s15
            .z = vector.axis.z * scalar,
  401016:	eeb1 6a47 	vneg.f32	s12, s14
            .x = A.y * B.z - A.z * B.y,
  40101a:	ee27 3a84 	vmul.f32	s6, s15, s8
  40101e:	ee26 7a25 	vmul.f32	s14, s12, s11
  401022:	ee33 3a47 	vsub.f32	s6, s6, s14
            .y = A.z * B.x - A.x * B.z,
  401026:	ee66 3a05 	vmul.f32	s7, s12, s10
  40102a:	ee24 4a84 	vmul.f32	s8, s9, s8
  40102e:	ee33 4ac4 	vsub.f32	s8, s7, s8
            .z = A.x * B.y - A.y * B.x,
  401032:	ee64 5aa5 	vmul.f32	s11, s9, s11
  401036:	ee27 5a85 	vmul.f32	s10, s15, s10
  40103a:	ee75 5ac5 	vsub.f32	s11, s11, s10
            .x = vectorA.axis.x * vectorB.axis.x,
  40103e:	ee63 6a03 	vmul.f32	s13, s6, s6
            .y = vectorA.axis.y * vectorB.axis.y,
  401042:	ee24 7a04 	vmul.f32	s14, s8, s8
    return vector.axis.x + vector.axis.y + vector.axis.z;
  401046:	ee76 6a87 	vadd.f32	s13, s13, s14
            .z = vectorA.axis.z * vectorB.axis.z,
  40104a:	ee25 7aa5 	vmul.f32	s14, s11, s11
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40104e:	ee76 6a87 	vadd.f32	s13, s13, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  401052:	4b2c      	ldr	r3, [pc, #176]	; (401104 <FusionCompassCalculateHeading+0x300>)
  401054:	ee16 2a90 	vmov	r2, s13
  401058:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  40105c:	ee07 2a10 	vmov	s14, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  401060:	eddf 2a29 	vldr	s5, [pc, #164]	; 401108 <FusionCompassCalculateHeading+0x304>
  401064:	ee66 6aa2 	vmul.f32	s13, s13, s5
  401068:	ee66 6a87 	vmul.f32	s13, s13, s14
  40106c:	ee66 6a87 	vmul.f32	s13, s13, s14
  401070:	eddf 3a26 	vldr	s7, [pc, #152]	; 40110c <FusionCompassCalculateHeading+0x308>
  401074:	ee73 6ae6 	vsub.f32	s13, s7, s13
  401078:	ee26 7a87 	vmul.f32	s14, s13, s14
            .x = vector.axis.x * scalar,
  40107c:	ee27 5a03 	vmul.f32	s10, s14, s6
            .y = vector.axis.y * scalar,
  401080:	ee27 4a04 	vmul.f32	s8, s14, s8
            .z = vector.axis.z * scalar,
  401084:	ee27 7a25 	vmul.f32	s14, s14, s11
            .x = A.y * B.z - A.z * B.y,
  401088:	ee64 5a06 	vmul.f32	s11, s8, s12
  40108c:	ee67 6a27 	vmul.f32	s13, s14, s15
  401090:	ee75 5ae6 	vsub.f32	s11, s11, s13
            .y = A.z * B.x - A.x * B.z,
  401094:	ee27 7a24 	vmul.f32	s14, s14, s9
  401098:	ee25 6a06 	vmul.f32	s12, s10, s12
  40109c:	ee37 7a46 	vsub.f32	s14, s14, s12
            .z = A.x * B.y - A.y * B.x,
  4010a0:	ee65 7a27 	vmul.f32	s15, s10, s15
  4010a4:	ee24 4a24 	vmul.f32	s8, s8, s9
  4010a8:	ee77 7ac4 	vsub.f32	s15, s15, s8
            .x = vectorA.axis.x * vectorB.axis.x,
  4010ac:	ee65 6aa5 	vmul.f32	s13, s11, s11
            .y = vectorA.axis.y * vectorB.axis.y,
  4010b0:	ee27 7a07 	vmul.f32	s14, s14, s14
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4010b4:	ee36 7a87 	vadd.f32	s14, s13, s14
            .z = vectorA.axis.z * vectorB.axis.z,
  4010b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4010bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4010c0:	ee17 2a10 	vmov	r2, s14
  4010c4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4010c8:	ee07 3a90 	vmov	s15, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4010cc:	ee27 7a22 	vmul.f32	s14, s14, s5
  4010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
  4010d4:	ee27 7a27 	vmul.f32	s14, s14, s15
  4010d8:	ee33 7ac7 	vsub.f32	s14, s7, s14
  4010dc:	ee27 7a27 	vmul.f32	s14, s14, s15
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
  4010e0:	ee67 7a25 	vmul.f32	s15, s14, s11
  4010e4:	ee17 1a90 	vmov	r1, s15
  4010e8:	ee15 0a10 	vmov	r0, s10
  4010ec:	4b08      	ldr	r3, [pc, #32]	; (401110 <FusionCompassCalculateHeading+0x30c>)
  4010ee:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  4010f0:	eddf 7a08 	vldr	s15, [pc, #32]	; 401114 <FusionCompassCalculateHeading+0x310>
  4010f4:	ee07 0a10 	vmov	s14, r0
  4010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
  4010fc:	e70e      	b.n	400f1c <FusionCompassCalculateHeading+0x118>
  4010fe:	bf00      	nop
  401100:	00000000 	.word	0x00000000
  401104:	5f1f1412 	.word	0x5f1f1412
  401108:	3f36d312 	.word	0x3f36d312
  40110c:	3fd851ff 	.word	0x3fd851ff
  401110:	00404789 	.word	0x00404789
  401114:	42652ee0 	.word	0x42652ee0

00401118 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  401118:	4b01      	ldr	r3, [pc, #4]	; (401120 <gfx_mono_set_framebuffer+0x8>)
  40111a:	6018      	str	r0, [r3, #0]
  40111c:	4770      	bx	lr
  40111e:	bf00      	nop
  401120:	204009e4 	.word	0x204009e4

00401124 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  401124:	4b02      	ldr	r3, [pc, #8]	; (401130 <gfx_mono_framebuffer_put_byte+0xc>)
  401126:	681b      	ldr	r3, [r3, #0]
  401128:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40112c:	5442      	strb	r2, [r0, r1]
  40112e:	4770      	bx	lr
  401130:	204009e4 	.word	0x204009e4

00401134 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  401134:	4b02      	ldr	r3, [pc, #8]	; (401140 <gfx_mono_framebuffer_get_byte+0xc>)
  401136:	681b      	ldr	r3, [r3, #0]
  401138:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40113c:	5c40      	ldrb	r0, [r0, r1]
  40113e:	4770      	bx	lr
  401140:	204009e4 	.word	0x204009e4

00401144 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  401144:	b570      	push	{r4, r5, r6, lr}
  401146:	4604      	mov	r4, r0
  401148:	460d      	mov	r5, r1
  40114a:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  40114c:	b91b      	cbnz	r3, 401156 <gfx_mono_ssd1306_put_byte+0x12>
  40114e:	4b0d      	ldr	r3, [pc, #52]	; (401184 <gfx_mono_ssd1306_put_byte+0x40>)
  401150:	4798      	blx	r3
  401152:	42b0      	cmp	r0, r6
  401154:	d015      	beq.n	401182 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  401156:	4632      	mov	r2, r6
  401158:	4629      	mov	r1, r5
  40115a:	4620      	mov	r0, r4
  40115c:	4b0a      	ldr	r3, [pc, #40]	; (401188 <gfx_mono_ssd1306_put_byte+0x44>)
  40115e:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  401160:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401164:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401168:	4c08      	ldr	r4, [pc, #32]	; (40118c <gfx_mono_ssd1306_put_byte+0x48>)
  40116a:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  40116c:	f3c5 1002 	ubfx	r0, r5, #4, #3
  401170:	f040 0010 	orr.w	r0, r0, #16
  401174:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  401176:	f005 000f 	and.w	r0, r5, #15
  40117a:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  40117c:	4630      	mov	r0, r6
  40117e:	4b04      	ldr	r3, [pc, #16]	; (401190 <gfx_mono_ssd1306_put_byte+0x4c>)
  401180:	4798      	blx	r3
  401182:	bd70      	pop	{r4, r5, r6, pc}
  401184:	00401135 	.word	0x00401135
  401188:	00401125 	.word	0x00401125
  40118c:	004011e5 	.word	0x004011e5
  401190:	00401405 	.word	0x00401405

00401194 <gfx_mono_ssd1306_init>:
{
  401194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  401198:	480d      	ldr	r0, [pc, #52]	; (4011d0 <gfx_mono_ssd1306_init+0x3c>)
  40119a:	4b0e      	ldr	r3, [pc, #56]	; (4011d4 <gfx_mono_ssd1306_init+0x40>)
  40119c:	4798      	blx	r3
	ssd1306_init();
  40119e:	4b0e      	ldr	r3, [pc, #56]	; (4011d8 <gfx_mono_ssd1306_init+0x44>)
  4011a0:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4011a2:	2040      	movs	r0, #64	; 0x40
  4011a4:	4b0d      	ldr	r3, [pc, #52]	; (4011dc <gfx_mono_ssd1306_init+0x48>)
  4011a6:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4011a8:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4011aa:	f04f 0801 	mov.w	r8, #1
  4011ae:	462f      	mov	r7, r5
  4011b0:	4e0b      	ldr	r6, [pc, #44]	; (4011e0 <gfx_mono_ssd1306_init+0x4c>)
{
  4011b2:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4011b4:	4643      	mov	r3, r8
  4011b6:	463a      	mov	r2, r7
  4011b8:	b2e1      	uxtb	r1, r4
  4011ba:	4628      	mov	r0, r5
  4011bc:	47b0      	blx	r6
  4011be:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4011c0:	2c80      	cmp	r4, #128	; 0x80
  4011c2:	d1f7      	bne.n	4011b4 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4011c4:	3501      	adds	r5, #1
  4011c6:	b2ed      	uxtb	r5, r5
  4011c8:	2d04      	cmp	r5, #4
  4011ca:	d1f2      	bne.n	4011b2 <gfx_mono_ssd1306_init+0x1e>
  4011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011d0:	204009e8 	.word	0x204009e8
  4011d4:	00401119 	.word	0x00401119
  4011d8:	00401225 	.word	0x00401225
  4011dc:	004011e5 	.word	0x004011e5
  4011e0:	00401145 	.word	0x00401145

004011e4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4011e4:	b538      	push	{r3, r4, r5, lr}
  4011e6:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4011e8:	2208      	movs	r2, #8
  4011ea:	4b09      	ldr	r3, [pc, #36]	; (401210 <ssd1306_write_command+0x2c>)
  4011ec:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4011ee:	4c09      	ldr	r4, [pc, #36]	; (401214 <ssd1306_write_command+0x30>)
  4011f0:	2101      	movs	r1, #1
  4011f2:	4620      	mov	r0, r4
  4011f4:	4b08      	ldr	r3, [pc, #32]	; (401218 <ssd1306_write_command+0x34>)
  4011f6:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4011f8:	2301      	movs	r3, #1
  4011fa:	461a      	mov	r2, r3
  4011fc:	4629      	mov	r1, r5
  4011fe:	4620      	mov	r0, r4
  401200:	4c06      	ldr	r4, [pc, #24]	; (40121c <ssd1306_write_command+0x38>)
  401202:	47a0      	blx	r4
	delay_us(10);
  401204:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  401208:	4b05      	ldr	r3, [pc, #20]	; (401220 <ssd1306_write_command+0x3c>)
  40120a:	4798      	blx	r3
  40120c:	bd38      	pop	{r3, r4, r5, pc}
  40120e:	bf00      	nop
  401210:	400e1000 	.word	0x400e1000
  401214:	40008000 	.word	0x40008000
  401218:	004001d9 	.word	0x004001d9
  40121c:	004001ef 	.word	0x004001ef
  401220:	20400001 	.word	0x20400001

00401224 <ssd1306_init>:
{
  401224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401228:	4d66      	ldr	r5, [pc, #408]	; (4013c4 <ssd1306_init+0x1a0>)
  40122a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40122e:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401230:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401234:	4b64      	ldr	r3, [pc, #400]	; (4013c8 <ssd1306_init+0x1a4>)
  401236:	2708      	movs	r7, #8
  401238:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40123a:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40123e:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401240:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  401244:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  401246:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401248:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40124c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40124e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  401252:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401254:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  401256:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40125a:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  40125c:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40125e:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401262:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401264:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401266:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40126a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40126c:	f022 0208 	bic.w	r2, r2, #8
  401270:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401272:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401274:	f022 0208 	bic.w	r2, r2, #8
  401278:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40127a:	601f      	str	r7, [r3, #0]
  40127c:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40127e:	631f      	str	r7, [r3, #48]	; 0x30
  401280:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401282:	f8df 817c 	ldr.w	r8, [pc, #380]	; 401400 <ssd1306_init+0x1dc>
  401286:	2300      	movs	r3, #0
  401288:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40128c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401290:	4640      	mov	r0, r8
  401292:	4c4e      	ldr	r4, [pc, #312]	; (4013cc <ssd1306_init+0x1a8>)
  401294:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401296:	2300      	movs	r3, #0
  401298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40129c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a0:	4640      	mov	r0, r8
  4012a2:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4012a4:	2300      	movs	r3, #0
  4012a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4012aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012ae:	4640      	mov	r0, r8
  4012b0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4012b2:	2300      	movs	r3, #0
  4012b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4012b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012bc:	4640      	mov	r0, r8
  4012be:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4012c0:	2300      	movs	r3, #0
  4012c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4012c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012ca:	4640      	mov	r0, r8
  4012cc:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4012ce:	2300      	movs	r3, #0
  4012d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4012d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012d8:	4640      	mov	r0, r8
  4012da:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4012dc:	4c3c      	ldr	r4, [pc, #240]	; (4013d0 <ssd1306_init+0x1ac>)
  4012de:	f04f 0902 	mov.w	r9, #2
  4012e2:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4012e6:	f04f 0880 	mov.w	r8, #128	; 0x80
  4012ea:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4012ee:	6863      	ldr	r3, [r4, #4]
  4012f0:	f043 0301 	orr.w	r3, r3, #1
  4012f4:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4012f6:	463a      	mov	r2, r7
  4012f8:	2101      	movs	r1, #1
  4012fa:	4620      	mov	r0, r4
  4012fc:	4b35      	ldr	r3, [pc, #212]	; (4013d4 <ssd1306_init+0x1b0>)
  4012fe:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401300:	2200      	movs	r2, #0
  401302:	2101      	movs	r1, #1
  401304:	4620      	mov	r0, r4
  401306:	4b34      	ldr	r3, [pc, #208]	; (4013d8 <ssd1306_init+0x1b4>)
  401308:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40130a:	2200      	movs	r2, #0
  40130c:	2101      	movs	r1, #1
  40130e:	4620      	mov	r0, r4
  401310:	4b32      	ldr	r3, [pc, #200]	; (4013dc <ssd1306_init+0x1b8>)
  401312:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401314:	6863      	ldr	r3, [r4, #4]
  401316:	f023 0302 	bic.w	r3, r3, #2
  40131a:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  40131c:	2200      	movs	r2, #0
  40131e:	2101      	movs	r1, #1
  401320:	4620      	mov	r0, r4
  401322:	4b2f      	ldr	r3, [pc, #188]	; (4013e0 <ssd1306_init+0x1bc>)
  401324:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401326:	6863      	ldr	r3, [r4, #4]
  401328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40132c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40132e:	6863      	ldr	r3, [r4, #4]
  401330:	f043 0310 	orr.w	r3, r3, #16
  401334:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  401336:	492b      	ldr	r1, [pc, #172]	; (4013e4 <ssd1306_init+0x1c0>)
  401338:	482b      	ldr	r0, [pc, #172]	; (4013e8 <ssd1306_init+0x1c4>)
  40133a:	4b2c      	ldr	r3, [pc, #176]	; (4013ec <ssd1306_init+0x1c8>)
  40133c:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40133e:	b2c2      	uxtb	r2, r0
  401340:	2101      	movs	r1, #1
  401342:	4620      	mov	r0, r4
  401344:	4b2a      	ldr	r3, [pc, #168]	; (4013f0 <ssd1306_init+0x1cc>)
  401346:	4798      	blx	r3
		spi_enable_clock(SPI0);
  401348:	4620      	mov	r0, r4
  40134a:	4b2a      	ldr	r3, [pc, #168]	; (4013f4 <ssd1306_init+0x1d0>)
  40134c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40134e:	2301      	movs	r3, #1
  401350:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401352:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  401354:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401358:	4c27      	ldr	r4, [pc, #156]	; (4013f8 <ssd1306_init+0x1d4>)
  40135a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40135c:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40135e:	f640 30b8 	movw	r0, #3000	; 0xbb8
  401362:	47a0      	blx	r4
  401364:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401366:	20a8      	movs	r0, #168	; 0xa8
  401368:	4c24      	ldr	r4, [pc, #144]	; (4013fc <ssd1306_init+0x1d8>)
  40136a:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  40136c:	201f      	movs	r0, #31
  40136e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401370:	20d3      	movs	r0, #211	; 0xd3
  401372:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  401374:	2000      	movs	r0, #0
  401376:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401378:	2040      	movs	r0, #64	; 0x40
  40137a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40137c:	20a1      	movs	r0, #161	; 0xa1
  40137e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401380:	20c8      	movs	r0, #200	; 0xc8
  401382:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401384:	20da      	movs	r0, #218	; 0xda
  401386:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  401388:	4648      	mov	r0, r9
  40138a:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40138c:	2081      	movs	r0, #129	; 0x81
  40138e:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  401390:	208f      	movs	r0, #143	; 0x8f
  401392:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401394:	20a4      	movs	r0, #164	; 0xa4
  401396:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401398:	20a6      	movs	r0, #166	; 0xa6
  40139a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40139c:	20d5      	movs	r0, #213	; 0xd5
  40139e:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4013a0:	4640      	mov	r0, r8
  4013a2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4013a4:	208d      	movs	r0, #141	; 0x8d
  4013a6:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4013a8:	2014      	movs	r0, #20
  4013aa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4013ac:	20db      	movs	r0, #219	; 0xdb
  4013ae:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4013b0:	2040      	movs	r0, #64	; 0x40
  4013b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4013b4:	20d9      	movs	r0, #217	; 0xd9
  4013b6:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4013b8:	20f1      	movs	r0, #241	; 0xf1
  4013ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4013bc:	20af      	movs	r0, #175	; 0xaf
  4013be:	47a0      	blx	r4
  4013c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013c4:	400e1200 	.word	0x400e1200
  4013c8:	400e1000 	.word	0x400e1000
  4013cc:	004017d1 	.word	0x004017d1
  4013d0:	40008000 	.word	0x40008000
  4013d4:	0040025f 	.word	0x0040025f
  4013d8:	00400223 	.word	0x00400223
  4013dc:	00400241 	.word	0x00400241
  4013e0:	004002a5 	.word	0x004002a5
  4013e4:	08f0d180 	.word	0x08f0d180
  4013e8:	001e8480 	.word	0x001e8480
  4013ec:	004002b9 	.word	0x004002b9
  4013f0:	004002cf 	.word	0x004002cf
  4013f4:	004001ad 	.word	0x004001ad
  4013f8:	20400001 	.word	0x20400001
  4013fc:	004011e5 	.word	0x004011e5
  401400:	400e1400 	.word	0x400e1400

00401404 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401404:	b538      	push	{r3, r4, r5, lr}
  401406:	4605      	mov	r5, r0
  401408:	2208      	movs	r2, #8
  40140a:	4b09      	ldr	r3, [pc, #36]	; (401430 <ssd1306_write_data+0x2c>)
  40140c:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40140e:	4c09      	ldr	r4, [pc, #36]	; (401434 <ssd1306_write_data+0x30>)
  401410:	2101      	movs	r1, #1
  401412:	4620      	mov	r0, r4
  401414:	4b08      	ldr	r3, [pc, #32]	; (401438 <ssd1306_write_data+0x34>)
  401416:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  401418:	2301      	movs	r3, #1
  40141a:	461a      	mov	r2, r3
  40141c:	4629      	mov	r1, r5
  40141e:	4620      	mov	r0, r4
  401420:	4c06      	ldr	r4, [pc, #24]	; (40143c <ssd1306_write_data+0x38>)
  401422:	47a0      	blx	r4
	delay_us(10);
  401424:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  401428:	4b05      	ldr	r3, [pc, #20]	; (401440 <ssd1306_write_data+0x3c>)
  40142a:	4798      	blx	r3
  40142c:	bd38      	pop	{r3, r4, r5, pc}
  40142e:	bf00      	nop
  401430:	400e1000 	.word	0x400e1000
  401434:	40008000 	.word	0x40008000
  401438:	004001d9 	.word	0x004001d9
  40143c:	004001ef 	.word	0x004001ef
  401440:	20400001 	.word	0x20400001

00401444 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401444:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401446:	4810      	ldr	r0, [pc, #64]	; (401488 <sysclk_init+0x44>)
  401448:	4b10      	ldr	r3, [pc, #64]	; (40148c <sysclk_init+0x48>)
  40144a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40144c:	213e      	movs	r1, #62	; 0x3e
  40144e:	2000      	movs	r0, #0
  401450:	4b0f      	ldr	r3, [pc, #60]	; (401490 <sysclk_init+0x4c>)
  401452:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401454:	4c0f      	ldr	r4, [pc, #60]	; (401494 <sysclk_init+0x50>)
  401456:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401458:	2800      	cmp	r0, #0
  40145a:	d0fc      	beq.n	401456 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40145c:	4b0e      	ldr	r3, [pc, #56]	; (401498 <sysclk_init+0x54>)
  40145e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401460:	4a0e      	ldr	r2, [pc, #56]	; (40149c <sysclk_init+0x58>)
  401462:	4b0f      	ldr	r3, [pc, #60]	; (4014a0 <sysclk_init+0x5c>)
  401464:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401466:	4c0f      	ldr	r4, [pc, #60]	; (4014a4 <sysclk_init+0x60>)
  401468:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40146a:	2800      	cmp	r0, #0
  40146c:	d0fc      	beq.n	401468 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40146e:	2002      	movs	r0, #2
  401470:	4b0d      	ldr	r3, [pc, #52]	; (4014a8 <sysclk_init+0x64>)
  401472:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401474:	2000      	movs	r0, #0
  401476:	4b0d      	ldr	r3, [pc, #52]	; (4014ac <sysclk_init+0x68>)
  401478:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40147a:	4b0d      	ldr	r3, [pc, #52]	; (4014b0 <sysclk_init+0x6c>)
  40147c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40147e:	4802      	ldr	r0, [pc, #8]	; (401488 <sysclk_init+0x44>)
  401480:	4b02      	ldr	r3, [pc, #8]	; (40148c <sysclk_init+0x48>)
  401482:	4798      	blx	r3
  401484:	bd10      	pop	{r4, pc}
  401486:	bf00      	nop
  401488:	11e1a300 	.word	0x11e1a300
  40148c:	00401d9d 	.word	0x00401d9d
  401490:	004019b9 	.word	0x004019b9
  401494:	00401a0d 	.word	0x00401a0d
  401498:	00401a1d 	.word	0x00401a1d
  40149c:	20183f01 	.word	0x20183f01
  4014a0:	400e0600 	.word	0x400e0600
  4014a4:	00401a2d 	.word	0x00401a2d
  4014a8:	0040191d 	.word	0x0040191d
  4014ac:	00401955 	.word	0x00401955
  4014b0:	00401c91 	.word	0x00401c91

004014b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4014b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4014b8:	b980      	cbnz	r0, 4014dc <_read+0x28>
  4014ba:	460c      	mov	r4, r1
  4014bc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4014be:	2a00      	cmp	r2, #0
  4014c0:	dd0f      	ble.n	4014e2 <_read+0x2e>
  4014c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4014c4:	4e08      	ldr	r6, [pc, #32]	; (4014e8 <_read+0x34>)
  4014c6:	4d09      	ldr	r5, [pc, #36]	; (4014ec <_read+0x38>)
  4014c8:	6830      	ldr	r0, [r6, #0]
  4014ca:	4621      	mov	r1, r4
  4014cc:	682b      	ldr	r3, [r5, #0]
  4014ce:	4798      	blx	r3
		ptr++;
  4014d0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4014d2:	42bc      	cmp	r4, r7
  4014d4:	d1f8      	bne.n	4014c8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4014d6:	4640      	mov	r0, r8
  4014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4014dc:	f04f 38ff 	mov.w	r8, #4294967295
  4014e0:	e7f9      	b.n	4014d6 <_read+0x22>
	for (; len > 0; --len) {
  4014e2:	4680      	mov	r8, r0
  4014e4:	e7f7      	b.n	4014d6 <_read+0x22>
  4014e6:	bf00      	nop
  4014e8:	20400ddc 	.word	0x20400ddc
  4014ec:	20400dd4 	.word	0x20400dd4

004014f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4014f0:	3801      	subs	r0, #1
  4014f2:	2802      	cmp	r0, #2
  4014f4:	d815      	bhi.n	401522 <_write+0x32>
{
  4014f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014fa:	460e      	mov	r6, r1
  4014fc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4014fe:	b19a      	cbz	r2, 401528 <_write+0x38>
  401500:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401502:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40153c <_write+0x4c>
  401506:	4f0c      	ldr	r7, [pc, #48]	; (401538 <_write+0x48>)
  401508:	f8d8 0000 	ldr.w	r0, [r8]
  40150c:	f815 1b01 	ldrb.w	r1, [r5], #1
  401510:	683b      	ldr	r3, [r7, #0]
  401512:	4798      	blx	r3
  401514:	2800      	cmp	r0, #0
  401516:	db0a      	blt.n	40152e <_write+0x3e>
  401518:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40151a:	3c01      	subs	r4, #1
  40151c:	d1f4      	bne.n	401508 <_write+0x18>
  40151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401522:	f04f 30ff 	mov.w	r0, #4294967295
  401526:	4770      	bx	lr
	for (; len != 0; --len) {
  401528:	4610      	mov	r0, r2
  40152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40152e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401536:	bf00      	nop
  401538:	20400dd8 	.word	0x20400dd8
  40153c:	20400ddc 	.word	0x20400ddc

00401540 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401546:	4b5c      	ldr	r3, [pc, #368]	; (4016b8 <board_init+0x178>)
  401548:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40154a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40154e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401552:	4b5a      	ldr	r3, [pc, #360]	; (4016bc <board_init+0x17c>)
  401554:	2200      	movs	r2, #0
  401556:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40155a:	695a      	ldr	r2, [r3, #20]
  40155c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401560:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  401562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401566:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40156a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40156e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401572:	f007 0007 	and.w	r0, r7, #7
  401576:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401578:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40157c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401580:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401584:	f3bf 8f4f 	dsb	sy
  401588:	f04f 34ff 	mov.w	r4, #4294967295
  40158c:	fa04 fc00 	lsl.w	ip, r4, r0
  401590:	fa06 f000 	lsl.w	r0, r6, r0
  401594:	fa04 f40e 	lsl.w	r4, r4, lr
  401598:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40159c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40159e:	463a      	mov	r2, r7
  4015a0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4015a2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4015a6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4015aa:	3a01      	subs	r2, #1
  4015ac:	4423      	add	r3, r4
  4015ae:	f1b2 3fff 	cmp.w	r2, #4294967295
  4015b2:	d1f6      	bne.n	4015a2 <board_init+0x62>
        } while(sets--);
  4015b4:	3e01      	subs	r6, #1
  4015b6:	4460      	add	r0, ip
  4015b8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4015bc:	d1ef      	bne.n	40159e <board_init+0x5e>
  4015be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4015c2:	4b3e      	ldr	r3, [pc, #248]	; (4016bc <board_init+0x17c>)
  4015c4:	695a      	ldr	r2, [r3, #20]
  4015c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4015ca:	615a      	str	r2, [r3, #20]
  4015cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4015d0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4015d4:	4a3a      	ldr	r2, [pc, #232]	; (4016c0 <board_init+0x180>)
  4015d6:	493b      	ldr	r1, [pc, #236]	; (4016c4 <board_init+0x184>)
  4015d8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4015da:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4015de:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4015e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4015e4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4015e8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4015ec:	f022 0201 	bic.w	r2, r2, #1
  4015f0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4015f4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4015f8:	f022 0201 	bic.w	r2, r2, #1
  4015fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401604:	f3bf 8f6f 	isb	sy
  401608:	200a      	movs	r0, #10
  40160a:	4c2f      	ldr	r4, [pc, #188]	; (4016c8 <board_init+0x188>)
  40160c:	47a0      	blx	r4
  40160e:	200b      	movs	r0, #11
  401610:	47a0      	blx	r4
  401612:	200c      	movs	r0, #12
  401614:	47a0      	blx	r4
  401616:	2010      	movs	r0, #16
  401618:	47a0      	blx	r4
  40161a:	2011      	movs	r0, #17
  40161c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40161e:	4b2b      	ldr	r3, [pc, #172]	; (4016cc <board_init+0x18c>)
  401620:	f44f 7280 	mov.w	r2, #256	; 0x100
  401624:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401626:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40162a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40162c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401630:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401634:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401636:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40163a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40163c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401640:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401642:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401648:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40164a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40164e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401650:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401652:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401656:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401658:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40165c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401660:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401668:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40166a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40166e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401670:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401676:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401678:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40167c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40167e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401680:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401684:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401686:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401688:	4a11      	ldr	r2, [pc, #68]	; (4016d0 <board_init+0x190>)
  40168a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40168e:	f043 0310 	orr.w	r3, r3, #16
  401692:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  401696:	4b0f      	ldr	r3, [pc, #60]	; (4016d4 <board_init+0x194>)
  401698:	2210      	movs	r2, #16
  40169a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40169c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016a0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016a2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4016a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016aa:	4311      	orrs	r1, r2
  4016ac:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4016ae:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016b0:	4311      	orrs	r1, r2
  4016b2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016b4:	605a      	str	r2, [r3, #4]
  4016b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016b8:	400e1850 	.word	0x400e1850
  4016bc:	e000ed00 	.word	0xe000ed00
  4016c0:	400e0c00 	.word	0x400e0c00
  4016c4:	5a00080c 	.word	0x5a00080c
  4016c8:	00401a3d 	.word	0x00401a3d
  4016cc:	400e1200 	.word	0x400e1200
  4016d0:	40088000 	.word	0x40088000
  4016d4:	400e1000 	.word	0x400e1000

004016d8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4016d8:	6301      	str	r1, [r0, #48]	; 0x30
  4016da:	4770      	bx	lr

004016dc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4016dc:	6341      	str	r1, [r0, #52]	; 0x34
  4016de:	4770      	bx	lr

004016e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4016e0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4016e2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4016e6:	d03a      	beq.n	40175e <pio_set_peripheral+0x7e>
  4016e8:	d813      	bhi.n	401712 <pio_set_peripheral+0x32>
  4016ea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4016ee:	d025      	beq.n	40173c <pio_set_peripheral+0x5c>
  4016f0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4016f4:	d10a      	bne.n	40170c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016f8:	4313      	orrs	r3, r2
  4016fa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016fe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401700:	400b      	ands	r3, r1
  401702:	ea23 0302 	bic.w	r3, r3, r2
  401706:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401708:	6042      	str	r2, [r0, #4]
  40170a:	4770      	bx	lr
	switch (ul_type) {
  40170c:	2900      	cmp	r1, #0
  40170e:	d1fb      	bne.n	401708 <pio_set_peripheral+0x28>
  401710:	4770      	bx	lr
  401712:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401716:	d021      	beq.n	40175c <pio_set_peripheral+0x7c>
  401718:	d809      	bhi.n	40172e <pio_set_peripheral+0x4e>
  40171a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40171e:	d1f3      	bne.n	401708 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401720:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401722:	4313      	orrs	r3, r2
  401724:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401726:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401728:	4313      	orrs	r3, r2
  40172a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40172c:	e7ec      	b.n	401708 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40172e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401732:	d013      	beq.n	40175c <pio_set_peripheral+0x7c>
  401734:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401738:	d010      	beq.n	40175c <pio_set_peripheral+0x7c>
  40173a:	e7e5      	b.n	401708 <pio_set_peripheral+0x28>
{
  40173c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40173e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401740:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401742:	43d3      	mvns	r3, r2
  401744:	4021      	ands	r1, r4
  401746:	461c      	mov	r4, r3
  401748:	4019      	ands	r1, r3
  40174a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40174c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40174e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401750:	400b      	ands	r3, r1
  401752:	4023      	ands	r3, r4
  401754:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401756:	6042      	str	r2, [r0, #4]
}
  401758:	f85d 4b04 	ldr.w	r4, [sp], #4
  40175c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40175e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401760:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401762:	400b      	ands	r3, r1
  401764:	ea23 0302 	bic.w	r3, r3, r2
  401768:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40176a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40176c:	4313      	orrs	r3, r2
  40176e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401770:	e7ca      	b.n	401708 <pio_set_peripheral+0x28>

00401772 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401772:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401774:	f012 0f01 	tst.w	r2, #1
  401778:	d10d      	bne.n	401796 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40177a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40177c:	f012 0f0a 	tst.w	r2, #10
  401780:	d00b      	beq.n	40179a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401782:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401784:	f012 0f02 	tst.w	r2, #2
  401788:	d109      	bne.n	40179e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40178a:	f012 0f08 	tst.w	r2, #8
  40178e:	d008      	beq.n	4017a2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401790:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401794:	e005      	b.n	4017a2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401796:	6641      	str	r1, [r0, #100]	; 0x64
  401798:	e7f0      	b.n	40177c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40179a:	6241      	str	r1, [r0, #36]	; 0x24
  40179c:	e7f2      	b.n	401784 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40179e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4017a2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4017a4:	6001      	str	r1, [r0, #0]
  4017a6:	4770      	bx	lr

004017a8 <pio_set_output>:
{
  4017a8:	b410      	push	{r4}
  4017aa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4017ac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4017ae:	b94c      	cbnz	r4, 4017c4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4017b0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4017b2:	b14b      	cbz	r3, 4017c8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4017b4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4017b6:	b94a      	cbnz	r2, 4017cc <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4017b8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4017ba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4017bc:	6001      	str	r1, [r0, #0]
}
  4017be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017c2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4017c4:	6641      	str	r1, [r0, #100]	; 0x64
  4017c6:	e7f4      	b.n	4017b2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4017c8:	6541      	str	r1, [r0, #84]	; 0x54
  4017ca:	e7f4      	b.n	4017b6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4017cc:	6301      	str	r1, [r0, #48]	; 0x30
  4017ce:	e7f4      	b.n	4017ba <pio_set_output+0x12>

004017d0 <pio_configure>:
{
  4017d0:	b570      	push	{r4, r5, r6, lr}
  4017d2:	b082      	sub	sp, #8
  4017d4:	4605      	mov	r5, r0
  4017d6:	4616      	mov	r6, r2
  4017d8:	461c      	mov	r4, r3
	switch (ul_type) {
  4017da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4017de:	d014      	beq.n	40180a <pio_configure+0x3a>
  4017e0:	d90a      	bls.n	4017f8 <pio_configure+0x28>
  4017e2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4017e6:	d024      	beq.n	401832 <pio_configure+0x62>
  4017e8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4017ec:	d021      	beq.n	401832 <pio_configure+0x62>
  4017ee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4017f2:	d017      	beq.n	401824 <pio_configure+0x54>
		return 0;
  4017f4:	2000      	movs	r0, #0
  4017f6:	e01a      	b.n	40182e <pio_configure+0x5e>
	switch (ul_type) {
  4017f8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4017fc:	d005      	beq.n	40180a <pio_configure+0x3a>
  4017fe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401802:	d002      	beq.n	40180a <pio_configure+0x3a>
  401804:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401808:	d1f4      	bne.n	4017f4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40180a:	4632      	mov	r2, r6
  40180c:	4628      	mov	r0, r5
  40180e:	4b11      	ldr	r3, [pc, #68]	; (401854 <pio_configure+0x84>)
  401810:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401812:	f014 0f01 	tst.w	r4, #1
  401816:	d102      	bne.n	40181e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401818:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40181a:	2001      	movs	r0, #1
  40181c:	e007      	b.n	40182e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40181e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401820:	2001      	movs	r0, #1
  401822:	e004      	b.n	40182e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401824:	461a      	mov	r2, r3
  401826:	4631      	mov	r1, r6
  401828:	4b0b      	ldr	r3, [pc, #44]	; (401858 <pio_configure+0x88>)
  40182a:	4798      	blx	r3
	return 1;
  40182c:	2001      	movs	r0, #1
}
  40182e:	b002      	add	sp, #8
  401830:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401832:	f004 0301 	and.w	r3, r4, #1
  401836:	9300      	str	r3, [sp, #0]
  401838:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40183c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401840:	bf14      	ite	ne
  401842:	2200      	movne	r2, #0
  401844:	2201      	moveq	r2, #1
  401846:	4631      	mov	r1, r6
  401848:	4628      	mov	r0, r5
  40184a:	4c04      	ldr	r4, [pc, #16]	; (40185c <pio_configure+0x8c>)
  40184c:	47a0      	blx	r4
	return 1;
  40184e:	2001      	movs	r0, #1
		break;
  401850:	e7ed      	b.n	40182e <pio_configure+0x5e>
  401852:	bf00      	nop
  401854:	004016e1 	.word	0x004016e1
  401858:	00401773 	.word	0x00401773
  40185c:	004017a9 	.word	0x004017a9

00401860 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401860:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401862:	4770      	bx	lr

00401864 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401864:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401866:	4770      	bx	lr

00401868 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40186c:	4604      	mov	r4, r0
  40186e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401870:	4b0e      	ldr	r3, [pc, #56]	; (4018ac <pio_handler_process+0x44>)
  401872:	4798      	blx	r3
  401874:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401876:	4620      	mov	r0, r4
  401878:	4b0d      	ldr	r3, [pc, #52]	; (4018b0 <pio_handler_process+0x48>)
  40187a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40187c:	4005      	ands	r5, r0
  40187e:	d013      	beq.n	4018a8 <pio_handler_process+0x40>
  401880:	4c0c      	ldr	r4, [pc, #48]	; (4018b4 <pio_handler_process+0x4c>)
  401882:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401886:	e003      	b.n	401890 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401888:	42b4      	cmp	r4, r6
  40188a:	d00d      	beq.n	4018a8 <pio_handler_process+0x40>
  40188c:	3410      	adds	r4, #16
		while (status != 0) {
  40188e:	b15d      	cbz	r5, 4018a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401890:	6820      	ldr	r0, [r4, #0]
  401892:	4540      	cmp	r0, r8
  401894:	d1f8      	bne.n	401888 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401896:	6861      	ldr	r1, [r4, #4]
  401898:	4229      	tst	r1, r5
  40189a:	d0f5      	beq.n	401888 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40189c:	68e3      	ldr	r3, [r4, #12]
  40189e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4018a0:	6863      	ldr	r3, [r4, #4]
  4018a2:	ea25 0503 	bic.w	r5, r5, r3
  4018a6:	e7ef      	b.n	401888 <pio_handler_process+0x20>
  4018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018ac:	00401861 	.word	0x00401861
  4018b0:	00401865 	.word	0x00401865
  4018b4:	20400be8 	.word	0x20400be8

004018b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4018b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4018ba:	210a      	movs	r1, #10
  4018bc:	4801      	ldr	r0, [pc, #4]	; (4018c4 <PIOA_Handler+0xc>)
  4018be:	4b02      	ldr	r3, [pc, #8]	; (4018c8 <PIOA_Handler+0x10>)
  4018c0:	4798      	blx	r3
  4018c2:	bd08      	pop	{r3, pc}
  4018c4:	400e0e00 	.word	0x400e0e00
  4018c8:	00401869 	.word	0x00401869

004018cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4018cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4018ce:	210b      	movs	r1, #11
  4018d0:	4801      	ldr	r0, [pc, #4]	; (4018d8 <PIOB_Handler+0xc>)
  4018d2:	4b02      	ldr	r3, [pc, #8]	; (4018dc <PIOB_Handler+0x10>)
  4018d4:	4798      	blx	r3
  4018d6:	bd08      	pop	{r3, pc}
  4018d8:	400e1000 	.word	0x400e1000
  4018dc:	00401869 	.word	0x00401869

004018e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4018e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4018e2:	210c      	movs	r1, #12
  4018e4:	4801      	ldr	r0, [pc, #4]	; (4018ec <PIOC_Handler+0xc>)
  4018e6:	4b02      	ldr	r3, [pc, #8]	; (4018f0 <PIOC_Handler+0x10>)
  4018e8:	4798      	blx	r3
  4018ea:	bd08      	pop	{r3, pc}
  4018ec:	400e1200 	.word	0x400e1200
  4018f0:	00401869 	.word	0x00401869

004018f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4018f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4018f6:	2110      	movs	r1, #16
  4018f8:	4801      	ldr	r0, [pc, #4]	; (401900 <PIOD_Handler+0xc>)
  4018fa:	4b02      	ldr	r3, [pc, #8]	; (401904 <PIOD_Handler+0x10>)
  4018fc:	4798      	blx	r3
  4018fe:	bd08      	pop	{r3, pc}
  401900:	400e1400 	.word	0x400e1400
  401904:	00401869 	.word	0x00401869

00401908 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401908:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40190a:	2111      	movs	r1, #17
  40190c:	4801      	ldr	r0, [pc, #4]	; (401914 <PIOE_Handler+0xc>)
  40190e:	4b02      	ldr	r3, [pc, #8]	; (401918 <PIOE_Handler+0x10>)
  401910:	4798      	blx	r3
  401912:	bd08      	pop	{r3, pc}
  401914:	400e1600 	.word	0x400e1600
  401918:	00401869 	.word	0x00401869

0040191c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40191c:	2803      	cmp	r0, #3
  40191e:	d011      	beq.n	401944 <pmc_mck_set_division+0x28>
  401920:	2804      	cmp	r0, #4
  401922:	d012      	beq.n	40194a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401924:	2802      	cmp	r0, #2
  401926:	bf0c      	ite	eq
  401928:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40192c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40192e:	4a08      	ldr	r2, [pc, #32]	; (401950 <pmc_mck_set_division+0x34>)
  401930:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401936:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401938:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40193a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40193c:	f013 0f08 	tst.w	r3, #8
  401940:	d0fb      	beq.n	40193a <pmc_mck_set_division+0x1e>
}
  401942:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401944:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401948:	e7f1      	b.n	40192e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40194a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40194e:	e7ee      	b.n	40192e <pmc_mck_set_division+0x12>
  401950:	400e0600 	.word	0x400e0600

00401954 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401954:	4a17      	ldr	r2, [pc, #92]	; (4019b4 <pmc_switch_mck_to_pllack+0x60>)
  401956:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40195c:	4318      	orrs	r0, r3
  40195e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401960:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401962:	f013 0f08 	tst.w	r3, #8
  401966:	d10a      	bne.n	40197e <pmc_switch_mck_to_pllack+0x2a>
  401968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40196c:	4911      	ldr	r1, [pc, #68]	; (4019b4 <pmc_switch_mck_to_pllack+0x60>)
  40196e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401970:	f012 0f08 	tst.w	r2, #8
  401974:	d103      	bne.n	40197e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401976:	3b01      	subs	r3, #1
  401978:	d1f9      	bne.n	40196e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40197a:	2001      	movs	r0, #1
  40197c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40197e:	4a0d      	ldr	r2, [pc, #52]	; (4019b4 <pmc_switch_mck_to_pllack+0x60>)
  401980:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401982:	f023 0303 	bic.w	r3, r3, #3
  401986:	f043 0302 	orr.w	r3, r3, #2
  40198a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40198c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40198e:	f013 0f08 	tst.w	r3, #8
  401992:	d10a      	bne.n	4019aa <pmc_switch_mck_to_pllack+0x56>
  401994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401998:	4906      	ldr	r1, [pc, #24]	; (4019b4 <pmc_switch_mck_to_pllack+0x60>)
  40199a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40199c:	f012 0f08 	tst.w	r2, #8
  4019a0:	d105      	bne.n	4019ae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019a2:	3b01      	subs	r3, #1
  4019a4:	d1f9      	bne.n	40199a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4019a6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019a8:	4770      	bx	lr
	return 0;
  4019aa:	2000      	movs	r0, #0
  4019ac:	4770      	bx	lr
  4019ae:	2000      	movs	r0, #0
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop
  4019b4:	400e0600 	.word	0x400e0600

004019b8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019b8:	b9a0      	cbnz	r0, 4019e4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019ba:	480e      	ldr	r0, [pc, #56]	; (4019f4 <pmc_switch_mainck_to_xtal+0x3c>)
  4019bc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019be:	0209      	lsls	r1, r1, #8
  4019c0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019c2:	4a0d      	ldr	r2, [pc, #52]	; (4019f8 <pmc_switch_mainck_to_xtal+0x40>)
  4019c4:	401a      	ands	r2, r3
  4019c6:	4b0d      	ldr	r3, [pc, #52]	; (4019fc <pmc_switch_mainck_to_xtal+0x44>)
  4019c8:	4313      	orrs	r3, r2
  4019ca:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019cc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019ce:	4602      	mov	r2, r0
  4019d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019d2:	f013 0f01 	tst.w	r3, #1
  4019d6:	d0fb      	beq.n	4019d0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019d8:	4a06      	ldr	r2, [pc, #24]	; (4019f4 <pmc_switch_mainck_to_xtal+0x3c>)
  4019da:	6a11      	ldr	r1, [r2, #32]
  4019dc:	4b08      	ldr	r3, [pc, #32]	; (401a00 <pmc_switch_mainck_to_xtal+0x48>)
  4019de:	430b      	orrs	r3, r1
  4019e0:	6213      	str	r3, [r2, #32]
  4019e2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019e4:	4903      	ldr	r1, [pc, #12]	; (4019f4 <pmc_switch_mainck_to_xtal+0x3c>)
  4019e6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4019e8:	4a06      	ldr	r2, [pc, #24]	; (401a04 <pmc_switch_mainck_to_xtal+0x4c>)
  4019ea:	401a      	ands	r2, r3
  4019ec:	4b06      	ldr	r3, [pc, #24]	; (401a08 <pmc_switch_mainck_to_xtal+0x50>)
  4019ee:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019f0:	620b      	str	r3, [r1, #32]
  4019f2:	4770      	bx	lr
  4019f4:	400e0600 	.word	0x400e0600
  4019f8:	ffc8fffc 	.word	0xffc8fffc
  4019fc:	00370001 	.word	0x00370001
  401a00:	01370000 	.word	0x01370000
  401a04:	fec8fffc 	.word	0xfec8fffc
  401a08:	01370002 	.word	0x01370002

00401a0c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a0c:	4b02      	ldr	r3, [pc, #8]	; (401a18 <pmc_osc_is_ready_mainck+0xc>)
  401a0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a10:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a14:	4770      	bx	lr
  401a16:	bf00      	nop
  401a18:	400e0600 	.word	0x400e0600

00401a1c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a20:	4b01      	ldr	r3, [pc, #4]	; (401a28 <pmc_disable_pllack+0xc>)
  401a22:	629a      	str	r2, [r3, #40]	; 0x28
  401a24:	4770      	bx	lr
  401a26:	bf00      	nop
  401a28:	400e0600 	.word	0x400e0600

00401a2c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a2c:	4b02      	ldr	r3, [pc, #8]	; (401a38 <pmc_is_locked_pllack+0xc>)
  401a2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a30:	f000 0002 	and.w	r0, r0, #2
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop
  401a38:	400e0600 	.word	0x400e0600

00401a3c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401a3c:	283f      	cmp	r0, #63	; 0x3f
  401a3e:	d81e      	bhi.n	401a7e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a40:	281f      	cmp	r0, #31
  401a42:	d80c      	bhi.n	401a5e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a44:	4b11      	ldr	r3, [pc, #68]	; (401a8c <pmc_enable_periph_clk+0x50>)
  401a46:	699a      	ldr	r2, [r3, #24]
  401a48:	2301      	movs	r3, #1
  401a4a:	4083      	lsls	r3, r0
  401a4c:	4393      	bics	r3, r2
  401a4e:	d018      	beq.n	401a82 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a50:	2301      	movs	r3, #1
  401a52:	fa03 f000 	lsl.w	r0, r3, r0
  401a56:	4b0d      	ldr	r3, [pc, #52]	; (401a8c <pmc_enable_periph_clk+0x50>)
  401a58:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a5a:	2000      	movs	r0, #0
  401a5c:	4770      	bx	lr
		ul_id -= 32;
  401a5e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a60:	4b0a      	ldr	r3, [pc, #40]	; (401a8c <pmc_enable_periph_clk+0x50>)
  401a62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a66:	2301      	movs	r3, #1
  401a68:	4083      	lsls	r3, r0
  401a6a:	4393      	bics	r3, r2
  401a6c:	d00b      	beq.n	401a86 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a6e:	2301      	movs	r3, #1
  401a70:	fa03 f000 	lsl.w	r0, r3, r0
  401a74:	4b05      	ldr	r3, [pc, #20]	; (401a8c <pmc_enable_periph_clk+0x50>)
  401a76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401a7a:	2000      	movs	r0, #0
  401a7c:	4770      	bx	lr
		return 1;
  401a7e:	2001      	movs	r0, #1
  401a80:	4770      	bx	lr
	return 0;
  401a82:	2000      	movs	r0, #0
  401a84:	4770      	bx	lr
  401a86:	2000      	movs	r0, #0
}
  401a88:	4770      	bx	lr
  401a8a:	bf00      	nop
  401a8c:	400e0600 	.word	0x400e0600

00401a90 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401a90:	6943      	ldr	r3, [r0, #20]
  401a92:	f013 0f02 	tst.w	r3, #2
  401a96:	d002      	beq.n	401a9e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401a98:	61c1      	str	r1, [r0, #28]
	return 0;
  401a9a:	2000      	movs	r0, #0
  401a9c:	4770      	bx	lr
		return 1;
  401a9e:	2001      	movs	r0, #1
}
  401aa0:	4770      	bx	lr

00401aa2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401aa2:	6943      	ldr	r3, [r0, #20]
  401aa4:	f013 0f01 	tst.w	r3, #1
  401aa8:	d003      	beq.n	401ab2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401aaa:	6983      	ldr	r3, [r0, #24]
  401aac:	700b      	strb	r3, [r1, #0]
	return 0;
  401aae:	2000      	movs	r0, #0
  401ab0:	4770      	bx	lr
		return 1;
  401ab2:	2001      	movs	r0, #1
}
  401ab4:	4770      	bx	lr

00401ab6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401ab6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401ab8:	010b      	lsls	r3, r1, #4
  401aba:	4293      	cmp	r3, r2
  401abc:	d914      	bls.n	401ae8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401abe:	00c9      	lsls	r1, r1, #3
  401ac0:	084b      	lsrs	r3, r1, #1
  401ac2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401ac6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401aca:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401acc:	1e5c      	subs	r4, r3, #1
  401ace:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401ad2:	428c      	cmp	r4, r1
  401ad4:	d901      	bls.n	401ada <usart_set_async_baudrate+0x24>
		return 1;
  401ad6:	2001      	movs	r0, #1
  401ad8:	e017      	b.n	401b0a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401ada:	6841      	ldr	r1, [r0, #4]
  401adc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401ae0:	6041      	str	r1, [r0, #4]
  401ae2:	e00c      	b.n	401afe <usart_set_async_baudrate+0x48>
		return 1;
  401ae4:	2001      	movs	r0, #1
  401ae6:	e010      	b.n	401b0a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401ae8:	0859      	lsrs	r1, r3, #1
  401aea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401aee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401af2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401af4:	1e5c      	subs	r4, r3, #1
  401af6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401afa:	428c      	cmp	r4, r1
  401afc:	d8f2      	bhi.n	401ae4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401afe:	0412      	lsls	r2, r2, #16
  401b00:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401b04:	431a      	orrs	r2, r3
  401b06:	6202      	str	r2, [r0, #32]

	return 0;
  401b08:	2000      	movs	r0, #0
}
  401b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b0e:	4770      	bx	lr

00401b10 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401b10:	4b08      	ldr	r3, [pc, #32]	; (401b34 <usart_reset+0x24>)
  401b12:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401b16:	2300      	movs	r3, #0
  401b18:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401b1a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401b1c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401b1e:	2388      	movs	r3, #136	; 0x88
  401b20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401b22:	2324      	movs	r3, #36	; 0x24
  401b24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401b26:	f44f 7380 	mov.w	r3, #256	; 0x100
  401b2a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401b30:	6003      	str	r3, [r0, #0]
  401b32:	4770      	bx	lr
  401b34:	55534100 	.word	0x55534100

00401b38 <usart_init_rs232>:
{
  401b38:	b570      	push	{r4, r5, r6, lr}
  401b3a:	4605      	mov	r5, r0
  401b3c:	460c      	mov	r4, r1
  401b3e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401b40:	4b0f      	ldr	r3, [pc, #60]	; (401b80 <usart_init_rs232+0x48>)
  401b42:	4798      	blx	r3
	ul_reg_val = 0;
  401b44:	2200      	movs	r2, #0
  401b46:	4b0f      	ldr	r3, [pc, #60]	; (401b84 <usart_init_rs232+0x4c>)
  401b48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401b4a:	b1a4      	cbz	r4, 401b76 <usart_init_rs232+0x3e>
  401b4c:	4632      	mov	r2, r6
  401b4e:	6821      	ldr	r1, [r4, #0]
  401b50:	4628      	mov	r0, r5
  401b52:	4b0d      	ldr	r3, [pc, #52]	; (401b88 <usart_init_rs232+0x50>)
  401b54:	4798      	blx	r3
  401b56:	4602      	mov	r2, r0
  401b58:	b978      	cbnz	r0, 401b7a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401b5a:	6863      	ldr	r3, [r4, #4]
  401b5c:	68a1      	ldr	r1, [r4, #8]
  401b5e:	430b      	orrs	r3, r1
  401b60:	6921      	ldr	r1, [r4, #16]
  401b62:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401b64:	68e1      	ldr	r1, [r4, #12]
  401b66:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401b68:	4906      	ldr	r1, [pc, #24]	; (401b84 <usart_init_rs232+0x4c>)
  401b6a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401b6c:	6869      	ldr	r1, [r5, #4]
  401b6e:	430b      	orrs	r3, r1
  401b70:	606b      	str	r3, [r5, #4]
}
  401b72:	4610      	mov	r0, r2
  401b74:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401b76:	2201      	movs	r2, #1
  401b78:	e7fb      	b.n	401b72 <usart_init_rs232+0x3a>
  401b7a:	2201      	movs	r2, #1
  401b7c:	e7f9      	b.n	401b72 <usart_init_rs232+0x3a>
  401b7e:	bf00      	nop
  401b80:	00401b11 	.word	0x00401b11
  401b84:	20400c58 	.word	0x20400c58
  401b88:	00401ab7 	.word	0x00401ab7

00401b8c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401b8c:	2340      	movs	r3, #64	; 0x40
  401b8e:	6003      	str	r3, [r0, #0]
  401b90:	4770      	bx	lr

00401b92 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401b92:	2310      	movs	r3, #16
  401b94:	6003      	str	r3, [r0, #0]
  401b96:	4770      	bx	lr

00401b98 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401b98:	6943      	ldr	r3, [r0, #20]
  401b9a:	f013 0f02 	tst.w	r3, #2
  401b9e:	d004      	beq.n	401baa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401ba0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401ba4:	61c1      	str	r1, [r0, #28]
	return 0;
  401ba6:	2000      	movs	r0, #0
  401ba8:	4770      	bx	lr
		return 1;
  401baa:	2001      	movs	r0, #1
}
  401bac:	4770      	bx	lr

00401bae <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401bae:	6943      	ldr	r3, [r0, #20]
  401bb0:	f013 0f01 	tst.w	r3, #1
  401bb4:	d005      	beq.n	401bc2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401bb6:	6983      	ldr	r3, [r0, #24]
  401bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401bbc:	600b      	str	r3, [r1, #0]
	return 0;
  401bbe:	2000      	movs	r0, #0
  401bc0:	4770      	bx	lr
		return 1;
  401bc2:	2001      	movs	r0, #1
}
  401bc4:	4770      	bx	lr

00401bc6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bc6:	e7fe      	b.n	401bc6 <Dummy_Handler>

00401bc8 <Reset_Handler>:
{
  401bc8:	b500      	push	{lr}
  401bca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401bcc:	4b25      	ldr	r3, [pc, #148]	; (401c64 <Reset_Handler+0x9c>)
  401bce:	4a26      	ldr	r2, [pc, #152]	; (401c68 <Reset_Handler+0xa0>)
  401bd0:	429a      	cmp	r2, r3
  401bd2:	d010      	beq.n	401bf6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401bd4:	4b25      	ldr	r3, [pc, #148]	; (401c6c <Reset_Handler+0xa4>)
  401bd6:	4a23      	ldr	r2, [pc, #140]	; (401c64 <Reset_Handler+0x9c>)
  401bd8:	429a      	cmp	r2, r3
  401bda:	d20c      	bcs.n	401bf6 <Reset_Handler+0x2e>
  401bdc:	3b01      	subs	r3, #1
  401bde:	1a9b      	subs	r3, r3, r2
  401be0:	f023 0303 	bic.w	r3, r3, #3
  401be4:	3304      	adds	r3, #4
  401be6:	4413      	add	r3, r2
  401be8:	491f      	ldr	r1, [pc, #124]	; (401c68 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401bea:	f851 0b04 	ldr.w	r0, [r1], #4
  401bee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401bf2:	429a      	cmp	r2, r3
  401bf4:	d1f9      	bne.n	401bea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401bf6:	4b1e      	ldr	r3, [pc, #120]	; (401c70 <Reset_Handler+0xa8>)
  401bf8:	4a1e      	ldr	r2, [pc, #120]	; (401c74 <Reset_Handler+0xac>)
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d20a      	bcs.n	401c14 <Reset_Handler+0x4c>
  401bfe:	3b01      	subs	r3, #1
  401c00:	1a9b      	subs	r3, r3, r2
  401c02:	f023 0303 	bic.w	r3, r3, #3
  401c06:	3304      	adds	r3, #4
  401c08:	4413      	add	r3, r2
                *pDest++ = 0;
  401c0a:	2100      	movs	r1, #0
  401c0c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401c10:	4293      	cmp	r3, r2
  401c12:	d1fb      	bne.n	401c0c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401c14:	4a18      	ldr	r2, [pc, #96]	; (401c78 <Reset_Handler+0xb0>)
  401c16:	4b19      	ldr	r3, [pc, #100]	; (401c7c <Reset_Handler+0xb4>)
  401c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401c1c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c1e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c22:	fab3 f383 	clz	r3, r3
  401c26:	095b      	lsrs	r3, r3, #5
  401c28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401c2a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401c2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c30:	2200      	movs	r2, #0
  401c32:	4b13      	ldr	r3, [pc, #76]	; (401c80 <Reset_Handler+0xb8>)
  401c34:	701a      	strb	r2, [r3, #0]
	return flags;
  401c36:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401c38:	4a12      	ldr	r2, [pc, #72]	; (401c84 <Reset_Handler+0xbc>)
  401c3a:	6813      	ldr	r3, [r2, #0]
  401c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401c42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c46:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c4a:	b129      	cbz	r1, 401c58 <Reset_Handler+0x90>
		cpu_irq_enable();
  401c4c:	2201      	movs	r2, #1
  401c4e:	4b0c      	ldr	r3, [pc, #48]	; (401c80 <Reset_Handler+0xb8>)
  401c50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401c52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c56:	b662      	cpsie	i
        __libc_init_array();
  401c58:	4b0b      	ldr	r3, [pc, #44]	; (401c88 <Reset_Handler+0xc0>)
  401c5a:	4798      	blx	r3
        main();
  401c5c:	4b0b      	ldr	r3, [pc, #44]	; (401c8c <Reset_Handler+0xc4>)
  401c5e:	4798      	blx	r3
  401c60:	e7fe      	b.n	401c60 <Reset_Handler+0x98>
  401c62:	bf00      	nop
  401c64:	20400000 	.word	0x20400000
  401c68:	0040c4dc 	.word	0x0040c4dc
  401c6c:	204009c8 	.word	0x204009c8
  401c70:	20400e50 	.word	0x20400e50
  401c74:	204009c8 	.word	0x204009c8
  401c78:	e000ed00 	.word	0xe000ed00
  401c7c:	00400000 	.word	0x00400000
  401c80:	2040000a 	.word	0x2040000a
  401c84:	e000ed88 	.word	0xe000ed88
  401c88:	00406ce9 	.word	0x00406ce9
  401c8c:	004043b9 	.word	0x004043b9

00401c90 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401c90:	4b3b      	ldr	r3, [pc, #236]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c94:	f003 0303 	and.w	r3, r3, #3
  401c98:	2b01      	cmp	r3, #1
  401c9a:	d01d      	beq.n	401cd8 <SystemCoreClockUpdate+0x48>
  401c9c:	b183      	cbz	r3, 401cc0 <SystemCoreClockUpdate+0x30>
  401c9e:	2b02      	cmp	r3, #2
  401ca0:	d036      	beq.n	401d10 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401ca2:	4b37      	ldr	r3, [pc, #220]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401caa:	2b70      	cmp	r3, #112	; 0x70
  401cac:	d05f      	beq.n	401d6e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401cae:	4b34      	ldr	r3, [pc, #208]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401cb2:	4934      	ldr	r1, [pc, #208]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401cb4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401cb8:	680b      	ldr	r3, [r1, #0]
  401cba:	40d3      	lsrs	r3, r2
  401cbc:	600b      	str	r3, [r1, #0]
  401cbe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401cc0:	4b31      	ldr	r3, [pc, #196]	; (401d88 <SystemCoreClockUpdate+0xf8>)
  401cc2:	695b      	ldr	r3, [r3, #20]
  401cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401cc8:	bf14      	ite	ne
  401cca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401cce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401cd2:	4b2c      	ldr	r3, [pc, #176]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401cd4:	601a      	str	r2, [r3, #0]
  401cd6:	e7e4      	b.n	401ca2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401cd8:	4b29      	ldr	r3, [pc, #164]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401cda:	6a1b      	ldr	r3, [r3, #32]
  401cdc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ce0:	d003      	beq.n	401cea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401ce2:	4a2a      	ldr	r2, [pc, #168]	; (401d8c <SystemCoreClockUpdate+0xfc>)
  401ce4:	4b27      	ldr	r3, [pc, #156]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401ce6:	601a      	str	r2, [r3, #0]
  401ce8:	e7db      	b.n	401ca2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401cea:	4a29      	ldr	r2, [pc, #164]	; (401d90 <SystemCoreClockUpdate+0x100>)
  401cec:	4b25      	ldr	r3, [pc, #148]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401cee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401cf0:	4b23      	ldr	r3, [pc, #140]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401cf2:	6a1b      	ldr	r3, [r3, #32]
  401cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cf8:	2b10      	cmp	r3, #16
  401cfa:	d005      	beq.n	401d08 <SystemCoreClockUpdate+0x78>
  401cfc:	2b20      	cmp	r3, #32
  401cfe:	d1d0      	bne.n	401ca2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401d00:	4a22      	ldr	r2, [pc, #136]	; (401d8c <SystemCoreClockUpdate+0xfc>)
  401d02:	4b20      	ldr	r3, [pc, #128]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d04:	601a      	str	r2, [r3, #0]
          break;
  401d06:	e7cc      	b.n	401ca2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401d08:	4a22      	ldr	r2, [pc, #136]	; (401d94 <SystemCoreClockUpdate+0x104>)
  401d0a:	4b1e      	ldr	r3, [pc, #120]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d0c:	601a      	str	r2, [r3, #0]
          break;
  401d0e:	e7c8      	b.n	401ca2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401d10:	4b1b      	ldr	r3, [pc, #108]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401d12:	6a1b      	ldr	r3, [r3, #32]
  401d14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401d18:	d016      	beq.n	401d48 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401d1a:	4a1c      	ldr	r2, [pc, #112]	; (401d8c <SystemCoreClockUpdate+0xfc>)
  401d1c:	4b19      	ldr	r3, [pc, #100]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d1e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401d20:	4b17      	ldr	r3, [pc, #92]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d24:	f003 0303 	and.w	r3, r3, #3
  401d28:	2b02      	cmp	r3, #2
  401d2a:	d1ba      	bne.n	401ca2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d2c:	4a14      	ldr	r2, [pc, #80]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401d2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401d32:	4814      	ldr	r0, [pc, #80]	; (401d84 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d34:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401d38:	6803      	ldr	r3, [r0, #0]
  401d3a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d3e:	b2d2      	uxtb	r2, r2
  401d40:	fbb3 f3f2 	udiv	r3, r3, r2
  401d44:	6003      	str	r3, [r0, #0]
  401d46:	e7ac      	b.n	401ca2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d48:	4a11      	ldr	r2, [pc, #68]	; (401d90 <SystemCoreClockUpdate+0x100>)
  401d4a:	4b0e      	ldr	r3, [pc, #56]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d4c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401d4e:	4b0c      	ldr	r3, [pc, #48]	; (401d80 <SystemCoreClockUpdate+0xf0>)
  401d50:	6a1b      	ldr	r3, [r3, #32]
  401d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d56:	2b10      	cmp	r3, #16
  401d58:	d005      	beq.n	401d66 <SystemCoreClockUpdate+0xd6>
  401d5a:	2b20      	cmp	r3, #32
  401d5c:	d1e0      	bne.n	401d20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401d5e:	4a0b      	ldr	r2, [pc, #44]	; (401d8c <SystemCoreClockUpdate+0xfc>)
  401d60:	4b08      	ldr	r3, [pc, #32]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d62:	601a      	str	r2, [r3, #0]
          break;
  401d64:	e7dc      	b.n	401d20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401d66:	4a0b      	ldr	r2, [pc, #44]	; (401d94 <SystemCoreClockUpdate+0x104>)
  401d68:	4b06      	ldr	r3, [pc, #24]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d6a:	601a      	str	r2, [r3, #0]
          break;
  401d6c:	e7d8      	b.n	401d20 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401d6e:	4a05      	ldr	r2, [pc, #20]	; (401d84 <SystemCoreClockUpdate+0xf4>)
  401d70:	6813      	ldr	r3, [r2, #0]
  401d72:	4909      	ldr	r1, [pc, #36]	; (401d98 <SystemCoreClockUpdate+0x108>)
  401d74:	fba1 1303 	umull	r1, r3, r1, r3
  401d78:	085b      	lsrs	r3, r3, #1
  401d7a:	6013      	str	r3, [r2, #0]
  401d7c:	4770      	bx	lr
  401d7e:	bf00      	nop
  401d80:	400e0600 	.word	0x400e0600
  401d84:	2040000c 	.word	0x2040000c
  401d88:	400e1810 	.word	0x400e1810
  401d8c:	00b71b00 	.word	0x00b71b00
  401d90:	003d0900 	.word	0x003d0900
  401d94:	007a1200 	.word	0x007a1200
  401d98:	aaaaaaab 	.word	0xaaaaaaab

00401d9c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401d9c:	4b16      	ldr	r3, [pc, #88]	; (401df8 <system_init_flash+0x5c>)
  401d9e:	4298      	cmp	r0, r3
  401da0:	d913      	bls.n	401dca <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401da2:	4b16      	ldr	r3, [pc, #88]	; (401dfc <system_init_flash+0x60>)
  401da4:	4298      	cmp	r0, r3
  401da6:	d915      	bls.n	401dd4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401da8:	4b15      	ldr	r3, [pc, #84]	; (401e00 <system_init_flash+0x64>)
  401daa:	4298      	cmp	r0, r3
  401dac:	d916      	bls.n	401ddc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401dae:	4b15      	ldr	r3, [pc, #84]	; (401e04 <system_init_flash+0x68>)
  401db0:	4298      	cmp	r0, r3
  401db2:	d917      	bls.n	401de4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401db4:	4b14      	ldr	r3, [pc, #80]	; (401e08 <system_init_flash+0x6c>)
  401db6:	4298      	cmp	r0, r3
  401db8:	d918      	bls.n	401dec <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401dba:	4b14      	ldr	r3, [pc, #80]	; (401e0c <system_init_flash+0x70>)
  401dbc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dbe:	bf94      	ite	ls
  401dc0:	4a13      	ldrls	r2, [pc, #76]	; (401e10 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401dc2:	4a14      	ldrhi	r2, [pc, #80]	; (401e14 <system_init_flash+0x78>)
  401dc4:	4b14      	ldr	r3, [pc, #80]	; (401e18 <system_init_flash+0x7c>)
  401dc6:	601a      	str	r2, [r3, #0]
  401dc8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401dca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401dce:	4b12      	ldr	r3, [pc, #72]	; (401e18 <system_init_flash+0x7c>)
  401dd0:	601a      	str	r2, [r3, #0]
  401dd2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401dd4:	4a11      	ldr	r2, [pc, #68]	; (401e1c <system_init_flash+0x80>)
  401dd6:	4b10      	ldr	r3, [pc, #64]	; (401e18 <system_init_flash+0x7c>)
  401dd8:	601a      	str	r2, [r3, #0]
  401dda:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ddc:	4a10      	ldr	r2, [pc, #64]	; (401e20 <system_init_flash+0x84>)
  401dde:	4b0e      	ldr	r3, [pc, #56]	; (401e18 <system_init_flash+0x7c>)
  401de0:	601a      	str	r2, [r3, #0]
  401de2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401de4:	4a0f      	ldr	r2, [pc, #60]	; (401e24 <system_init_flash+0x88>)
  401de6:	4b0c      	ldr	r3, [pc, #48]	; (401e18 <system_init_flash+0x7c>)
  401de8:	601a      	str	r2, [r3, #0]
  401dea:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401df0:	4b09      	ldr	r3, [pc, #36]	; (401e18 <system_init_flash+0x7c>)
  401df2:	601a      	str	r2, [r3, #0]
  401df4:	4770      	bx	lr
  401df6:	bf00      	nop
  401df8:	015ef3bf 	.word	0x015ef3bf
  401dfc:	02bde77f 	.word	0x02bde77f
  401e00:	041cdb3f 	.word	0x041cdb3f
  401e04:	057bceff 	.word	0x057bceff
  401e08:	06dac2bf 	.word	0x06dac2bf
  401e0c:	0839b67f 	.word	0x0839b67f
  401e10:	04000500 	.word	0x04000500
  401e14:	04000600 	.word	0x04000600
  401e18:	400e0c00 	.word	0x400e0c00
  401e1c:	04000100 	.word	0x04000100
  401e20:	04000200 	.word	0x04000200
  401e24:	04000300 	.word	0x04000300

00401e28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401e28:	4b0a      	ldr	r3, [pc, #40]	; (401e54 <_sbrk+0x2c>)
  401e2a:	681b      	ldr	r3, [r3, #0]
  401e2c:	b153      	cbz	r3, 401e44 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401e2e:	4b09      	ldr	r3, [pc, #36]	; (401e54 <_sbrk+0x2c>)
  401e30:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401e32:	181a      	adds	r2, r3, r0
  401e34:	4908      	ldr	r1, [pc, #32]	; (401e58 <_sbrk+0x30>)
  401e36:	4291      	cmp	r1, r2
  401e38:	db08      	blt.n	401e4c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401e3a:	4610      	mov	r0, r2
  401e3c:	4a05      	ldr	r2, [pc, #20]	; (401e54 <_sbrk+0x2c>)
  401e3e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401e40:	4618      	mov	r0, r3
  401e42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401e44:	4a05      	ldr	r2, [pc, #20]	; (401e5c <_sbrk+0x34>)
  401e46:	4b03      	ldr	r3, [pc, #12]	; (401e54 <_sbrk+0x2c>)
  401e48:	601a      	str	r2, [r3, #0]
  401e4a:	e7f0      	b.n	401e2e <_sbrk+0x6>
		return (caddr_t) -1;	
  401e4c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401e50:	4770      	bx	lr
  401e52:	bf00      	nop
  401e54:	20400c5c 	.word	0x20400c5c
  401e58:	2045fffc 	.word	0x2045fffc
  401e5c:	20403050 	.word	0x20403050

00401e60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401e60:	f04f 30ff 	mov.w	r0, #4294967295
  401e64:	4770      	bx	lr

00401e66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401e6a:	604b      	str	r3, [r1, #4]

	return 0;
}
  401e6c:	2000      	movs	r0, #0
  401e6e:	4770      	bx	lr

00401e70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401e70:	2001      	movs	r0, #1
  401e72:	4770      	bx	lr

00401e74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401e74:	2000      	movs	r0, #0
  401e76:	4770      	bx	lr

00401e78 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e78:	f100 0308 	add.w	r3, r0, #8
  401e7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401e7e:	f04f 32ff 	mov.w	r2, #4294967295
  401e82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401e88:	2300      	movs	r3, #0
  401e8a:	6003      	str	r3, [r0, #0]
  401e8c:	4770      	bx	lr

00401e8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401e8e:	2300      	movs	r3, #0
  401e90:	6103      	str	r3, [r0, #16]
  401e92:	4770      	bx	lr

00401e94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401e94:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401e96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401e98:	689a      	ldr	r2, [r3, #8]
  401e9a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401e9c:	689a      	ldr	r2, [r3, #8]
  401e9e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401ea0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401ea2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401ea4:	6803      	ldr	r3, [r0, #0]
  401ea6:	3301      	adds	r3, #1
  401ea8:	6003      	str	r3, [r0, #0]
  401eaa:	4770      	bx	lr

00401eac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401eac:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401eae:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401eb0:	f1b5 3fff 	cmp.w	r5, #4294967295
  401eb4:	d002      	beq.n	401ebc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401eb6:	f100 0208 	add.w	r2, r0, #8
  401eba:	e002      	b.n	401ec2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401ebc:	6902      	ldr	r2, [r0, #16]
  401ebe:	e004      	b.n	401eca <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401ec0:	461a      	mov	r2, r3
  401ec2:	6853      	ldr	r3, [r2, #4]
  401ec4:	681c      	ldr	r4, [r3, #0]
  401ec6:	42a5      	cmp	r5, r4
  401ec8:	d2fa      	bcs.n	401ec0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401eca:	6853      	ldr	r3, [r2, #4]
  401ecc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401ece:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401ed0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401ed2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401ed4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401ed6:	6803      	ldr	r3, [r0, #0]
  401ed8:	3301      	adds	r3, #1
  401eda:	6003      	str	r3, [r0, #0]
}
  401edc:	bc30      	pop	{r4, r5}
  401ede:	4770      	bx	lr

00401ee0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401ee0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401ee2:	6842      	ldr	r2, [r0, #4]
  401ee4:	6881      	ldr	r1, [r0, #8]
  401ee6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401ee8:	6882      	ldr	r2, [r0, #8]
  401eea:	6841      	ldr	r1, [r0, #4]
  401eec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401eee:	685a      	ldr	r2, [r3, #4]
  401ef0:	4290      	cmp	r0, r2
  401ef2:	d005      	beq.n	401f00 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401ef4:	2200      	movs	r2, #0
  401ef6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401ef8:	6818      	ldr	r0, [r3, #0]
  401efa:	3801      	subs	r0, #1
  401efc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401efe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401f00:	6882      	ldr	r2, [r0, #8]
  401f02:	605a      	str	r2, [r3, #4]
  401f04:	e7f6      	b.n	401ef4 <uxListRemove+0x14>
	...

00401f08 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401f08:	4b0d      	ldr	r3, [pc, #52]	; (401f40 <prvTaskExitError+0x38>)
  401f0a:	681b      	ldr	r3, [r3, #0]
  401f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f10:	d00a      	beq.n	401f28 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401f12:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f16:	b672      	cpsid	i
  401f18:	f383 8811 	msr	BASEPRI, r3
  401f1c:	f3bf 8f6f 	isb	sy
  401f20:	f3bf 8f4f 	dsb	sy
  401f24:	b662      	cpsie	i
  401f26:	e7fe      	b.n	401f26 <prvTaskExitError+0x1e>
  401f28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f2c:	b672      	cpsid	i
  401f2e:	f383 8811 	msr	BASEPRI, r3
  401f32:	f3bf 8f6f 	isb	sy
  401f36:	f3bf 8f4f 	dsb	sy
  401f3a:	b662      	cpsie	i
  401f3c:	e7fe      	b.n	401f3c <prvTaskExitError+0x34>
  401f3e:	bf00      	nop
  401f40:	20400010 	.word	0x20400010

00401f44 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401f44:	4806      	ldr	r0, [pc, #24]	; (401f60 <prvPortStartFirstTask+0x1c>)
  401f46:	6800      	ldr	r0, [r0, #0]
  401f48:	6800      	ldr	r0, [r0, #0]
  401f4a:	f380 8808 	msr	MSP, r0
  401f4e:	b662      	cpsie	i
  401f50:	b661      	cpsie	f
  401f52:	f3bf 8f4f 	dsb	sy
  401f56:	f3bf 8f6f 	isb	sy
  401f5a:	df00      	svc	0
  401f5c:	bf00      	nop
  401f5e:	0000      	.short	0x0000
  401f60:	e000ed08 	.word	0xe000ed08

00401f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401f74 <vPortEnableVFP+0x10>
  401f68:	6801      	ldr	r1, [r0, #0]
  401f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401f6e:	6001      	str	r1, [r0, #0]
  401f70:	4770      	bx	lr
  401f72:	0000      	.short	0x0000
  401f74:	e000ed88 	.word	0xe000ed88

00401f78 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401f7c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401f80:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401f84:	4b05      	ldr	r3, [pc, #20]	; (401f9c <pxPortInitialiseStack+0x24>)
  401f86:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401f8a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401f8e:	f06f 0302 	mvn.w	r3, #2
  401f92:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401f96:	3844      	subs	r0, #68	; 0x44
  401f98:	4770      	bx	lr
  401f9a:	bf00      	nop
  401f9c:	00401f09 	.word	0x00401f09

00401fa0 <SVC_Handler>:
	__asm volatile (
  401fa0:	4b06      	ldr	r3, [pc, #24]	; (401fbc <pxCurrentTCBConst2>)
  401fa2:	6819      	ldr	r1, [r3, #0]
  401fa4:	6808      	ldr	r0, [r1, #0]
  401fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401faa:	f380 8809 	msr	PSP, r0
  401fae:	f3bf 8f6f 	isb	sy
  401fb2:	f04f 0000 	mov.w	r0, #0
  401fb6:	f380 8811 	msr	BASEPRI, r0
  401fba:	4770      	bx	lr

00401fbc <pxCurrentTCBConst2>:
  401fbc:	20400c68 	.word	0x20400c68
  401fc0:	4770      	bx	lr
  401fc2:	bf00      	nop

00401fc4 <vPortEnterCritical>:
  401fc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fc8:	b672      	cpsid	i
  401fca:	f383 8811 	msr	BASEPRI, r3
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	f3bf 8f4f 	dsb	sy
  401fd6:	b662      	cpsie	i
	uxCriticalNesting++;
  401fd8:	4a0b      	ldr	r2, [pc, #44]	; (402008 <vPortEnterCritical+0x44>)
  401fda:	6813      	ldr	r3, [r2, #0]
  401fdc:	3301      	adds	r3, #1
  401fde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401fe0:	2b01      	cmp	r3, #1
  401fe2:	d10f      	bne.n	402004 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401fe4:	4b09      	ldr	r3, [pc, #36]	; (40200c <vPortEnterCritical+0x48>)
  401fe6:	681b      	ldr	r3, [r3, #0]
  401fe8:	f013 0fff 	tst.w	r3, #255	; 0xff
  401fec:	d00a      	beq.n	402004 <vPortEnterCritical+0x40>
  401fee:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ff2:	b672      	cpsid	i
  401ff4:	f383 8811 	msr	BASEPRI, r3
  401ff8:	f3bf 8f6f 	isb	sy
  401ffc:	f3bf 8f4f 	dsb	sy
  402000:	b662      	cpsie	i
  402002:	e7fe      	b.n	402002 <vPortEnterCritical+0x3e>
  402004:	4770      	bx	lr
  402006:	bf00      	nop
  402008:	20400010 	.word	0x20400010
  40200c:	e000ed04 	.word	0xe000ed04

00402010 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402010:	4b0a      	ldr	r3, [pc, #40]	; (40203c <vPortExitCritical+0x2c>)
  402012:	681b      	ldr	r3, [r3, #0]
  402014:	b953      	cbnz	r3, 40202c <vPortExitCritical+0x1c>
  402016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40201a:	b672      	cpsid	i
  40201c:	f383 8811 	msr	BASEPRI, r3
  402020:	f3bf 8f6f 	isb	sy
  402024:	f3bf 8f4f 	dsb	sy
  402028:	b662      	cpsie	i
  40202a:	e7fe      	b.n	40202a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40202c:	3b01      	subs	r3, #1
  40202e:	4a03      	ldr	r2, [pc, #12]	; (40203c <vPortExitCritical+0x2c>)
  402030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402032:	b90b      	cbnz	r3, 402038 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402034:	f383 8811 	msr	BASEPRI, r3
  402038:	4770      	bx	lr
  40203a:	bf00      	nop
  40203c:	20400010 	.word	0x20400010

00402040 <PendSV_Handler>:
	__asm volatile
  402040:	f3ef 8009 	mrs	r0, PSP
  402044:	f3bf 8f6f 	isb	sy
  402048:	4b15      	ldr	r3, [pc, #84]	; (4020a0 <pxCurrentTCBConst>)
  40204a:	681a      	ldr	r2, [r3, #0]
  40204c:	f01e 0f10 	tst.w	lr, #16
  402050:	bf08      	it	eq
  402052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  402056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40205a:	6010      	str	r0, [r2, #0]
  40205c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  402060:	f04f 0080 	mov.w	r0, #128	; 0x80
  402064:	b672      	cpsid	i
  402066:	f380 8811 	msr	BASEPRI, r0
  40206a:	f3bf 8f4f 	dsb	sy
  40206e:	f3bf 8f6f 	isb	sy
  402072:	b662      	cpsie	i
  402074:	f001 f890 	bl	403198 <vTaskSwitchContext>
  402078:	f04f 0000 	mov.w	r0, #0
  40207c:	f380 8811 	msr	BASEPRI, r0
  402080:	bc08      	pop	{r3}
  402082:	6819      	ldr	r1, [r3, #0]
  402084:	6808      	ldr	r0, [r1, #0]
  402086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40208a:	f01e 0f10 	tst.w	lr, #16
  40208e:	bf08      	it	eq
  402090:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  402094:	f380 8809 	msr	PSP, r0
  402098:	f3bf 8f6f 	isb	sy
  40209c:	4770      	bx	lr
  40209e:	bf00      	nop

004020a0 <pxCurrentTCBConst>:
  4020a0:	20400c68 	.word	0x20400c68
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop

004020a8 <SysTick_Handler>:
{
  4020a8:	b508      	push	{r3, lr}
	__asm volatile
  4020aa:	f3ef 8311 	mrs	r3, BASEPRI
  4020ae:	f04f 0280 	mov.w	r2, #128	; 0x80
  4020b2:	b672      	cpsid	i
  4020b4:	f382 8811 	msr	BASEPRI, r2
  4020b8:	f3bf 8f6f 	isb	sy
  4020bc:	f3bf 8f4f 	dsb	sy
  4020c0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4020c2:	4b05      	ldr	r3, [pc, #20]	; (4020d8 <SysTick_Handler+0x30>)
  4020c4:	4798      	blx	r3
  4020c6:	b118      	cbz	r0, 4020d0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4020c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4020cc:	4b03      	ldr	r3, [pc, #12]	; (4020dc <SysTick_Handler+0x34>)
  4020ce:	601a      	str	r2, [r3, #0]
	__asm volatile
  4020d0:	2300      	movs	r3, #0
  4020d2:	f383 8811 	msr	BASEPRI, r3
  4020d6:	bd08      	pop	{r3, pc}
  4020d8:	00402e05 	.word	0x00402e05
  4020dc:	e000ed04 	.word	0xe000ed04

004020e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4020e0:	4a03      	ldr	r2, [pc, #12]	; (4020f0 <vPortSetupTimerInterrupt+0x10>)
  4020e2:	4b04      	ldr	r3, [pc, #16]	; (4020f4 <vPortSetupTimerInterrupt+0x14>)
  4020e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4020e6:	2207      	movs	r2, #7
  4020e8:	3b04      	subs	r3, #4
  4020ea:	601a      	str	r2, [r3, #0]
  4020ec:	4770      	bx	lr
  4020ee:	bf00      	nop
  4020f0:	000927bf 	.word	0x000927bf
  4020f4:	e000e014 	.word	0xe000e014

004020f8 <xPortStartScheduler>:
{
  4020f8:	b500      	push	{lr}
  4020fa:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4020fc:	4b25      	ldr	r3, [pc, #148]	; (402194 <xPortStartScheduler+0x9c>)
  4020fe:	781a      	ldrb	r2, [r3, #0]
  402100:	b2d2      	uxtb	r2, r2
  402102:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402104:	22ff      	movs	r2, #255	; 0xff
  402106:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  402108:	781b      	ldrb	r3, [r3, #0]
  40210a:	b2db      	uxtb	r3, r3
  40210c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402110:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402114:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402118:	4a1f      	ldr	r2, [pc, #124]	; (402198 <xPortStartScheduler+0xa0>)
  40211a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40211c:	2207      	movs	r2, #7
  40211e:	4b1f      	ldr	r3, [pc, #124]	; (40219c <xPortStartScheduler+0xa4>)
  402120:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402122:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402126:	f013 0f80 	tst.w	r3, #128	; 0x80
  40212a:	d010      	beq.n	40214e <xPortStartScheduler+0x56>
  40212c:	2206      	movs	r2, #6
  40212e:	e000      	b.n	402132 <xPortStartScheduler+0x3a>
  402130:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402132:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402136:	005b      	lsls	r3, r3, #1
  402138:	b2db      	uxtb	r3, r3
  40213a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40213e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402142:	1e51      	subs	r1, r2, #1
  402144:	f013 0f80 	tst.w	r3, #128	; 0x80
  402148:	d1f2      	bne.n	402130 <xPortStartScheduler+0x38>
  40214a:	4b14      	ldr	r3, [pc, #80]	; (40219c <xPortStartScheduler+0xa4>)
  40214c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40214e:	4a13      	ldr	r2, [pc, #76]	; (40219c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402150:	6813      	ldr	r3, [r2, #0]
  402152:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402158:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40215a:	9b01      	ldr	r3, [sp, #4]
  40215c:	b2db      	uxtb	r3, r3
  40215e:	4a0d      	ldr	r2, [pc, #52]	; (402194 <xPortStartScheduler+0x9c>)
  402160:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  402162:	4b0f      	ldr	r3, [pc, #60]	; (4021a0 <xPortStartScheduler+0xa8>)
  402164:	681a      	ldr	r2, [r3, #0]
  402166:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40216a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40216c:	681a      	ldr	r2, [r3, #0]
  40216e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  402172:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  402174:	4b0b      	ldr	r3, [pc, #44]	; (4021a4 <xPortStartScheduler+0xac>)
  402176:	4798      	blx	r3
	uxCriticalNesting = 0;
  402178:	2200      	movs	r2, #0
  40217a:	4b0b      	ldr	r3, [pc, #44]	; (4021a8 <xPortStartScheduler+0xb0>)
  40217c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40217e:	4b0b      	ldr	r3, [pc, #44]	; (4021ac <xPortStartScheduler+0xb4>)
  402180:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  402182:	4a0b      	ldr	r2, [pc, #44]	; (4021b0 <xPortStartScheduler+0xb8>)
  402184:	6813      	ldr	r3, [r2, #0]
  402186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40218a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40218c:	4b09      	ldr	r3, [pc, #36]	; (4021b4 <xPortStartScheduler+0xbc>)
  40218e:	4798      	blx	r3
	prvTaskExitError();
  402190:	4b09      	ldr	r3, [pc, #36]	; (4021b8 <xPortStartScheduler+0xc0>)
  402192:	4798      	blx	r3
  402194:	e000e400 	.word	0xe000e400
  402198:	20400c60 	.word	0x20400c60
  40219c:	20400c64 	.word	0x20400c64
  4021a0:	e000ed20 	.word	0xe000ed20
  4021a4:	004020e1 	.word	0x004020e1
  4021a8:	20400010 	.word	0x20400010
  4021ac:	00401f65 	.word	0x00401f65
  4021b0:	e000ef34 	.word	0xe000ef34
  4021b4:	00401f45 	.word	0x00401f45
  4021b8:	00401f09 	.word	0x00401f09

004021bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4021bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4021c0:	2b0f      	cmp	r3, #15
  4021c2:	d911      	bls.n	4021e8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4021c4:	4a12      	ldr	r2, [pc, #72]	; (402210 <vPortValidateInterruptPriority+0x54>)
  4021c6:	5c9b      	ldrb	r3, [r3, r2]
  4021c8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4021ca:	4a12      	ldr	r2, [pc, #72]	; (402214 <vPortValidateInterruptPriority+0x58>)
  4021cc:	7812      	ldrb	r2, [r2, #0]
  4021ce:	429a      	cmp	r2, r3
  4021d0:	d90a      	bls.n	4021e8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4021d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d6:	b672      	cpsid	i
  4021d8:	f383 8811 	msr	BASEPRI, r3
  4021dc:	f3bf 8f6f 	isb	sy
  4021e0:	f3bf 8f4f 	dsb	sy
  4021e4:	b662      	cpsie	i
  4021e6:	e7fe      	b.n	4021e6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4021e8:	4b0b      	ldr	r3, [pc, #44]	; (402218 <vPortValidateInterruptPriority+0x5c>)
  4021ea:	681b      	ldr	r3, [r3, #0]
  4021ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4021f0:	4a0a      	ldr	r2, [pc, #40]	; (40221c <vPortValidateInterruptPriority+0x60>)
  4021f2:	6812      	ldr	r2, [r2, #0]
  4021f4:	4293      	cmp	r3, r2
  4021f6:	d90a      	bls.n	40220e <vPortValidateInterruptPriority+0x52>
  4021f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fc:	b672      	cpsid	i
  4021fe:	f383 8811 	msr	BASEPRI, r3
  402202:	f3bf 8f6f 	isb	sy
  402206:	f3bf 8f4f 	dsb	sy
  40220a:	b662      	cpsie	i
  40220c:	e7fe      	b.n	40220c <vPortValidateInterruptPriority+0x50>
  40220e:	4770      	bx	lr
  402210:	e000e3f0 	.word	0xe000e3f0
  402214:	20400c60 	.word	0x20400c60
  402218:	e000ed0c 	.word	0xe000ed0c
  40221c:	20400c64 	.word	0x20400c64

00402220 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402220:	b510      	push	{r4, lr}
  402222:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  402224:	4b06      	ldr	r3, [pc, #24]	; (402240 <pvPortMalloc+0x20>)
  402226:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  402228:	4620      	mov	r0, r4
  40222a:	4b06      	ldr	r3, [pc, #24]	; (402244 <pvPortMalloc+0x24>)
  40222c:	4798      	blx	r3
  40222e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  402230:	4b05      	ldr	r3, [pc, #20]	; (402248 <pvPortMalloc+0x28>)
  402232:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  402234:	b10c      	cbz	r4, 40223a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  402236:	4620      	mov	r0, r4
  402238:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40223a:	4b04      	ldr	r3, [pc, #16]	; (40224c <pvPortMalloc+0x2c>)
  40223c:	4798      	blx	r3
	return pvReturn;
  40223e:	e7fa      	b.n	402236 <pvPortMalloc+0x16>
  402240:	00402de9 	.word	0x00402de9
  402244:	00406d39 	.word	0x00406d39
  402248:	00402f51 	.word	0x00402f51
  40224c:	00403d7f 	.word	0x00403d7f

00402250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  402250:	b148      	cbz	r0, 402266 <vPortFree+0x16>
{
  402252:	b510      	push	{r4, lr}
  402254:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  402256:	4b04      	ldr	r3, [pc, #16]	; (402268 <vPortFree+0x18>)
  402258:	4798      	blx	r3
		{
			free( pv );
  40225a:	4620      	mov	r0, r4
  40225c:	4b03      	ldr	r3, [pc, #12]	; (40226c <vPortFree+0x1c>)
  40225e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  402260:	4b03      	ldr	r3, [pc, #12]	; (402270 <vPortFree+0x20>)
  402262:	4798      	blx	r3
  402264:	bd10      	pop	{r4, pc}
  402266:	4770      	bx	lr
  402268:	00402de9 	.word	0x00402de9
  40226c:	00406d49 	.word	0x00406d49
  402270:	00402f51 	.word	0x00402f51

00402274 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  402274:	b538      	push	{r3, r4, r5, lr}
  402276:	4604      	mov	r4, r0
  402278:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40227a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40227c:	b95a      	cbnz	r2, 402296 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40227e:	6803      	ldr	r3, [r0, #0]
  402280:	2b00      	cmp	r3, #0
  402282:	d12e      	bne.n	4022e2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402284:	6840      	ldr	r0, [r0, #4]
  402286:	4b1b      	ldr	r3, [pc, #108]	; (4022f4 <prvCopyDataToQueue+0x80>)
  402288:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40228a:	2300      	movs	r3, #0
  40228c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40228e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402290:	3301      	adds	r3, #1
  402292:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  402294:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  402296:	b96d      	cbnz	r5, 4022b4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402298:	6880      	ldr	r0, [r0, #8]
  40229a:	4b17      	ldr	r3, [pc, #92]	; (4022f8 <prvCopyDataToQueue+0x84>)
  40229c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40229e:	68a3      	ldr	r3, [r4, #8]
  4022a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4022a2:	4413      	add	r3, r2
  4022a4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4022a6:	6862      	ldr	r2, [r4, #4]
  4022a8:	4293      	cmp	r3, r2
  4022aa:	d31c      	bcc.n	4022e6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4022ac:	6823      	ldr	r3, [r4, #0]
  4022ae:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4022b0:	2000      	movs	r0, #0
  4022b2:	e7ec      	b.n	40228e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022b4:	68c0      	ldr	r0, [r0, #12]
  4022b6:	4b10      	ldr	r3, [pc, #64]	; (4022f8 <prvCopyDataToQueue+0x84>)
  4022b8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4022ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4022bc:	425b      	negs	r3, r3
  4022be:	68e2      	ldr	r2, [r4, #12]
  4022c0:	441a      	add	r2, r3
  4022c2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4022c4:	6821      	ldr	r1, [r4, #0]
  4022c6:	428a      	cmp	r2, r1
  4022c8:	d202      	bcs.n	4022d0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4022ca:	6862      	ldr	r2, [r4, #4]
  4022cc:	4413      	add	r3, r2
  4022ce:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4022d0:	2d02      	cmp	r5, #2
  4022d2:	d10a      	bne.n	4022ea <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4022d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4022d6:	b153      	cbz	r3, 4022ee <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4022d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4022da:	3b01      	subs	r3, #1
  4022dc:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4022de:	2000      	movs	r0, #0
  4022e0:	e7d5      	b.n	40228e <prvCopyDataToQueue+0x1a>
  4022e2:	2000      	movs	r0, #0
  4022e4:	e7d3      	b.n	40228e <prvCopyDataToQueue+0x1a>
  4022e6:	2000      	movs	r0, #0
  4022e8:	e7d1      	b.n	40228e <prvCopyDataToQueue+0x1a>
  4022ea:	2000      	movs	r0, #0
  4022ec:	e7cf      	b.n	40228e <prvCopyDataToQueue+0x1a>
  4022ee:	2000      	movs	r0, #0
  4022f0:	e7cd      	b.n	40228e <prvCopyDataToQueue+0x1a>
  4022f2:	bf00      	nop
  4022f4:	00403599 	.word	0x00403599
  4022f8:	004072b9 	.word	0x004072b9

004022fc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4022fc:	b530      	push	{r4, r5, lr}
  4022fe:	b083      	sub	sp, #12
  402300:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  402302:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402304:	b174      	cbz	r4, 402324 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40230a:	429a      	cmp	r2, r3
  40230c:	d315      	bcc.n	40233a <prvNotifyQueueSetContainer+0x3e>
  40230e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402312:	b672      	cpsid	i
  402314:	f383 8811 	msr	BASEPRI, r3
  402318:	f3bf 8f6f 	isb	sy
  40231c:	f3bf 8f4f 	dsb	sy
  402320:	b662      	cpsie	i
  402322:	e7fe      	b.n	402322 <prvNotifyQueueSetContainer+0x26>
  402324:	f04f 0380 	mov.w	r3, #128	; 0x80
  402328:	b672      	cpsid	i
  40232a:	f383 8811 	msr	BASEPRI, r3
  40232e:	f3bf 8f6f 	isb	sy
  402332:	f3bf 8f4f 	dsb	sy
  402336:	b662      	cpsie	i
  402338:	e7fe      	b.n	402338 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40233a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40233c:	4293      	cmp	r3, r2
  40233e:	d803      	bhi.n	402348 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402340:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402342:	4628      	mov	r0, r5
  402344:	b003      	add	sp, #12
  402346:	bd30      	pop	{r4, r5, pc}
  402348:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40234a:	a901      	add	r1, sp, #4
  40234c:	4620      	mov	r0, r4
  40234e:	4b0b      	ldr	r3, [pc, #44]	; (40237c <prvNotifyQueueSetContainer+0x80>)
  402350:	4798      	blx	r3
  402352:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402356:	f1b3 3fff 	cmp.w	r3, #4294967295
  40235a:	d10a      	bne.n	402372 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40235c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40235e:	2b00      	cmp	r3, #0
  402360:	d0ef      	beq.n	402342 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402362:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402366:	4b06      	ldr	r3, [pc, #24]	; (402380 <prvNotifyQueueSetContainer+0x84>)
  402368:	4798      	blx	r3
  40236a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40236c:	bf18      	it	ne
  40236e:	2501      	movne	r5, #1
  402370:	e7e7      	b.n	402342 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  402372:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402374:	3301      	adds	r3, #1
  402376:	64a3      	str	r3, [r4, #72]	; 0x48
  402378:	e7e3      	b.n	402342 <prvNotifyQueueSetContainer+0x46>
  40237a:	bf00      	nop
  40237c:	00402275 	.word	0x00402275
  402380:	0040336d 	.word	0x0040336d

00402384 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402384:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402386:	b172      	cbz	r2, 4023a6 <prvCopyDataFromQueue+0x22>
{
  402388:	b510      	push	{r4, lr}
  40238a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40238c:	68c4      	ldr	r4, [r0, #12]
  40238e:	4414      	add	r4, r2
  402390:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  402392:	6840      	ldr	r0, [r0, #4]
  402394:	4284      	cmp	r4, r0
  402396:	d301      	bcc.n	40239c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402398:	6818      	ldr	r0, [r3, #0]
  40239a:	60d8      	str	r0, [r3, #12]
  40239c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40239e:	68d9      	ldr	r1, [r3, #12]
  4023a0:	4b01      	ldr	r3, [pc, #4]	; (4023a8 <prvCopyDataFromQueue+0x24>)
  4023a2:	4798      	blx	r3
  4023a4:	bd10      	pop	{r4, pc}
  4023a6:	4770      	bx	lr
  4023a8:	004072b9 	.word	0x004072b9

004023ac <prvUnlockQueue>:
{
  4023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023ae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4023b0:	4b22      	ldr	r3, [pc, #136]	; (40243c <prvUnlockQueue+0x90>)
  4023b2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4023b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023b6:	2b00      	cmp	r3, #0
  4023b8:	dd1b      	ble.n	4023f2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023ba:	4d21      	ldr	r5, [pc, #132]	; (402440 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4023bc:	4f21      	ldr	r7, [pc, #132]	; (402444 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023be:	4e22      	ldr	r6, [pc, #136]	; (402448 <prvUnlockQueue+0x9c>)
  4023c0:	e00b      	b.n	4023da <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4023c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023c4:	b1ab      	cbz	r3, 4023f2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4023c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023ca:	47b0      	blx	r6
  4023cc:	b978      	cbnz	r0, 4023ee <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4023ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023d0:	3b01      	subs	r3, #1
  4023d2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4023d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	dd0b      	ble.n	4023f2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4023da:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4023dc:	2b00      	cmp	r3, #0
  4023de:	d0f0      	beq.n	4023c2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4023e0:	2100      	movs	r1, #0
  4023e2:	4620      	mov	r0, r4
  4023e4:	47a8      	blx	r5
  4023e6:	2801      	cmp	r0, #1
  4023e8:	d1f1      	bne.n	4023ce <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4023ea:	47b8      	blx	r7
  4023ec:	e7ef      	b.n	4023ce <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4023ee:	47b8      	blx	r7
  4023f0:	e7ed      	b.n	4023ce <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4023f2:	f04f 33ff 	mov.w	r3, #4294967295
  4023f6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4023f8:	4b14      	ldr	r3, [pc, #80]	; (40244c <prvUnlockQueue+0xa0>)
  4023fa:	4798      	blx	r3
	taskENTER_CRITICAL();
  4023fc:	4b0f      	ldr	r3, [pc, #60]	; (40243c <prvUnlockQueue+0x90>)
  4023fe:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402400:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402402:	2b00      	cmp	r3, #0
  402404:	dd14      	ble.n	402430 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402406:	6923      	ldr	r3, [r4, #16]
  402408:	b193      	cbz	r3, 402430 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40240a:	f104 0610 	add.w	r6, r4, #16
  40240e:	4d0e      	ldr	r5, [pc, #56]	; (402448 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402410:	4f0c      	ldr	r7, [pc, #48]	; (402444 <prvUnlockQueue+0x98>)
  402412:	e007      	b.n	402424 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402414:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402416:	3b01      	subs	r3, #1
  402418:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40241a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40241c:	2b00      	cmp	r3, #0
  40241e:	dd07      	ble.n	402430 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402420:	6923      	ldr	r3, [r4, #16]
  402422:	b12b      	cbz	r3, 402430 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402424:	4630      	mov	r0, r6
  402426:	47a8      	blx	r5
  402428:	2800      	cmp	r0, #0
  40242a:	d0f3      	beq.n	402414 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40242c:	47b8      	blx	r7
  40242e:	e7f1      	b.n	402414 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402430:	f04f 33ff 	mov.w	r3, #4294967295
  402434:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  402436:	4b05      	ldr	r3, [pc, #20]	; (40244c <prvUnlockQueue+0xa0>)
  402438:	4798      	blx	r3
  40243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40243c:	00401fc5 	.word	0x00401fc5
  402440:	004022fd 	.word	0x004022fd
  402444:	004034c9 	.word	0x004034c9
  402448:	0040336d 	.word	0x0040336d
  40244c:	00402011 	.word	0x00402011

00402450 <xQueueGenericReset>:
{
  402450:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402452:	b308      	cbz	r0, 402498 <xQueueGenericReset+0x48>
  402454:	4604      	mov	r4, r0
  402456:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402458:	4b1d      	ldr	r3, [pc, #116]	; (4024d0 <xQueueGenericReset+0x80>)
  40245a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40245c:	6822      	ldr	r2, [r4, #0]
  40245e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402462:	fb03 f301 	mul.w	r3, r3, r1
  402466:	18d0      	adds	r0, r2, r3
  402468:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40246a:	2000      	movs	r0, #0
  40246c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40246e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402470:	1a5b      	subs	r3, r3, r1
  402472:	4413      	add	r3, r2
  402474:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  402476:	f04f 33ff 	mov.w	r3, #4294967295
  40247a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40247c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40247e:	b9fd      	cbnz	r5, 4024c0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402480:	6923      	ldr	r3, [r4, #16]
  402482:	b12b      	cbz	r3, 402490 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402484:	f104 0010 	add.w	r0, r4, #16
  402488:	4b12      	ldr	r3, [pc, #72]	; (4024d4 <xQueueGenericReset+0x84>)
  40248a:	4798      	blx	r3
  40248c:	2801      	cmp	r0, #1
  40248e:	d00e      	beq.n	4024ae <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402490:	4b11      	ldr	r3, [pc, #68]	; (4024d8 <xQueueGenericReset+0x88>)
  402492:	4798      	blx	r3
}
  402494:	2001      	movs	r0, #1
  402496:	bd38      	pop	{r3, r4, r5, pc}
  402498:	f04f 0380 	mov.w	r3, #128	; 0x80
  40249c:	b672      	cpsid	i
  40249e:	f383 8811 	msr	BASEPRI, r3
  4024a2:	f3bf 8f6f 	isb	sy
  4024a6:	f3bf 8f4f 	dsb	sy
  4024aa:	b662      	cpsie	i
  4024ac:	e7fe      	b.n	4024ac <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4024ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4024b2:	4b0a      	ldr	r3, [pc, #40]	; (4024dc <xQueueGenericReset+0x8c>)
  4024b4:	601a      	str	r2, [r3, #0]
  4024b6:	f3bf 8f4f 	dsb	sy
  4024ba:	f3bf 8f6f 	isb	sy
  4024be:	e7e7      	b.n	402490 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4024c0:	f104 0010 	add.w	r0, r4, #16
  4024c4:	4d06      	ldr	r5, [pc, #24]	; (4024e0 <xQueueGenericReset+0x90>)
  4024c6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4024c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4024cc:	47a8      	blx	r5
  4024ce:	e7df      	b.n	402490 <xQueueGenericReset+0x40>
  4024d0:	00401fc5 	.word	0x00401fc5
  4024d4:	0040336d 	.word	0x0040336d
  4024d8:	00402011 	.word	0x00402011
  4024dc:	e000ed04 	.word	0xe000ed04
  4024e0:	00401e79 	.word	0x00401e79

004024e4 <xQueueGenericCreate>:
{
  4024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4024e6:	b950      	cbnz	r0, 4024fe <xQueueGenericCreate+0x1a>
  4024e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ec:	b672      	cpsid	i
  4024ee:	f383 8811 	msr	BASEPRI, r3
  4024f2:	f3bf 8f6f 	isb	sy
  4024f6:	f3bf 8f4f 	dsb	sy
  4024fa:	b662      	cpsie	i
  4024fc:	e7fe      	b.n	4024fc <xQueueGenericCreate+0x18>
  4024fe:	4606      	mov	r6, r0
  402500:	4617      	mov	r7, r2
  402502:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402504:	b189      	cbz	r1, 40252a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402506:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40250a:	3059      	adds	r0, #89	; 0x59
  40250c:	4b12      	ldr	r3, [pc, #72]	; (402558 <xQueueGenericCreate+0x74>)
  40250e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402510:	4604      	mov	r4, r0
  402512:	b9e8      	cbnz	r0, 402550 <xQueueGenericCreate+0x6c>
  402514:	f04f 0380 	mov.w	r3, #128	; 0x80
  402518:	b672      	cpsid	i
  40251a:	f383 8811 	msr	BASEPRI, r3
  40251e:	f3bf 8f6f 	isb	sy
  402522:	f3bf 8f4f 	dsb	sy
  402526:	b662      	cpsie	i
  402528:	e7fe      	b.n	402528 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40252a:	2058      	movs	r0, #88	; 0x58
  40252c:	4b0a      	ldr	r3, [pc, #40]	; (402558 <xQueueGenericCreate+0x74>)
  40252e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402530:	4604      	mov	r4, r0
  402532:	2800      	cmp	r0, #0
  402534:	d0ee      	beq.n	402514 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402536:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402538:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40253a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40253c:	2101      	movs	r1, #1
  40253e:	4620      	mov	r0, r4
  402540:	4b06      	ldr	r3, [pc, #24]	; (40255c <xQueueGenericCreate+0x78>)
  402542:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402544:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402548:	2300      	movs	r3, #0
  40254a:	6563      	str	r3, [r4, #84]	; 0x54
}
  40254c:	4620      	mov	r0, r4
  40254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402550:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402554:	6003      	str	r3, [r0, #0]
  402556:	e7ef      	b.n	402538 <xQueueGenericCreate+0x54>
  402558:	00402221 	.word	0x00402221
  40255c:	00402451 	.word	0x00402451

00402560 <xQueueGenericSend>:
{
  402560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402564:	b085      	sub	sp, #20
  402566:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402568:	b1b8      	cbz	r0, 40259a <xQueueGenericSend+0x3a>
  40256a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40256c:	b301      	cbz	r1, 4025b0 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40256e:	2b02      	cmp	r3, #2
  402570:	d02c      	beq.n	4025cc <xQueueGenericSend+0x6c>
  402572:	461d      	mov	r5, r3
  402574:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402576:	4b66      	ldr	r3, [pc, #408]	; (402710 <xQueueGenericSend+0x1b0>)
  402578:	4798      	blx	r3
  40257a:	2800      	cmp	r0, #0
  40257c:	d134      	bne.n	4025e8 <xQueueGenericSend+0x88>
  40257e:	9b01      	ldr	r3, [sp, #4]
  402580:	2b00      	cmp	r3, #0
  402582:	d038      	beq.n	4025f6 <xQueueGenericSend+0x96>
  402584:	f04f 0380 	mov.w	r3, #128	; 0x80
  402588:	b672      	cpsid	i
  40258a:	f383 8811 	msr	BASEPRI, r3
  40258e:	f3bf 8f6f 	isb	sy
  402592:	f3bf 8f4f 	dsb	sy
  402596:	b662      	cpsie	i
  402598:	e7fe      	b.n	402598 <xQueueGenericSend+0x38>
  40259a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40259e:	b672      	cpsid	i
  4025a0:	f383 8811 	msr	BASEPRI, r3
  4025a4:	f3bf 8f6f 	isb	sy
  4025a8:	f3bf 8f4f 	dsb	sy
  4025ac:	b662      	cpsie	i
  4025ae:	e7fe      	b.n	4025ae <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4025b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4025b2:	2a00      	cmp	r2, #0
  4025b4:	d0db      	beq.n	40256e <xQueueGenericSend+0xe>
  4025b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ba:	b672      	cpsid	i
  4025bc:	f383 8811 	msr	BASEPRI, r3
  4025c0:	f3bf 8f6f 	isb	sy
  4025c4:	f3bf 8f4f 	dsb	sy
  4025c8:	b662      	cpsie	i
  4025ca:	e7fe      	b.n	4025ca <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4025cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4025ce:	2a01      	cmp	r2, #1
  4025d0:	d0cf      	beq.n	402572 <xQueueGenericSend+0x12>
  4025d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025d6:	b672      	cpsid	i
  4025d8:	f383 8811 	msr	BASEPRI, r3
  4025dc:	f3bf 8f6f 	isb	sy
  4025e0:	f3bf 8f4f 	dsb	sy
  4025e4:	b662      	cpsie	i
  4025e6:	e7fe      	b.n	4025e6 <xQueueGenericSend+0x86>
  4025e8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4025ea:	4e4a      	ldr	r6, [pc, #296]	; (402714 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4025ec:	f8df a150 	ldr.w	sl, [pc, #336]	; 402740 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4025f0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402720 <xQueueGenericSend+0x1c0>
  4025f4:	e042      	b.n	40267c <xQueueGenericSend+0x11c>
  4025f6:	2700      	movs	r7, #0
  4025f8:	e7f7      	b.n	4025ea <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4025fa:	462a      	mov	r2, r5
  4025fc:	4641      	mov	r1, r8
  4025fe:	4620      	mov	r0, r4
  402600:	4b45      	ldr	r3, [pc, #276]	; (402718 <xQueueGenericSend+0x1b8>)
  402602:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402604:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402606:	b19b      	cbz	r3, 402630 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402608:	4629      	mov	r1, r5
  40260a:	4620      	mov	r0, r4
  40260c:	4b43      	ldr	r3, [pc, #268]	; (40271c <xQueueGenericSend+0x1bc>)
  40260e:	4798      	blx	r3
  402610:	2801      	cmp	r0, #1
  402612:	d107      	bne.n	402624 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402618:	4b41      	ldr	r3, [pc, #260]	; (402720 <xQueueGenericSend+0x1c0>)
  40261a:	601a      	str	r2, [r3, #0]
  40261c:	f3bf 8f4f 	dsb	sy
  402620:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402624:	4b3f      	ldr	r3, [pc, #252]	; (402724 <xQueueGenericSend+0x1c4>)
  402626:	4798      	blx	r3
				return pdPASS;
  402628:	2001      	movs	r0, #1
}
  40262a:	b005      	add	sp, #20
  40262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402630:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402632:	b173      	cbz	r3, 402652 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402634:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402638:	4b3b      	ldr	r3, [pc, #236]	; (402728 <xQueueGenericSend+0x1c8>)
  40263a:	4798      	blx	r3
  40263c:	2801      	cmp	r0, #1
  40263e:	d1f1      	bne.n	402624 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402644:	4b36      	ldr	r3, [pc, #216]	; (402720 <xQueueGenericSend+0x1c0>)
  402646:	601a      	str	r2, [r3, #0]
  402648:	f3bf 8f4f 	dsb	sy
  40264c:	f3bf 8f6f 	isb	sy
  402650:	e7e8      	b.n	402624 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  402652:	2800      	cmp	r0, #0
  402654:	d0e6      	beq.n	402624 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40265a:	4b31      	ldr	r3, [pc, #196]	; (402720 <xQueueGenericSend+0x1c0>)
  40265c:	601a      	str	r2, [r3, #0]
  40265e:	f3bf 8f4f 	dsb	sy
  402662:	f3bf 8f6f 	isb	sy
  402666:	e7dd      	b.n	402624 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402668:	4b2e      	ldr	r3, [pc, #184]	; (402724 <xQueueGenericSend+0x1c4>)
  40266a:	4798      	blx	r3
					return errQUEUE_FULL;
  40266c:	2000      	movs	r0, #0
  40266e:	e7dc      	b.n	40262a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402670:	4620      	mov	r0, r4
  402672:	4b2e      	ldr	r3, [pc, #184]	; (40272c <xQueueGenericSend+0x1cc>)
  402674:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402676:	4b2e      	ldr	r3, [pc, #184]	; (402730 <xQueueGenericSend+0x1d0>)
  402678:	4798      	blx	r3
  40267a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40267c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40267e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402680:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402682:	429a      	cmp	r2, r3
  402684:	d3b9      	bcc.n	4025fa <xQueueGenericSend+0x9a>
  402686:	2d02      	cmp	r5, #2
  402688:	d0b7      	beq.n	4025fa <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40268a:	9b01      	ldr	r3, [sp, #4]
  40268c:	2b00      	cmp	r3, #0
  40268e:	d0eb      	beq.n	402668 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402690:	b90f      	cbnz	r7, 402696 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  402692:	a802      	add	r0, sp, #8
  402694:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402696:	4b23      	ldr	r3, [pc, #140]	; (402724 <xQueueGenericSend+0x1c4>)
  402698:	4798      	blx	r3
		vTaskSuspendAll();
  40269a:	4b26      	ldr	r3, [pc, #152]	; (402734 <xQueueGenericSend+0x1d4>)
  40269c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40269e:	47b0      	blx	r6
  4026a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026a6:	d101      	bne.n	4026ac <xQueueGenericSend+0x14c>
  4026a8:	2300      	movs	r3, #0
  4026aa:	6463      	str	r3, [r4, #68]	; 0x44
  4026ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026b2:	d101      	bne.n	4026b8 <xQueueGenericSend+0x158>
  4026b4:	2300      	movs	r3, #0
  4026b6:	64a3      	str	r3, [r4, #72]	; 0x48
  4026b8:	4b1a      	ldr	r3, [pc, #104]	; (402724 <xQueueGenericSend+0x1c4>)
  4026ba:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4026bc:	a901      	add	r1, sp, #4
  4026be:	a802      	add	r0, sp, #8
  4026c0:	4b1d      	ldr	r3, [pc, #116]	; (402738 <xQueueGenericSend+0x1d8>)
  4026c2:	4798      	blx	r3
  4026c4:	b9e0      	cbnz	r0, 402700 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4026c6:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4026c8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4026cc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4026ce:	4b15      	ldr	r3, [pc, #84]	; (402724 <xQueueGenericSend+0x1c4>)
  4026d0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4026d2:	45bb      	cmp	fp, r7
  4026d4:	d1cc      	bne.n	402670 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4026d6:	9901      	ldr	r1, [sp, #4]
  4026d8:	f104 0010 	add.w	r0, r4, #16
  4026dc:	4b17      	ldr	r3, [pc, #92]	; (40273c <xQueueGenericSend+0x1dc>)
  4026de:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4026e0:	4620      	mov	r0, r4
  4026e2:	4b12      	ldr	r3, [pc, #72]	; (40272c <xQueueGenericSend+0x1cc>)
  4026e4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4026e6:	4b12      	ldr	r3, [pc, #72]	; (402730 <xQueueGenericSend+0x1d0>)
  4026e8:	4798      	blx	r3
  4026ea:	2800      	cmp	r0, #0
  4026ec:	d1c5      	bne.n	40267a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4026ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4026f2:	f8c9 3000 	str.w	r3, [r9]
  4026f6:	f3bf 8f4f 	dsb	sy
  4026fa:	f3bf 8f6f 	isb	sy
  4026fe:	e7bc      	b.n	40267a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402700:	4620      	mov	r0, r4
  402702:	4b0a      	ldr	r3, [pc, #40]	; (40272c <xQueueGenericSend+0x1cc>)
  402704:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402706:	4b0a      	ldr	r3, [pc, #40]	; (402730 <xQueueGenericSend+0x1d0>)
  402708:	4798      	blx	r3
			return errQUEUE_FULL;
  40270a:	2000      	movs	r0, #0
  40270c:	e78d      	b.n	40262a <xQueueGenericSend+0xca>
  40270e:	bf00      	nop
  402710:	004034d5 	.word	0x004034d5
  402714:	00401fc5 	.word	0x00401fc5
  402718:	00402275 	.word	0x00402275
  40271c:	004022fd 	.word	0x004022fd
  402720:	e000ed04 	.word	0xe000ed04
  402724:	00402011 	.word	0x00402011
  402728:	0040336d 	.word	0x0040336d
  40272c:	004023ad 	.word	0x004023ad
  402730:	00402f51 	.word	0x00402f51
  402734:	00402de9 	.word	0x00402de9
  402738:	00403435 	.word	0x00403435
  40273c:	00403269 	.word	0x00403269
  402740:	00403405 	.word	0x00403405

00402744 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402744:	2800      	cmp	r0, #0
  402746:	d036      	beq.n	4027b6 <xQueueGenericSendFromISR+0x72>
{
  402748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40274c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40274e:	2900      	cmp	r1, #0
  402750:	d03c      	beq.n	4027cc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402752:	2b02      	cmp	r3, #2
  402754:	d048      	beq.n	4027e8 <xQueueGenericSendFromISR+0xa4>
  402756:	461e      	mov	r6, r3
  402758:	4615      	mov	r5, r2
  40275a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40275c:	4b35      	ldr	r3, [pc, #212]	; (402834 <xQueueGenericSendFromISR+0xf0>)
  40275e:	4798      	blx	r3
	__asm volatile
  402760:	f3ef 8711 	mrs	r7, BASEPRI
  402764:	f04f 0380 	mov.w	r3, #128	; 0x80
  402768:	b672      	cpsid	i
  40276a:	f383 8811 	msr	BASEPRI, r3
  40276e:	f3bf 8f6f 	isb	sy
  402772:	f3bf 8f4f 	dsb	sy
  402776:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40277a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40277c:	429a      	cmp	r2, r3
  40277e:	d301      	bcc.n	402784 <xQueueGenericSendFromISR+0x40>
  402780:	2e02      	cmp	r6, #2
  402782:	d14f      	bne.n	402824 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402784:	4632      	mov	r2, r6
  402786:	4641      	mov	r1, r8
  402788:	4620      	mov	r0, r4
  40278a:	4b2b      	ldr	r3, [pc, #172]	; (402838 <xQueueGenericSendFromISR+0xf4>)
  40278c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40278e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402790:	f1b3 3fff 	cmp.w	r3, #4294967295
  402794:	d141      	bne.n	40281a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402796:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402798:	2b00      	cmp	r3, #0
  40279a:	d033      	beq.n	402804 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40279c:	4631      	mov	r1, r6
  40279e:	4620      	mov	r0, r4
  4027a0:	4b26      	ldr	r3, [pc, #152]	; (40283c <xQueueGenericSendFromISR+0xf8>)
  4027a2:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4027a4:	2d00      	cmp	r5, #0
  4027a6:	d03f      	beq.n	402828 <xQueueGenericSendFromISR+0xe4>
  4027a8:	2801      	cmp	r0, #1
  4027aa:	d13d      	bne.n	402828 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4027ac:	6028      	str	r0, [r5, #0]
	__asm volatile
  4027ae:	f387 8811 	msr	BASEPRI, r7
}
  4027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4027b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027ba:	b672      	cpsid	i
  4027bc:	f383 8811 	msr	BASEPRI, r3
  4027c0:	f3bf 8f6f 	isb	sy
  4027c4:	f3bf 8f4f 	dsb	sy
  4027c8:	b662      	cpsie	i
  4027ca:	e7fe      	b.n	4027ca <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027cc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4027ce:	2800      	cmp	r0, #0
  4027d0:	d0bf      	beq.n	402752 <xQueueGenericSendFromISR+0xe>
  4027d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027d6:	b672      	cpsid	i
  4027d8:	f383 8811 	msr	BASEPRI, r3
  4027dc:	f3bf 8f6f 	isb	sy
  4027e0:	f3bf 8f4f 	dsb	sy
  4027e4:	b662      	cpsie	i
  4027e6:	e7fe      	b.n	4027e6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4027e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4027ea:	2801      	cmp	r0, #1
  4027ec:	d0b3      	beq.n	402756 <xQueueGenericSendFromISR+0x12>
  4027ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f2:	b672      	cpsid	i
  4027f4:	f383 8811 	msr	BASEPRI, r3
  4027f8:	f3bf 8f6f 	isb	sy
  4027fc:	f3bf 8f4f 	dsb	sy
  402800:	b662      	cpsie	i
  402802:	e7fe      	b.n	402802 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402804:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402806:	b18b      	cbz	r3, 40282c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402808:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40280c:	4b0c      	ldr	r3, [pc, #48]	; (402840 <xQueueGenericSendFromISR+0xfc>)
  40280e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402810:	b175      	cbz	r5, 402830 <xQueueGenericSendFromISR+0xec>
  402812:	b168      	cbz	r0, 402830 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402814:	2001      	movs	r0, #1
  402816:	6028      	str	r0, [r5, #0]
  402818:	e7c9      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40281a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40281c:	3301      	adds	r3, #1
  40281e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402820:	2001      	movs	r0, #1
  402822:	e7c4      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402824:	2000      	movs	r0, #0
  402826:	e7c2      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402828:	2001      	movs	r0, #1
  40282a:	e7c0      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
  40282c:	2001      	movs	r0, #1
  40282e:	e7be      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
  402830:	2001      	movs	r0, #1
  402832:	e7bc      	b.n	4027ae <xQueueGenericSendFromISR+0x6a>
  402834:	004021bd 	.word	0x004021bd
  402838:	00402275 	.word	0x00402275
  40283c:	004022fd 	.word	0x004022fd
  402840:	0040336d 	.word	0x0040336d

00402844 <xQueueGenericReceive>:
{
  402844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402848:	b084      	sub	sp, #16
  40284a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40284c:	b198      	cbz	r0, 402876 <xQueueGenericReceive+0x32>
  40284e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402850:	b1e1      	cbz	r1, 40288c <xQueueGenericReceive+0x48>
  402852:	4698      	mov	r8, r3
  402854:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402856:	4b61      	ldr	r3, [pc, #388]	; (4029dc <xQueueGenericReceive+0x198>)
  402858:	4798      	blx	r3
  40285a:	bb28      	cbnz	r0, 4028a8 <xQueueGenericReceive+0x64>
  40285c:	9b01      	ldr	r3, [sp, #4]
  40285e:	b353      	cbz	r3, 4028b6 <xQueueGenericReceive+0x72>
  402860:	f04f 0380 	mov.w	r3, #128	; 0x80
  402864:	b672      	cpsid	i
  402866:	f383 8811 	msr	BASEPRI, r3
  40286a:	f3bf 8f6f 	isb	sy
  40286e:	f3bf 8f4f 	dsb	sy
  402872:	b662      	cpsie	i
  402874:	e7fe      	b.n	402874 <xQueueGenericReceive+0x30>
  402876:	f04f 0380 	mov.w	r3, #128	; 0x80
  40287a:	b672      	cpsid	i
  40287c:	f383 8811 	msr	BASEPRI, r3
  402880:	f3bf 8f6f 	isb	sy
  402884:	f3bf 8f4f 	dsb	sy
  402888:	b662      	cpsie	i
  40288a:	e7fe      	b.n	40288a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40288c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40288e:	2a00      	cmp	r2, #0
  402890:	d0df      	beq.n	402852 <xQueueGenericReceive+0xe>
  402892:	f04f 0380 	mov.w	r3, #128	; 0x80
  402896:	b672      	cpsid	i
  402898:	f383 8811 	msr	BASEPRI, r3
  40289c:	f3bf 8f6f 	isb	sy
  4028a0:	f3bf 8f4f 	dsb	sy
  4028a4:	b662      	cpsie	i
  4028a6:	e7fe      	b.n	4028a6 <xQueueGenericReceive+0x62>
  4028a8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4028aa:	4d4d      	ldr	r5, [pc, #308]	; (4029e0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4028ac:	f8df a160 	ldr.w	sl, [pc, #352]	; 402a10 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4028b0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4029f0 <xQueueGenericReceive+0x1ac>
  4028b4:	e04b      	b.n	40294e <xQueueGenericReceive+0x10a>
  4028b6:	2600      	movs	r6, #0
  4028b8:	e7f7      	b.n	4028aa <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4028ba:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4028bc:	4639      	mov	r1, r7
  4028be:	4620      	mov	r0, r4
  4028c0:	4b48      	ldr	r3, [pc, #288]	; (4029e4 <xQueueGenericReceive+0x1a0>)
  4028c2:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4028c4:	f1b8 0f00 	cmp.w	r8, #0
  4028c8:	d11d      	bne.n	402906 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4028ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4028cc:	3b01      	subs	r3, #1
  4028ce:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4028d0:	6823      	ldr	r3, [r4, #0]
  4028d2:	b913      	cbnz	r3, 4028da <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4028d4:	4b44      	ldr	r3, [pc, #272]	; (4029e8 <xQueueGenericReceive+0x1a4>)
  4028d6:	4798      	blx	r3
  4028d8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4028da:	6923      	ldr	r3, [r4, #16]
  4028dc:	b16b      	cbz	r3, 4028fa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4028de:	f104 0010 	add.w	r0, r4, #16
  4028e2:	4b42      	ldr	r3, [pc, #264]	; (4029ec <xQueueGenericReceive+0x1a8>)
  4028e4:	4798      	blx	r3
  4028e6:	2801      	cmp	r0, #1
  4028e8:	d107      	bne.n	4028fa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4028ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4028ee:	4b40      	ldr	r3, [pc, #256]	; (4029f0 <xQueueGenericReceive+0x1ac>)
  4028f0:	601a      	str	r2, [r3, #0]
  4028f2:	f3bf 8f4f 	dsb	sy
  4028f6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4028fa:	4b3e      	ldr	r3, [pc, #248]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  4028fc:	4798      	blx	r3
				return pdPASS;
  4028fe:	2001      	movs	r0, #1
}
  402900:	b004      	add	sp, #16
  402902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402906:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402908:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40290a:	2b00      	cmp	r3, #0
  40290c:	d0f5      	beq.n	4028fa <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40290e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402912:	4b36      	ldr	r3, [pc, #216]	; (4029ec <xQueueGenericReceive+0x1a8>)
  402914:	4798      	blx	r3
  402916:	2800      	cmp	r0, #0
  402918:	d0ef      	beq.n	4028fa <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40291e:	4b34      	ldr	r3, [pc, #208]	; (4029f0 <xQueueGenericReceive+0x1ac>)
  402920:	601a      	str	r2, [r3, #0]
  402922:	f3bf 8f4f 	dsb	sy
  402926:	f3bf 8f6f 	isb	sy
  40292a:	e7e6      	b.n	4028fa <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  40292c:	4b31      	ldr	r3, [pc, #196]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  40292e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402930:	2000      	movs	r0, #0
  402932:	e7e5      	b.n	402900 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402934:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402936:	6860      	ldr	r0, [r4, #4]
  402938:	4b2f      	ldr	r3, [pc, #188]	; (4029f8 <xQueueGenericReceive+0x1b4>)
  40293a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40293c:	4b2d      	ldr	r3, [pc, #180]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  40293e:	4798      	blx	r3
  402940:	e030      	b.n	4029a4 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402942:	4620      	mov	r0, r4
  402944:	4b2d      	ldr	r3, [pc, #180]	; (4029fc <xQueueGenericReceive+0x1b8>)
  402946:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402948:	4b2d      	ldr	r3, [pc, #180]	; (402a00 <xQueueGenericReceive+0x1bc>)
  40294a:	4798      	blx	r3
  40294c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40294e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402952:	2b00      	cmp	r3, #0
  402954:	d1b1      	bne.n	4028ba <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402956:	9b01      	ldr	r3, [sp, #4]
  402958:	2b00      	cmp	r3, #0
  40295a:	d0e7      	beq.n	40292c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  40295c:	b90e      	cbnz	r6, 402962 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40295e:	a802      	add	r0, sp, #8
  402960:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402962:	4b24      	ldr	r3, [pc, #144]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  402964:	4798      	blx	r3
		vTaskSuspendAll();
  402966:	4b27      	ldr	r3, [pc, #156]	; (402a04 <xQueueGenericReceive+0x1c0>)
  402968:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40296a:	47a8      	blx	r5
  40296c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40296e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402972:	d101      	bne.n	402978 <xQueueGenericReceive+0x134>
  402974:	2300      	movs	r3, #0
  402976:	6463      	str	r3, [r4, #68]	; 0x44
  402978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40297a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40297e:	d101      	bne.n	402984 <xQueueGenericReceive+0x140>
  402980:	2300      	movs	r3, #0
  402982:	64a3      	str	r3, [r4, #72]	; 0x48
  402984:	4b1b      	ldr	r3, [pc, #108]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  402986:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402988:	a901      	add	r1, sp, #4
  40298a:	a802      	add	r0, sp, #8
  40298c:	4b1e      	ldr	r3, [pc, #120]	; (402a08 <xQueueGenericReceive+0x1c4>)
  40298e:	4798      	blx	r3
  402990:	b9e8      	cbnz	r0, 4029ce <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402992:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402994:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402996:	4b17      	ldr	r3, [pc, #92]	; (4029f4 <xQueueGenericReceive+0x1b0>)
  402998:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40299a:	2e00      	cmp	r6, #0
  40299c:	d1d1      	bne.n	402942 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40299e:	6823      	ldr	r3, [r4, #0]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d0c7      	beq.n	402934 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4029a4:	9901      	ldr	r1, [sp, #4]
  4029a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4029aa:	4b18      	ldr	r3, [pc, #96]	; (402a0c <xQueueGenericReceive+0x1c8>)
  4029ac:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4029ae:	4620      	mov	r0, r4
  4029b0:	4b12      	ldr	r3, [pc, #72]	; (4029fc <xQueueGenericReceive+0x1b8>)
  4029b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4029b4:	4b12      	ldr	r3, [pc, #72]	; (402a00 <xQueueGenericReceive+0x1bc>)
  4029b6:	4798      	blx	r3
  4029b8:	2800      	cmp	r0, #0
  4029ba:	d1c7      	bne.n	40294c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4029bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4029c0:	f8c9 3000 	str.w	r3, [r9]
  4029c4:	f3bf 8f4f 	dsb	sy
  4029c8:	f3bf 8f6f 	isb	sy
  4029cc:	e7be      	b.n	40294c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4029ce:	4620      	mov	r0, r4
  4029d0:	4b0a      	ldr	r3, [pc, #40]	; (4029fc <xQueueGenericReceive+0x1b8>)
  4029d2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4029d4:	4b0a      	ldr	r3, [pc, #40]	; (402a00 <xQueueGenericReceive+0x1bc>)
  4029d6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4029d8:	2000      	movs	r0, #0
  4029da:	e791      	b.n	402900 <xQueueGenericReceive+0xbc>
  4029dc:	004034d5 	.word	0x004034d5
  4029e0:	00401fc5 	.word	0x00401fc5
  4029e4:	00402385 	.word	0x00402385
  4029e8:	00403655 	.word	0x00403655
  4029ec:	0040336d 	.word	0x0040336d
  4029f0:	e000ed04 	.word	0xe000ed04
  4029f4:	00402011 	.word	0x00402011
  4029f8:	004034f5 	.word	0x004034f5
  4029fc:	004023ad 	.word	0x004023ad
  402a00:	00402f51 	.word	0x00402f51
  402a04:	00402de9 	.word	0x00402de9
  402a08:	00403435 	.word	0x00403435
  402a0c:	00403269 	.word	0x00403269
  402a10:	00403405 	.word	0x00403405

00402a14 <vQueueAddToRegistry>:
	{
  402a14:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402a16:	4b0b      	ldr	r3, [pc, #44]	; (402a44 <vQueueAddToRegistry+0x30>)
  402a18:	681b      	ldr	r3, [r3, #0]
  402a1a:	b153      	cbz	r3, 402a32 <vQueueAddToRegistry+0x1e>
  402a1c:	2301      	movs	r3, #1
  402a1e:	4c09      	ldr	r4, [pc, #36]	; (402a44 <vQueueAddToRegistry+0x30>)
  402a20:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402a24:	b132      	cbz	r2, 402a34 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402a26:	3301      	adds	r3, #1
  402a28:	2b08      	cmp	r3, #8
  402a2a:	d1f9      	bne.n	402a20 <vQueueAddToRegistry+0xc>
	}
  402a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402a30:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402a32:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402a34:	4a03      	ldr	r2, [pc, #12]	; (402a44 <vQueueAddToRegistry+0x30>)
  402a36:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402a3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402a3e:	6058      	str	r0, [r3, #4]
				break;
  402a40:	e7f4      	b.n	402a2c <vQueueAddToRegistry+0x18>
  402a42:	bf00      	nop
  402a44:	20400de0 	.word	0x20400de0

00402a48 <vQueueWaitForMessageRestricted>:
	{
  402a48:	b570      	push	{r4, r5, r6, lr}
  402a4a:	4604      	mov	r4, r0
  402a4c:	460d      	mov	r5, r1
  402a4e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402a50:	4b0f      	ldr	r3, [pc, #60]	; (402a90 <vQueueWaitForMessageRestricted+0x48>)
  402a52:	4798      	blx	r3
  402a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402a56:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a5a:	d00b      	beq.n	402a74 <vQueueWaitForMessageRestricted+0x2c>
  402a5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a62:	d00a      	beq.n	402a7a <vQueueWaitForMessageRestricted+0x32>
  402a64:	4b0b      	ldr	r3, [pc, #44]	; (402a94 <vQueueWaitForMessageRestricted+0x4c>)
  402a66:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a6a:	b14b      	cbz	r3, 402a80 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402a6c:	4620      	mov	r0, r4
  402a6e:	4b0a      	ldr	r3, [pc, #40]	; (402a98 <vQueueWaitForMessageRestricted+0x50>)
  402a70:	4798      	blx	r3
  402a72:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402a74:	2300      	movs	r3, #0
  402a76:	6463      	str	r3, [r4, #68]	; 0x44
  402a78:	e7f0      	b.n	402a5c <vQueueWaitForMessageRestricted+0x14>
  402a7a:	2300      	movs	r3, #0
  402a7c:	64a3      	str	r3, [r4, #72]	; 0x48
  402a7e:	e7f1      	b.n	402a64 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402a80:	4632      	mov	r2, r6
  402a82:	4629      	mov	r1, r5
  402a84:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a88:	4b04      	ldr	r3, [pc, #16]	; (402a9c <vQueueWaitForMessageRestricted+0x54>)
  402a8a:	4798      	blx	r3
  402a8c:	e7ee      	b.n	402a6c <vQueueWaitForMessageRestricted+0x24>
  402a8e:	bf00      	nop
  402a90:	00401fc5 	.word	0x00401fc5
  402a94:	00402011 	.word	0x00402011
  402a98:	004023ad 	.word	0x004023ad
  402a9c:	004032ed 	.word	0x004032ed

00402aa0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402aa0:	4b08      	ldr	r3, [pc, #32]	; (402ac4 <prvResetNextTaskUnblockTime+0x24>)
  402aa2:	681b      	ldr	r3, [r3, #0]
  402aa4:	681b      	ldr	r3, [r3, #0]
  402aa6:	b13b      	cbz	r3, 402ab8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402aa8:	4b06      	ldr	r3, [pc, #24]	; (402ac4 <prvResetNextTaskUnblockTime+0x24>)
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402aae:	68db      	ldr	r3, [r3, #12]
  402ab0:	685a      	ldr	r2, [r3, #4]
  402ab2:	4b05      	ldr	r3, [pc, #20]	; (402ac8 <prvResetNextTaskUnblockTime+0x28>)
  402ab4:	601a      	str	r2, [r3, #0]
  402ab6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402ab8:	f04f 32ff 	mov.w	r2, #4294967295
  402abc:	4b02      	ldr	r3, [pc, #8]	; (402ac8 <prvResetNextTaskUnblockTime+0x28>)
  402abe:	601a      	str	r2, [r3, #0]
  402ac0:	4770      	bx	lr
  402ac2:	bf00      	nop
  402ac4:	20400c6c 	.word	0x20400c6c
  402ac8:	20400d18 	.word	0x20400d18

00402acc <prvAddCurrentTaskToDelayedList>:
{
  402acc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402ace:	4b0f      	ldr	r3, [pc, #60]	; (402b0c <prvAddCurrentTaskToDelayedList+0x40>)
  402ad0:	681b      	ldr	r3, [r3, #0]
  402ad2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402ad4:	4b0e      	ldr	r3, [pc, #56]	; (402b10 <prvAddCurrentTaskToDelayedList+0x44>)
  402ad6:	681b      	ldr	r3, [r3, #0]
  402ad8:	4298      	cmp	r0, r3
  402ada:	d30e      	bcc.n	402afa <prvAddCurrentTaskToDelayedList+0x2e>
  402adc:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402ade:	4b0d      	ldr	r3, [pc, #52]	; (402b14 <prvAddCurrentTaskToDelayedList+0x48>)
  402ae0:	6818      	ldr	r0, [r3, #0]
  402ae2:	4b0a      	ldr	r3, [pc, #40]	; (402b0c <prvAddCurrentTaskToDelayedList+0x40>)
  402ae4:	6819      	ldr	r1, [r3, #0]
  402ae6:	3104      	adds	r1, #4
  402ae8:	4b0b      	ldr	r3, [pc, #44]	; (402b18 <prvAddCurrentTaskToDelayedList+0x4c>)
  402aea:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402aec:	4b0b      	ldr	r3, [pc, #44]	; (402b1c <prvAddCurrentTaskToDelayedList+0x50>)
  402aee:	681b      	ldr	r3, [r3, #0]
  402af0:	429c      	cmp	r4, r3
  402af2:	d201      	bcs.n	402af8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402af4:	4b09      	ldr	r3, [pc, #36]	; (402b1c <prvAddCurrentTaskToDelayedList+0x50>)
  402af6:	601c      	str	r4, [r3, #0]
  402af8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402afa:	4b09      	ldr	r3, [pc, #36]	; (402b20 <prvAddCurrentTaskToDelayedList+0x54>)
  402afc:	6818      	ldr	r0, [r3, #0]
  402afe:	4b03      	ldr	r3, [pc, #12]	; (402b0c <prvAddCurrentTaskToDelayedList+0x40>)
  402b00:	6819      	ldr	r1, [r3, #0]
  402b02:	3104      	adds	r1, #4
  402b04:	4b04      	ldr	r3, [pc, #16]	; (402b18 <prvAddCurrentTaskToDelayedList+0x4c>)
  402b06:	4798      	blx	r3
  402b08:	bd10      	pop	{r4, pc}
  402b0a:	bf00      	nop
  402b0c:	20400c68 	.word	0x20400c68
  402b10:	20400d60 	.word	0x20400d60
  402b14:	20400c6c 	.word	0x20400c6c
  402b18:	00401ead 	.word	0x00401ead
  402b1c:	20400d18 	.word	0x20400d18
  402b20:	20400c70 	.word	0x20400c70

00402b24 <xTaskGenericCreate>:
{
  402b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b28:	b083      	sub	sp, #12
  402b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402b2c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402b30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402b32:	b160      	cbz	r0, 402b4e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402b34:	2d04      	cmp	r5, #4
  402b36:	d915      	bls.n	402b64 <xTaskGenericCreate+0x40>
  402b38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b3c:	b672      	cpsid	i
  402b3e:	f383 8811 	msr	BASEPRI, r3
  402b42:	f3bf 8f6f 	isb	sy
  402b46:	f3bf 8f4f 	dsb	sy
  402b4a:	b662      	cpsie	i
  402b4c:	e7fe      	b.n	402b4c <xTaskGenericCreate+0x28>
  402b4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b52:	b672      	cpsid	i
  402b54:	f383 8811 	msr	BASEPRI, r3
  402b58:	f3bf 8f6f 	isb	sy
  402b5c:	f3bf 8f4f 	dsb	sy
  402b60:	b662      	cpsie	i
  402b62:	e7fe      	b.n	402b62 <xTaskGenericCreate+0x3e>
  402b64:	9001      	str	r0, [sp, #4]
  402b66:	4698      	mov	r8, r3
  402b68:	4691      	mov	r9, r2
  402b6a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b6c:	b936      	cbnz	r6, 402b7c <xTaskGenericCreate+0x58>
  402b6e:	0090      	lsls	r0, r2, #2
  402b70:	4b62      	ldr	r3, [pc, #392]	; (402cfc <xTaskGenericCreate+0x1d8>)
  402b72:	4798      	blx	r3
		if( pxStack != NULL )
  402b74:	4606      	mov	r6, r0
  402b76:	2800      	cmp	r0, #0
  402b78:	f000 809e 	beq.w	402cb8 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402b7c:	2058      	movs	r0, #88	; 0x58
  402b7e:	4b5f      	ldr	r3, [pc, #380]	; (402cfc <xTaskGenericCreate+0x1d8>)
  402b80:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402b82:	4604      	mov	r4, r0
  402b84:	2800      	cmp	r0, #0
  402b86:	f000 8094 	beq.w	402cb2 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402b8a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402b8c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402b90:	21a5      	movs	r1, #165	; 0xa5
  402b92:	4630      	mov	r0, r6
  402b94:	4b5a      	ldr	r3, [pc, #360]	; (402d00 <xTaskGenericCreate+0x1dc>)
  402b96:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402b98:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402b9c:	444e      	add	r6, r9
  402b9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402ba0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402ba4:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402ba8:	783b      	ldrb	r3, [r7, #0]
  402baa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402bae:	783b      	ldrb	r3, [r7, #0]
  402bb0:	2b00      	cmp	r3, #0
  402bb2:	f040 8084 	bne.w	402cbe <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402bb6:	2700      	movs	r7, #0
  402bb8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402bbc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402bbe:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402bc0:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402bc2:	f104 0904 	add.w	r9, r4, #4
  402bc6:	4648      	mov	r0, r9
  402bc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 402d50 <xTaskGenericCreate+0x22c>
  402bcc:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402bce:	f104 0018 	add.w	r0, r4, #24
  402bd2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402bd4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bd6:	f1c5 0305 	rsb	r3, r5, #5
  402bda:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402bdc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402bde:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402be0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402be4:	4642      	mov	r2, r8
  402be6:	9901      	ldr	r1, [sp, #4]
  402be8:	4630      	mov	r0, r6
  402bea:	4b46      	ldr	r3, [pc, #280]	; (402d04 <xTaskGenericCreate+0x1e0>)
  402bec:	4798      	blx	r3
  402bee:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402bf0:	f1ba 0f00 	cmp.w	sl, #0
  402bf4:	d001      	beq.n	402bfa <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402bf6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402bfa:	4b43      	ldr	r3, [pc, #268]	; (402d08 <xTaskGenericCreate+0x1e4>)
  402bfc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402bfe:	4a43      	ldr	r2, [pc, #268]	; (402d0c <xTaskGenericCreate+0x1e8>)
  402c00:	6813      	ldr	r3, [r2, #0]
  402c02:	3301      	adds	r3, #1
  402c04:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402c06:	4b42      	ldr	r3, [pc, #264]	; (402d10 <xTaskGenericCreate+0x1ec>)
  402c08:	681b      	ldr	r3, [r3, #0]
  402c0a:	2b00      	cmp	r3, #0
  402c0c:	d166      	bne.n	402cdc <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402c0e:	4b40      	ldr	r3, [pc, #256]	; (402d10 <xTaskGenericCreate+0x1ec>)
  402c10:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402c12:	6813      	ldr	r3, [r2, #0]
  402c14:	2b01      	cmp	r3, #1
  402c16:	d121      	bne.n	402c5c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402c18:	4f3e      	ldr	r7, [pc, #248]	; (402d14 <xTaskGenericCreate+0x1f0>)
  402c1a:	4638      	mov	r0, r7
  402c1c:	4e3e      	ldr	r6, [pc, #248]	; (402d18 <xTaskGenericCreate+0x1f4>)
  402c1e:	47b0      	blx	r6
  402c20:	f107 0014 	add.w	r0, r7, #20
  402c24:	47b0      	blx	r6
  402c26:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402c2a:	47b0      	blx	r6
  402c2c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402c30:	47b0      	blx	r6
  402c32:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402c36:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402c38:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402d54 <xTaskGenericCreate+0x230>
  402c3c:	4640      	mov	r0, r8
  402c3e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402c40:	4f36      	ldr	r7, [pc, #216]	; (402d1c <xTaskGenericCreate+0x1f8>)
  402c42:	4638      	mov	r0, r7
  402c44:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402c46:	4836      	ldr	r0, [pc, #216]	; (402d20 <xTaskGenericCreate+0x1fc>)
  402c48:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402c4a:	4836      	ldr	r0, [pc, #216]	; (402d24 <xTaskGenericCreate+0x200>)
  402c4c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402c4e:	4836      	ldr	r0, [pc, #216]	; (402d28 <xTaskGenericCreate+0x204>)
  402c50:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402c52:	4b36      	ldr	r3, [pc, #216]	; (402d2c <xTaskGenericCreate+0x208>)
  402c54:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402c58:	4b35      	ldr	r3, [pc, #212]	; (402d30 <xTaskGenericCreate+0x20c>)
  402c5a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402c5c:	4a35      	ldr	r2, [pc, #212]	; (402d34 <xTaskGenericCreate+0x210>)
  402c5e:	6813      	ldr	r3, [r2, #0]
  402c60:	3301      	adds	r3, #1
  402c62:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402c64:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402c66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c68:	4a33      	ldr	r2, [pc, #204]	; (402d38 <xTaskGenericCreate+0x214>)
  402c6a:	6811      	ldr	r1, [r2, #0]
  402c6c:	2301      	movs	r3, #1
  402c6e:	4083      	lsls	r3, r0
  402c70:	430b      	orrs	r3, r1
  402c72:	6013      	str	r3, [r2, #0]
  402c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c78:	4649      	mov	r1, r9
  402c7a:	4b26      	ldr	r3, [pc, #152]	; (402d14 <xTaskGenericCreate+0x1f0>)
  402c7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c80:	4b2e      	ldr	r3, [pc, #184]	; (402d3c <xTaskGenericCreate+0x218>)
  402c82:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402c84:	4b2e      	ldr	r3, [pc, #184]	; (402d40 <xTaskGenericCreate+0x21c>)
  402c86:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402c88:	4b2e      	ldr	r3, [pc, #184]	; (402d44 <xTaskGenericCreate+0x220>)
  402c8a:	681b      	ldr	r3, [r3, #0]
  402c8c:	2b00      	cmp	r3, #0
  402c8e:	d031      	beq.n	402cf4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402c90:	4b1f      	ldr	r3, [pc, #124]	; (402d10 <xTaskGenericCreate+0x1ec>)
  402c92:	681b      	ldr	r3, [r3, #0]
  402c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c96:	429d      	cmp	r5, r3
  402c98:	d92e      	bls.n	402cf8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c9e:	4b2a      	ldr	r3, [pc, #168]	; (402d48 <xTaskGenericCreate+0x224>)
  402ca0:	601a      	str	r2, [r3, #0]
  402ca2:	f3bf 8f4f 	dsb	sy
  402ca6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402caa:	2001      	movs	r0, #1
}
  402cac:	b003      	add	sp, #12
  402cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402cb2:	4630      	mov	r0, r6
  402cb4:	4b25      	ldr	r3, [pc, #148]	; (402d4c <xTaskGenericCreate+0x228>)
  402cb6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402cb8:	f04f 30ff 	mov.w	r0, #4294967295
  402cbc:	e7f6      	b.n	402cac <xTaskGenericCreate+0x188>
  402cbe:	463b      	mov	r3, r7
  402cc0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402cc4:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402cc6:	7859      	ldrb	r1, [r3, #1]
  402cc8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402ccc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402cd0:	2900      	cmp	r1, #0
  402cd2:	f43f af70 	beq.w	402bb6 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402cd6:	42bb      	cmp	r3, r7
  402cd8:	d1f5      	bne.n	402cc6 <xTaskGenericCreate+0x1a2>
  402cda:	e76c      	b.n	402bb6 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402cdc:	4b19      	ldr	r3, [pc, #100]	; (402d44 <xTaskGenericCreate+0x220>)
  402cde:	681b      	ldr	r3, [r3, #0]
  402ce0:	2b00      	cmp	r3, #0
  402ce2:	d1bb      	bne.n	402c5c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402ce4:	4b0a      	ldr	r3, [pc, #40]	; (402d10 <xTaskGenericCreate+0x1ec>)
  402ce6:	681b      	ldr	r3, [r3, #0]
  402ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cea:	429d      	cmp	r5, r3
  402cec:	d3b6      	bcc.n	402c5c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402cee:	4b08      	ldr	r3, [pc, #32]	; (402d10 <xTaskGenericCreate+0x1ec>)
  402cf0:	601c      	str	r4, [r3, #0]
  402cf2:	e7b3      	b.n	402c5c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402cf4:	2001      	movs	r0, #1
  402cf6:	e7d9      	b.n	402cac <xTaskGenericCreate+0x188>
  402cf8:	2001      	movs	r0, #1
	return xReturn;
  402cfa:	e7d7      	b.n	402cac <xTaskGenericCreate+0x188>
  402cfc:	00402221 	.word	0x00402221
  402d00:	004073ed 	.word	0x004073ed
  402d04:	00401f79 	.word	0x00401f79
  402d08:	00401fc5 	.word	0x00401fc5
  402d0c:	20400cd8 	.word	0x20400cd8
  402d10:	20400c68 	.word	0x20400c68
  402d14:	20400c74 	.word	0x20400c74
  402d18:	00401e79 	.word	0x00401e79
  402d1c:	20400d04 	.word	0x20400d04
  402d20:	20400d20 	.word	0x20400d20
  402d24:	20400d4c 	.word	0x20400d4c
  402d28:	20400d38 	.word	0x20400d38
  402d2c:	20400c6c 	.word	0x20400c6c
  402d30:	20400c70 	.word	0x20400c70
  402d34:	20400ce4 	.word	0x20400ce4
  402d38:	20400cec 	.word	0x20400cec
  402d3c:	00401e95 	.word	0x00401e95
  402d40:	00402011 	.word	0x00402011
  402d44:	20400d34 	.word	0x20400d34
  402d48:	e000ed04 	.word	0xe000ed04
  402d4c:	00402251 	.word	0x00402251
  402d50:	00401e8f 	.word	0x00401e8f
  402d54:	20400cf0 	.word	0x20400cf0

00402d58 <vTaskStartScheduler>:
{
  402d58:	b510      	push	{r4, lr}
  402d5a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402d5c:	2300      	movs	r3, #0
  402d5e:	9303      	str	r3, [sp, #12]
  402d60:	9302      	str	r3, [sp, #8]
  402d62:	9301      	str	r3, [sp, #4]
  402d64:	9300      	str	r3, [sp, #0]
  402d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402d6a:	4917      	ldr	r1, [pc, #92]	; (402dc8 <vTaskStartScheduler+0x70>)
  402d6c:	4817      	ldr	r0, [pc, #92]	; (402dcc <vTaskStartScheduler+0x74>)
  402d6e:	4c18      	ldr	r4, [pc, #96]	; (402dd0 <vTaskStartScheduler+0x78>)
  402d70:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402d72:	2801      	cmp	r0, #1
  402d74:	d00b      	beq.n	402d8e <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402d76:	bb20      	cbnz	r0, 402dc2 <vTaskStartScheduler+0x6a>
  402d78:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d7c:	b672      	cpsid	i
  402d7e:	f383 8811 	msr	BASEPRI, r3
  402d82:	f3bf 8f6f 	isb	sy
  402d86:	f3bf 8f4f 	dsb	sy
  402d8a:	b662      	cpsie	i
  402d8c:	e7fe      	b.n	402d8c <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  402d8e:	4b11      	ldr	r3, [pc, #68]	; (402dd4 <vTaskStartScheduler+0x7c>)
  402d90:	4798      	blx	r3
	if( xReturn == pdPASS )
  402d92:	2801      	cmp	r0, #1
  402d94:	d1ef      	bne.n	402d76 <vTaskStartScheduler+0x1e>
  402d96:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d9a:	b672      	cpsid	i
  402d9c:	f383 8811 	msr	BASEPRI, r3
  402da0:	f3bf 8f6f 	isb	sy
  402da4:	f3bf 8f4f 	dsb	sy
  402da8:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402daa:	f04f 32ff 	mov.w	r2, #4294967295
  402dae:	4b0a      	ldr	r3, [pc, #40]	; (402dd8 <vTaskStartScheduler+0x80>)
  402db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402db2:	2201      	movs	r2, #1
  402db4:	4b09      	ldr	r3, [pc, #36]	; (402ddc <vTaskStartScheduler+0x84>)
  402db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402db8:	2200      	movs	r2, #0
  402dba:	4b09      	ldr	r3, [pc, #36]	; (402de0 <vTaskStartScheduler+0x88>)
  402dbc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402dbe:	4b09      	ldr	r3, [pc, #36]	; (402de4 <vTaskStartScheduler+0x8c>)
  402dc0:	4798      	blx	r3
}
  402dc2:	b004      	add	sp, #16
  402dc4:	bd10      	pop	{r4, pc}
  402dc6:	bf00      	nop
  402dc8:	0040bc44 	.word	0x0040bc44
  402dcc:	00403101 	.word	0x00403101
  402dd0:	00402b25 	.word	0x00402b25
  402dd4:	00403741 	.word	0x00403741
  402dd8:	20400d18 	.word	0x20400d18
  402ddc:	20400d34 	.word	0x20400d34
  402de0:	20400d60 	.word	0x20400d60
  402de4:	004020f9 	.word	0x004020f9

00402de8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402de8:	4a02      	ldr	r2, [pc, #8]	; (402df4 <vTaskSuspendAll+0xc>)
  402dea:	6813      	ldr	r3, [r2, #0]
  402dec:	3301      	adds	r3, #1
  402dee:	6013      	str	r3, [r2, #0]
  402df0:	4770      	bx	lr
  402df2:	bf00      	nop
  402df4:	20400ce0 	.word	0x20400ce0

00402df8 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402df8:	4b01      	ldr	r3, [pc, #4]	; (402e00 <xTaskGetTickCount+0x8>)
  402dfa:	6818      	ldr	r0, [r3, #0]
}
  402dfc:	4770      	bx	lr
  402dfe:	bf00      	nop
  402e00:	20400d60 	.word	0x20400d60

00402e04 <xTaskIncrementTick>:
{
  402e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e08:	4b42      	ldr	r3, [pc, #264]	; (402f14 <xTaskIncrementTick+0x110>)
  402e0a:	681b      	ldr	r3, [r3, #0]
  402e0c:	2b00      	cmp	r3, #0
  402e0e:	d178      	bne.n	402f02 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402e10:	4b41      	ldr	r3, [pc, #260]	; (402f18 <xTaskIncrementTick+0x114>)
  402e12:	681a      	ldr	r2, [r3, #0]
  402e14:	3201      	adds	r2, #1
  402e16:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402e18:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402e1a:	b9d6      	cbnz	r6, 402e52 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402e1c:	4b3f      	ldr	r3, [pc, #252]	; (402f1c <xTaskIncrementTick+0x118>)
  402e1e:	681b      	ldr	r3, [r3, #0]
  402e20:	681b      	ldr	r3, [r3, #0]
  402e22:	b153      	cbz	r3, 402e3a <xTaskIncrementTick+0x36>
  402e24:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e28:	b672      	cpsid	i
  402e2a:	f383 8811 	msr	BASEPRI, r3
  402e2e:	f3bf 8f6f 	isb	sy
  402e32:	f3bf 8f4f 	dsb	sy
  402e36:	b662      	cpsie	i
  402e38:	e7fe      	b.n	402e38 <xTaskIncrementTick+0x34>
  402e3a:	4a38      	ldr	r2, [pc, #224]	; (402f1c <xTaskIncrementTick+0x118>)
  402e3c:	6811      	ldr	r1, [r2, #0]
  402e3e:	4b38      	ldr	r3, [pc, #224]	; (402f20 <xTaskIncrementTick+0x11c>)
  402e40:	6818      	ldr	r0, [r3, #0]
  402e42:	6010      	str	r0, [r2, #0]
  402e44:	6019      	str	r1, [r3, #0]
  402e46:	4a37      	ldr	r2, [pc, #220]	; (402f24 <xTaskIncrementTick+0x120>)
  402e48:	6813      	ldr	r3, [r2, #0]
  402e4a:	3301      	adds	r3, #1
  402e4c:	6013      	str	r3, [r2, #0]
  402e4e:	4b36      	ldr	r3, [pc, #216]	; (402f28 <xTaskIncrementTick+0x124>)
  402e50:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402e52:	4b36      	ldr	r3, [pc, #216]	; (402f2c <xTaskIncrementTick+0x128>)
  402e54:	681b      	ldr	r3, [r3, #0]
  402e56:	429e      	cmp	r6, r3
  402e58:	d218      	bcs.n	402e8c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402e5a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402e5c:	4b34      	ldr	r3, [pc, #208]	; (402f30 <xTaskIncrementTick+0x12c>)
  402e5e:	681b      	ldr	r3, [r3, #0]
  402e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e66:	4a33      	ldr	r2, [pc, #204]	; (402f34 <xTaskIncrementTick+0x130>)
  402e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402e6c:	2b02      	cmp	r3, #2
  402e6e:	bf28      	it	cs
  402e70:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402e72:	4b31      	ldr	r3, [pc, #196]	; (402f38 <xTaskIncrementTick+0x134>)
  402e74:	681b      	ldr	r3, [r3, #0]
  402e76:	b90b      	cbnz	r3, 402e7c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402e78:	4b30      	ldr	r3, [pc, #192]	; (402f3c <xTaskIncrementTick+0x138>)
  402e7a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402e7c:	4b30      	ldr	r3, [pc, #192]	; (402f40 <xTaskIncrementTick+0x13c>)
  402e7e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402e80:	2b00      	cmp	r3, #0
}
  402e82:	bf0c      	ite	eq
  402e84:	4620      	moveq	r0, r4
  402e86:	2001      	movne	r0, #1
  402e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e8c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402e8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402f1c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402e92:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402f4c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402e96:	4f2b      	ldr	r7, [pc, #172]	; (402f44 <xTaskIncrementTick+0x140>)
  402e98:	e01f      	b.n	402eda <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402e9a:	f04f 32ff 	mov.w	r2, #4294967295
  402e9e:	4b23      	ldr	r3, [pc, #140]	; (402f2c <xTaskIncrementTick+0x128>)
  402ea0:	601a      	str	r2, [r3, #0]
						break;
  402ea2:	e7db      	b.n	402e5c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402ea4:	4a21      	ldr	r2, [pc, #132]	; (402f2c <xTaskIncrementTick+0x128>)
  402ea6:	6013      	str	r3, [r2, #0]
							break;
  402ea8:	e7d8      	b.n	402e5c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402eaa:	f105 0018 	add.w	r0, r5, #24
  402eae:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402eb0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402eb2:	683a      	ldr	r2, [r7, #0]
  402eb4:	2301      	movs	r3, #1
  402eb6:	4083      	lsls	r3, r0
  402eb8:	4313      	orrs	r3, r2
  402eba:	603b      	str	r3, [r7, #0]
  402ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ec0:	4651      	mov	r1, sl
  402ec2:	4b1c      	ldr	r3, [pc, #112]	; (402f34 <xTaskIncrementTick+0x130>)
  402ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ec8:	4b1f      	ldr	r3, [pc, #124]	; (402f48 <xTaskIncrementTick+0x144>)
  402eca:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402ecc:	4b18      	ldr	r3, [pc, #96]	; (402f30 <xTaskIncrementTick+0x12c>)
  402ece:	681b      	ldr	r3, [r3, #0]
  402ed0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402ed4:	429a      	cmp	r2, r3
  402ed6:	bf28      	it	cs
  402ed8:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402eda:	f8d9 3000 	ldr.w	r3, [r9]
  402ede:	681b      	ldr	r3, [r3, #0]
  402ee0:	2b00      	cmp	r3, #0
  402ee2:	d0da      	beq.n	402e9a <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402ee4:	f8d9 3000 	ldr.w	r3, [r9]
  402ee8:	68db      	ldr	r3, [r3, #12]
  402eea:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402eec:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402eee:	429e      	cmp	r6, r3
  402ef0:	d3d8      	bcc.n	402ea4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402ef2:	f105 0a04 	add.w	sl, r5, #4
  402ef6:	4650      	mov	r0, sl
  402ef8:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402efa:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402efc:	2b00      	cmp	r3, #0
  402efe:	d1d4      	bne.n	402eaa <xTaskIncrementTick+0xa6>
  402f00:	e7d6      	b.n	402eb0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402f02:	4a0d      	ldr	r2, [pc, #52]	; (402f38 <xTaskIncrementTick+0x134>)
  402f04:	6813      	ldr	r3, [r2, #0]
  402f06:	3301      	adds	r3, #1
  402f08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402f0a:	4b0c      	ldr	r3, [pc, #48]	; (402f3c <xTaskIncrementTick+0x138>)
  402f0c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402f0e:	2400      	movs	r4, #0
  402f10:	e7b4      	b.n	402e7c <xTaskIncrementTick+0x78>
  402f12:	bf00      	nop
  402f14:	20400ce0 	.word	0x20400ce0
  402f18:	20400d60 	.word	0x20400d60
  402f1c:	20400c6c 	.word	0x20400c6c
  402f20:	20400c70 	.word	0x20400c70
  402f24:	20400d1c 	.word	0x20400d1c
  402f28:	00402aa1 	.word	0x00402aa1
  402f2c:	20400d18 	.word	0x20400d18
  402f30:	20400c68 	.word	0x20400c68
  402f34:	20400c74 	.word	0x20400c74
  402f38:	20400cdc 	.word	0x20400cdc
  402f3c:	00403d7d 	.word	0x00403d7d
  402f40:	20400d64 	.word	0x20400d64
  402f44:	20400cec 	.word	0x20400cec
  402f48:	00401e95 	.word	0x00401e95
  402f4c:	00401ee1 	.word	0x00401ee1

00402f50 <xTaskResumeAll>:
{
  402f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402f54:	4b38      	ldr	r3, [pc, #224]	; (403038 <xTaskResumeAll+0xe8>)
  402f56:	681b      	ldr	r3, [r3, #0]
  402f58:	b953      	cbnz	r3, 402f70 <xTaskResumeAll+0x20>
  402f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f5e:	b672      	cpsid	i
  402f60:	f383 8811 	msr	BASEPRI, r3
  402f64:	f3bf 8f6f 	isb	sy
  402f68:	f3bf 8f4f 	dsb	sy
  402f6c:	b662      	cpsie	i
  402f6e:	e7fe      	b.n	402f6e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402f70:	4b32      	ldr	r3, [pc, #200]	; (40303c <xTaskResumeAll+0xec>)
  402f72:	4798      	blx	r3
		--uxSchedulerSuspended;
  402f74:	4b30      	ldr	r3, [pc, #192]	; (403038 <xTaskResumeAll+0xe8>)
  402f76:	681a      	ldr	r2, [r3, #0]
  402f78:	3a01      	subs	r2, #1
  402f7a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402f7c:	681b      	ldr	r3, [r3, #0]
  402f7e:	2b00      	cmp	r3, #0
  402f80:	d155      	bne.n	40302e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402f82:	4b2f      	ldr	r3, [pc, #188]	; (403040 <xTaskResumeAll+0xf0>)
  402f84:	681b      	ldr	r3, [r3, #0]
  402f86:	2b00      	cmp	r3, #0
  402f88:	d132      	bne.n	402ff0 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402f8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402f8c:	4b2d      	ldr	r3, [pc, #180]	; (403044 <xTaskResumeAll+0xf4>)
  402f8e:	4798      	blx	r3
}
  402f90:	4620      	mov	r0, r4
  402f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402f96:	68fb      	ldr	r3, [r7, #12]
  402f98:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402f9a:	f104 0018 	add.w	r0, r4, #24
  402f9e:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402fa0:	f104 0804 	add.w	r8, r4, #4
  402fa4:	4640      	mov	r0, r8
  402fa6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402fa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402faa:	682a      	ldr	r2, [r5, #0]
  402fac:	2301      	movs	r3, #1
  402fae:	4083      	lsls	r3, r0
  402fb0:	4313      	orrs	r3, r2
  402fb2:	602b      	str	r3, [r5, #0]
  402fb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402fb8:	4641      	mov	r1, r8
  402fba:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402fbe:	4b22      	ldr	r3, [pc, #136]	; (403048 <xTaskResumeAll+0xf8>)
  402fc0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402fc2:	4b22      	ldr	r3, [pc, #136]	; (40304c <xTaskResumeAll+0xfc>)
  402fc4:	681b      	ldr	r3, [r3, #0]
  402fc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fca:	429a      	cmp	r2, r3
  402fcc:	d20c      	bcs.n	402fe8 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402fce:	683b      	ldr	r3, [r7, #0]
  402fd0:	2b00      	cmp	r3, #0
  402fd2:	d1e0      	bne.n	402f96 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402fd4:	4b1e      	ldr	r3, [pc, #120]	; (403050 <xTaskResumeAll+0x100>)
  402fd6:	681b      	ldr	r3, [r3, #0]
  402fd8:	b1db      	cbz	r3, 403012 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402fda:	4b1d      	ldr	r3, [pc, #116]	; (403050 <xTaskResumeAll+0x100>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	b1c3      	cbz	r3, 403012 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402fe0:	4e1c      	ldr	r6, [pc, #112]	; (403054 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402fe2:	4d1d      	ldr	r5, [pc, #116]	; (403058 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402fe4:	4c1a      	ldr	r4, [pc, #104]	; (403050 <xTaskResumeAll+0x100>)
  402fe6:	e00e      	b.n	403006 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402fe8:	2201      	movs	r2, #1
  402fea:	4b1b      	ldr	r3, [pc, #108]	; (403058 <xTaskResumeAll+0x108>)
  402fec:	601a      	str	r2, [r3, #0]
  402fee:	e7ee      	b.n	402fce <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402ff0:	4f1a      	ldr	r7, [pc, #104]	; (40305c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402ff2:	4e1b      	ldr	r6, [pc, #108]	; (403060 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402ff4:	4d1b      	ldr	r5, [pc, #108]	; (403064 <xTaskResumeAll+0x114>)
  402ff6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40306c <xTaskResumeAll+0x11c>
  402ffa:	e7e8      	b.n	402fce <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402ffc:	6823      	ldr	r3, [r4, #0]
  402ffe:	3b01      	subs	r3, #1
  403000:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403002:	6823      	ldr	r3, [r4, #0]
  403004:	b12b      	cbz	r3, 403012 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403006:	47b0      	blx	r6
  403008:	2800      	cmp	r0, #0
  40300a:	d0f7      	beq.n	402ffc <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40300c:	2301      	movs	r3, #1
  40300e:	602b      	str	r3, [r5, #0]
  403010:	e7f4      	b.n	402ffc <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  403012:	4b11      	ldr	r3, [pc, #68]	; (403058 <xTaskResumeAll+0x108>)
  403014:	681b      	ldr	r3, [r3, #0]
  403016:	2b01      	cmp	r3, #1
  403018:	d10b      	bne.n	403032 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40301e:	4b12      	ldr	r3, [pc, #72]	; (403068 <xTaskResumeAll+0x118>)
  403020:	601a      	str	r2, [r3, #0]
  403022:	f3bf 8f4f 	dsb	sy
  403026:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40302a:	2401      	movs	r4, #1
  40302c:	e7ae      	b.n	402f8c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40302e:	2400      	movs	r4, #0
  403030:	e7ac      	b.n	402f8c <xTaskResumeAll+0x3c>
  403032:	2400      	movs	r4, #0
  403034:	e7aa      	b.n	402f8c <xTaskResumeAll+0x3c>
  403036:	bf00      	nop
  403038:	20400ce0 	.word	0x20400ce0
  40303c:	00401fc5 	.word	0x00401fc5
  403040:	20400cd8 	.word	0x20400cd8
  403044:	00402011 	.word	0x00402011
  403048:	00401e95 	.word	0x00401e95
  40304c:	20400c68 	.word	0x20400c68
  403050:	20400cdc 	.word	0x20400cdc
  403054:	00402e05 	.word	0x00402e05
  403058:	20400d64 	.word	0x20400d64
  40305c:	20400d20 	.word	0x20400d20
  403060:	00401ee1 	.word	0x00401ee1
  403064:	20400cec 	.word	0x20400cec
  403068:	e000ed04 	.word	0xe000ed04
  40306c:	20400c74 	.word	0x20400c74

00403070 <vTaskDelay>:
	{
  403070:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  403072:	2800      	cmp	r0, #0
  403074:	d029      	beq.n	4030ca <vTaskDelay+0x5a>
  403076:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403078:	4b18      	ldr	r3, [pc, #96]	; (4030dc <vTaskDelay+0x6c>)
  40307a:	681b      	ldr	r3, [r3, #0]
  40307c:	b153      	cbz	r3, 403094 <vTaskDelay+0x24>
  40307e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403082:	b672      	cpsid	i
  403084:	f383 8811 	msr	BASEPRI, r3
  403088:	f3bf 8f6f 	isb	sy
  40308c:	f3bf 8f4f 	dsb	sy
  403090:	b662      	cpsie	i
  403092:	e7fe      	b.n	403092 <vTaskDelay+0x22>
			vTaskSuspendAll();
  403094:	4b12      	ldr	r3, [pc, #72]	; (4030e0 <vTaskDelay+0x70>)
  403096:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  403098:	4b12      	ldr	r3, [pc, #72]	; (4030e4 <vTaskDelay+0x74>)
  40309a:	681b      	ldr	r3, [r3, #0]
  40309c:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40309e:	4b12      	ldr	r3, [pc, #72]	; (4030e8 <vTaskDelay+0x78>)
  4030a0:	6818      	ldr	r0, [r3, #0]
  4030a2:	3004      	adds	r0, #4
  4030a4:	4b11      	ldr	r3, [pc, #68]	; (4030ec <vTaskDelay+0x7c>)
  4030a6:	4798      	blx	r3
  4030a8:	b948      	cbnz	r0, 4030be <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4030aa:	4b0f      	ldr	r3, [pc, #60]	; (4030e8 <vTaskDelay+0x78>)
  4030ac:	681a      	ldr	r2, [r3, #0]
  4030ae:	4910      	ldr	r1, [pc, #64]	; (4030f0 <vTaskDelay+0x80>)
  4030b0:	680b      	ldr	r3, [r1, #0]
  4030b2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4030b4:	2201      	movs	r2, #1
  4030b6:	4082      	lsls	r2, r0
  4030b8:	ea23 0302 	bic.w	r3, r3, r2
  4030bc:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4030be:	4620      	mov	r0, r4
  4030c0:	4b0c      	ldr	r3, [pc, #48]	; (4030f4 <vTaskDelay+0x84>)
  4030c2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4030c4:	4b0c      	ldr	r3, [pc, #48]	; (4030f8 <vTaskDelay+0x88>)
  4030c6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4030c8:	b938      	cbnz	r0, 4030da <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4030ce:	4b0b      	ldr	r3, [pc, #44]	; (4030fc <vTaskDelay+0x8c>)
  4030d0:	601a      	str	r2, [r3, #0]
  4030d2:	f3bf 8f4f 	dsb	sy
  4030d6:	f3bf 8f6f 	isb	sy
  4030da:	bd10      	pop	{r4, pc}
  4030dc:	20400ce0 	.word	0x20400ce0
  4030e0:	00402de9 	.word	0x00402de9
  4030e4:	20400d60 	.word	0x20400d60
  4030e8:	20400c68 	.word	0x20400c68
  4030ec:	00401ee1 	.word	0x00401ee1
  4030f0:	20400cec 	.word	0x20400cec
  4030f4:	00402acd 	.word	0x00402acd
  4030f8:	00402f51 	.word	0x00402f51
  4030fc:	e000ed04 	.word	0xe000ed04

00403100 <prvIdleTask>:
{
  403100:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  403102:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40318c <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403106:	4e19      	ldr	r6, [pc, #100]	; (40316c <prvIdleTask+0x6c>)
				taskYIELD();
  403108:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403190 <prvIdleTask+0x90>
  40310c:	e02a      	b.n	403164 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40310e:	4b18      	ldr	r3, [pc, #96]	; (403170 <prvIdleTask+0x70>)
  403110:	681b      	ldr	r3, [r3, #0]
  403112:	2b01      	cmp	r3, #1
  403114:	d81e      	bhi.n	403154 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403116:	682b      	ldr	r3, [r5, #0]
  403118:	2b00      	cmp	r3, #0
  40311a:	d0f8      	beq.n	40310e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40311c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40311e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403120:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  403122:	2c00      	cmp	r4, #0
  403124:	d0f7      	beq.n	403116 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  403126:	4b13      	ldr	r3, [pc, #76]	; (403174 <prvIdleTask+0x74>)
  403128:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40312a:	68f3      	ldr	r3, [r6, #12]
  40312c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40312e:	1d20      	adds	r0, r4, #4
  403130:	4b11      	ldr	r3, [pc, #68]	; (403178 <prvIdleTask+0x78>)
  403132:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  403134:	4a11      	ldr	r2, [pc, #68]	; (40317c <prvIdleTask+0x7c>)
  403136:	6813      	ldr	r3, [r2, #0]
  403138:	3b01      	subs	r3, #1
  40313a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40313c:	682b      	ldr	r3, [r5, #0]
  40313e:	3b01      	subs	r3, #1
  403140:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  403142:	4b0f      	ldr	r3, [pc, #60]	; (403180 <prvIdleTask+0x80>)
  403144:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  403146:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403148:	f8df a048 	ldr.w	sl, [pc, #72]	; 403194 <prvIdleTask+0x94>
  40314c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40314e:	4620      	mov	r0, r4
  403150:	47d0      	blx	sl
  403152:	e7e0      	b.n	403116 <prvIdleTask+0x16>
				taskYIELD();
  403154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403158:	f8c9 3000 	str.w	r3, [r9]
  40315c:	f3bf 8f4f 	dsb	sy
  403160:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403164:	4d07      	ldr	r5, [pc, #28]	; (403184 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  403166:	4f08      	ldr	r7, [pc, #32]	; (403188 <prvIdleTask+0x88>)
  403168:	e7d5      	b.n	403116 <prvIdleTask+0x16>
  40316a:	bf00      	nop
  40316c:	20400d4c 	.word	0x20400d4c
  403170:	20400c74 	.word	0x20400c74
  403174:	00401fc5 	.word	0x00401fc5
  403178:	00401ee1 	.word	0x00401ee1
  40317c:	20400cd8 	.word	0x20400cd8
  403180:	00402011 	.word	0x00402011
  403184:	20400ce8 	.word	0x20400ce8
  403188:	00402f51 	.word	0x00402f51
  40318c:	00402de9 	.word	0x00402de9
  403190:	e000ed04 	.word	0xe000ed04
  403194:	00402251 	.word	0x00402251

00403198 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403198:	4b2d      	ldr	r3, [pc, #180]	; (403250 <vTaskSwitchContext+0xb8>)
  40319a:	681b      	ldr	r3, [r3, #0]
  40319c:	2b00      	cmp	r3, #0
  40319e:	d12c      	bne.n	4031fa <vTaskSwitchContext+0x62>
{
  4031a0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4031a2:	2200      	movs	r2, #0
  4031a4:	4b2b      	ldr	r3, [pc, #172]	; (403254 <vTaskSwitchContext+0xbc>)
  4031a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4031a8:	4b2b      	ldr	r3, [pc, #172]	; (403258 <vTaskSwitchContext+0xc0>)
  4031aa:	681b      	ldr	r3, [r3, #0]
  4031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031ae:	681a      	ldr	r2, [r3, #0]
  4031b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4031b4:	d103      	bne.n	4031be <vTaskSwitchContext+0x26>
  4031b6:	685a      	ldr	r2, [r3, #4]
  4031b8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4031bc:	d021      	beq.n	403202 <vTaskSwitchContext+0x6a>
  4031be:	4b26      	ldr	r3, [pc, #152]	; (403258 <vTaskSwitchContext+0xc0>)
  4031c0:	6818      	ldr	r0, [r3, #0]
  4031c2:	6819      	ldr	r1, [r3, #0]
  4031c4:	3134      	adds	r1, #52	; 0x34
  4031c6:	4b25      	ldr	r3, [pc, #148]	; (40325c <vTaskSwitchContext+0xc4>)
  4031c8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4031ca:	4b25      	ldr	r3, [pc, #148]	; (403260 <vTaskSwitchContext+0xc8>)
  4031cc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4031ce:	fab3 f383 	clz	r3, r3
  4031d2:	b2db      	uxtb	r3, r3
  4031d4:	f1c3 031f 	rsb	r3, r3, #31
  4031d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4031dc:	4a21      	ldr	r2, [pc, #132]	; (403264 <vTaskSwitchContext+0xcc>)
  4031de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4031e2:	b9ba      	cbnz	r2, 403214 <vTaskSwitchContext+0x7c>
	__asm volatile
  4031e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031e8:	b672      	cpsid	i
  4031ea:	f383 8811 	msr	BASEPRI, r3
  4031ee:	f3bf 8f6f 	isb	sy
  4031f2:	f3bf 8f4f 	dsb	sy
  4031f6:	b662      	cpsie	i
  4031f8:	e7fe      	b.n	4031f8 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4031fa:	2201      	movs	r2, #1
  4031fc:	4b15      	ldr	r3, [pc, #84]	; (403254 <vTaskSwitchContext+0xbc>)
  4031fe:	601a      	str	r2, [r3, #0]
  403200:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403202:	689a      	ldr	r2, [r3, #8]
  403204:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403208:	d1d9      	bne.n	4031be <vTaskSwitchContext+0x26>
  40320a:	68db      	ldr	r3, [r3, #12]
  40320c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403210:	d1d5      	bne.n	4031be <vTaskSwitchContext+0x26>
  403212:	e7da      	b.n	4031ca <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403214:	4a13      	ldr	r2, [pc, #76]	; (403264 <vTaskSwitchContext+0xcc>)
  403216:	0099      	lsls	r1, r3, #2
  403218:	18c8      	adds	r0, r1, r3
  40321a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40321e:	6844      	ldr	r4, [r0, #4]
  403220:	6864      	ldr	r4, [r4, #4]
  403222:	6044      	str	r4, [r0, #4]
  403224:	4419      	add	r1, r3
  403226:	4602      	mov	r2, r0
  403228:	3208      	adds	r2, #8
  40322a:	4294      	cmp	r4, r2
  40322c:	d009      	beq.n	403242 <vTaskSwitchContext+0xaa>
  40322e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403232:	4a0c      	ldr	r2, [pc, #48]	; (403264 <vTaskSwitchContext+0xcc>)
  403234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403238:	685b      	ldr	r3, [r3, #4]
  40323a:	68da      	ldr	r2, [r3, #12]
  40323c:	4b06      	ldr	r3, [pc, #24]	; (403258 <vTaskSwitchContext+0xc0>)
  40323e:	601a      	str	r2, [r3, #0]
  403240:	bd10      	pop	{r4, pc}
  403242:	6860      	ldr	r0, [r4, #4]
  403244:	4a07      	ldr	r2, [pc, #28]	; (403264 <vTaskSwitchContext+0xcc>)
  403246:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40324a:	6050      	str	r0, [r2, #4]
  40324c:	e7ef      	b.n	40322e <vTaskSwitchContext+0x96>
  40324e:	bf00      	nop
  403250:	20400ce0 	.word	0x20400ce0
  403254:	20400d64 	.word	0x20400d64
  403258:	20400c68 	.word	0x20400c68
  40325c:	00403d65 	.word	0x00403d65
  403260:	20400cec 	.word	0x20400cec
  403264:	20400c74 	.word	0x20400c74

00403268 <vTaskPlaceOnEventList>:
{
  403268:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40326a:	b1e0      	cbz	r0, 4032a6 <vTaskPlaceOnEventList+0x3e>
  40326c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40326e:	4d17      	ldr	r5, [pc, #92]	; (4032cc <vTaskPlaceOnEventList+0x64>)
  403270:	6829      	ldr	r1, [r5, #0]
  403272:	3118      	adds	r1, #24
  403274:	4b16      	ldr	r3, [pc, #88]	; (4032d0 <vTaskPlaceOnEventList+0x68>)
  403276:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403278:	6828      	ldr	r0, [r5, #0]
  40327a:	3004      	adds	r0, #4
  40327c:	4b15      	ldr	r3, [pc, #84]	; (4032d4 <vTaskPlaceOnEventList+0x6c>)
  40327e:	4798      	blx	r3
  403280:	b940      	cbnz	r0, 403294 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403282:	682a      	ldr	r2, [r5, #0]
  403284:	4914      	ldr	r1, [pc, #80]	; (4032d8 <vTaskPlaceOnEventList+0x70>)
  403286:	680b      	ldr	r3, [r1, #0]
  403288:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40328a:	2201      	movs	r2, #1
  40328c:	4082      	lsls	r2, r0
  40328e:	ea23 0302 	bic.w	r3, r3, r2
  403292:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  403294:	f1b4 3fff 	cmp.w	r4, #4294967295
  403298:	d010      	beq.n	4032bc <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40329a:	4b10      	ldr	r3, [pc, #64]	; (4032dc <vTaskPlaceOnEventList+0x74>)
  40329c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40329e:	4420      	add	r0, r4
  4032a0:	4b0f      	ldr	r3, [pc, #60]	; (4032e0 <vTaskPlaceOnEventList+0x78>)
  4032a2:	4798      	blx	r3
  4032a4:	bd38      	pop	{r3, r4, r5, pc}
  4032a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032aa:	b672      	cpsid	i
  4032ac:	f383 8811 	msr	BASEPRI, r3
  4032b0:	f3bf 8f6f 	isb	sy
  4032b4:	f3bf 8f4f 	dsb	sy
  4032b8:	b662      	cpsie	i
  4032ba:	e7fe      	b.n	4032ba <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4032bc:	4b03      	ldr	r3, [pc, #12]	; (4032cc <vTaskPlaceOnEventList+0x64>)
  4032be:	6819      	ldr	r1, [r3, #0]
  4032c0:	3104      	adds	r1, #4
  4032c2:	4808      	ldr	r0, [pc, #32]	; (4032e4 <vTaskPlaceOnEventList+0x7c>)
  4032c4:	4b08      	ldr	r3, [pc, #32]	; (4032e8 <vTaskPlaceOnEventList+0x80>)
  4032c6:	4798      	blx	r3
  4032c8:	bd38      	pop	{r3, r4, r5, pc}
  4032ca:	bf00      	nop
  4032cc:	20400c68 	.word	0x20400c68
  4032d0:	00401ead 	.word	0x00401ead
  4032d4:	00401ee1 	.word	0x00401ee1
  4032d8:	20400cec 	.word	0x20400cec
  4032dc:	20400d60 	.word	0x20400d60
  4032e0:	00402acd 	.word	0x00402acd
  4032e4:	20400d38 	.word	0x20400d38
  4032e8:	00401e95 	.word	0x00401e95

004032ec <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4032ec:	b1e8      	cbz	r0, 40332a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4032ee:	b570      	push	{r4, r5, r6, lr}
  4032f0:	4615      	mov	r5, r2
  4032f2:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4032f4:	4e16      	ldr	r6, [pc, #88]	; (403350 <vTaskPlaceOnEventListRestricted+0x64>)
  4032f6:	6831      	ldr	r1, [r6, #0]
  4032f8:	3118      	adds	r1, #24
  4032fa:	4b16      	ldr	r3, [pc, #88]	; (403354 <vTaskPlaceOnEventListRestricted+0x68>)
  4032fc:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4032fe:	6830      	ldr	r0, [r6, #0]
  403300:	3004      	adds	r0, #4
  403302:	4b15      	ldr	r3, [pc, #84]	; (403358 <vTaskPlaceOnEventListRestricted+0x6c>)
  403304:	4798      	blx	r3
  403306:	b940      	cbnz	r0, 40331a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403308:	6832      	ldr	r2, [r6, #0]
  40330a:	4914      	ldr	r1, [pc, #80]	; (40335c <vTaskPlaceOnEventListRestricted+0x70>)
  40330c:	680b      	ldr	r3, [r1, #0]
  40330e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403310:	2201      	movs	r2, #1
  403312:	4082      	lsls	r2, r0
  403314:	ea23 0302 	bic.w	r3, r3, r2
  403318:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40331a:	2d01      	cmp	r5, #1
  40331c:	d010      	beq.n	403340 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40331e:	4b10      	ldr	r3, [pc, #64]	; (403360 <vTaskPlaceOnEventListRestricted+0x74>)
  403320:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403322:	4420      	add	r0, r4
  403324:	4b0f      	ldr	r3, [pc, #60]	; (403364 <vTaskPlaceOnEventListRestricted+0x78>)
  403326:	4798      	blx	r3
  403328:	bd70      	pop	{r4, r5, r6, pc}
  40332a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40332e:	b672      	cpsid	i
  403330:	f383 8811 	msr	BASEPRI, r3
  403334:	f3bf 8f6f 	isb	sy
  403338:	f3bf 8f4f 	dsb	sy
  40333c:	b662      	cpsie	i
  40333e:	e7fe      	b.n	40333e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403340:	4b03      	ldr	r3, [pc, #12]	; (403350 <vTaskPlaceOnEventListRestricted+0x64>)
  403342:	6819      	ldr	r1, [r3, #0]
  403344:	3104      	adds	r1, #4
  403346:	4808      	ldr	r0, [pc, #32]	; (403368 <vTaskPlaceOnEventListRestricted+0x7c>)
  403348:	4b02      	ldr	r3, [pc, #8]	; (403354 <vTaskPlaceOnEventListRestricted+0x68>)
  40334a:	4798      	blx	r3
  40334c:	bd70      	pop	{r4, r5, r6, pc}
  40334e:	bf00      	nop
  403350:	20400c68 	.word	0x20400c68
  403354:	00401e95 	.word	0x00401e95
  403358:	00401ee1 	.word	0x00401ee1
  40335c:	20400cec 	.word	0x20400cec
  403360:	20400d60 	.word	0x20400d60
  403364:	00402acd 	.word	0x00402acd
  403368:	20400d38 	.word	0x20400d38

0040336c <xTaskRemoveFromEventList>:
{
  40336c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40336e:	68c3      	ldr	r3, [r0, #12]
  403370:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  403372:	b324      	cbz	r4, 4033be <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403374:	f104 0518 	add.w	r5, r4, #24
  403378:	4628      	mov	r0, r5
  40337a:	4b1a      	ldr	r3, [pc, #104]	; (4033e4 <xTaskRemoveFromEventList+0x78>)
  40337c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40337e:	4b1a      	ldr	r3, [pc, #104]	; (4033e8 <xTaskRemoveFromEventList+0x7c>)
  403380:	681b      	ldr	r3, [r3, #0]
  403382:	bb3b      	cbnz	r3, 4033d4 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403384:	1d25      	adds	r5, r4, #4
  403386:	4628      	mov	r0, r5
  403388:	4b16      	ldr	r3, [pc, #88]	; (4033e4 <xTaskRemoveFromEventList+0x78>)
  40338a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40338c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40338e:	4a17      	ldr	r2, [pc, #92]	; (4033ec <xTaskRemoveFromEventList+0x80>)
  403390:	6811      	ldr	r1, [r2, #0]
  403392:	2301      	movs	r3, #1
  403394:	4083      	lsls	r3, r0
  403396:	430b      	orrs	r3, r1
  403398:	6013      	str	r3, [r2, #0]
  40339a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40339e:	4629      	mov	r1, r5
  4033a0:	4b13      	ldr	r3, [pc, #76]	; (4033f0 <xTaskRemoveFromEventList+0x84>)
  4033a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4033a6:	4b13      	ldr	r3, [pc, #76]	; (4033f4 <xTaskRemoveFromEventList+0x88>)
  4033a8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4033aa:	4b13      	ldr	r3, [pc, #76]	; (4033f8 <xTaskRemoveFromEventList+0x8c>)
  4033ac:	681b      	ldr	r3, [r3, #0]
  4033ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4033b2:	429a      	cmp	r2, r3
  4033b4:	d913      	bls.n	4033de <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4033b6:	2001      	movs	r0, #1
  4033b8:	4b10      	ldr	r3, [pc, #64]	; (4033fc <xTaskRemoveFromEventList+0x90>)
  4033ba:	6018      	str	r0, [r3, #0]
  4033bc:	bd38      	pop	{r3, r4, r5, pc}
  4033be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033c2:	b672      	cpsid	i
  4033c4:	f383 8811 	msr	BASEPRI, r3
  4033c8:	f3bf 8f6f 	isb	sy
  4033cc:	f3bf 8f4f 	dsb	sy
  4033d0:	b662      	cpsie	i
  4033d2:	e7fe      	b.n	4033d2 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4033d4:	4629      	mov	r1, r5
  4033d6:	480a      	ldr	r0, [pc, #40]	; (403400 <xTaskRemoveFromEventList+0x94>)
  4033d8:	4b06      	ldr	r3, [pc, #24]	; (4033f4 <xTaskRemoveFromEventList+0x88>)
  4033da:	4798      	blx	r3
  4033dc:	e7e5      	b.n	4033aa <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4033de:	2000      	movs	r0, #0
}
  4033e0:	bd38      	pop	{r3, r4, r5, pc}
  4033e2:	bf00      	nop
  4033e4:	00401ee1 	.word	0x00401ee1
  4033e8:	20400ce0 	.word	0x20400ce0
  4033ec:	20400cec 	.word	0x20400cec
  4033f0:	20400c74 	.word	0x20400c74
  4033f4:	00401e95 	.word	0x00401e95
  4033f8:	20400c68 	.word	0x20400c68
  4033fc:	20400d64 	.word	0x20400d64
  403400:	20400d20 	.word	0x20400d20

00403404 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403404:	b130      	cbz	r0, 403414 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403406:	4a09      	ldr	r2, [pc, #36]	; (40342c <vTaskSetTimeOutState+0x28>)
  403408:	6812      	ldr	r2, [r2, #0]
  40340a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40340c:	4a08      	ldr	r2, [pc, #32]	; (403430 <vTaskSetTimeOutState+0x2c>)
  40340e:	6812      	ldr	r2, [r2, #0]
  403410:	6042      	str	r2, [r0, #4]
  403412:	4770      	bx	lr
  403414:	f04f 0380 	mov.w	r3, #128	; 0x80
  403418:	b672      	cpsid	i
  40341a:	f383 8811 	msr	BASEPRI, r3
  40341e:	f3bf 8f6f 	isb	sy
  403422:	f3bf 8f4f 	dsb	sy
  403426:	b662      	cpsie	i
  403428:	e7fe      	b.n	403428 <vTaskSetTimeOutState+0x24>
  40342a:	bf00      	nop
  40342c:	20400d1c 	.word	0x20400d1c
  403430:	20400d60 	.word	0x20400d60

00403434 <xTaskCheckForTimeOut>:
{
  403434:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403436:	b1c0      	cbz	r0, 40346a <xTaskCheckForTimeOut+0x36>
  403438:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40343a:	b309      	cbz	r1, 403480 <xTaskCheckForTimeOut+0x4c>
  40343c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40343e:	4b1d      	ldr	r3, [pc, #116]	; (4034b4 <xTaskCheckForTimeOut+0x80>)
  403440:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  403442:	4b1d      	ldr	r3, [pc, #116]	; (4034b8 <xTaskCheckForTimeOut+0x84>)
  403444:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403446:	682b      	ldr	r3, [r5, #0]
  403448:	f1b3 3fff 	cmp.w	r3, #4294967295
  40344c:	d02e      	beq.n	4034ac <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40344e:	491b      	ldr	r1, [pc, #108]	; (4034bc <xTaskCheckForTimeOut+0x88>)
  403450:	6809      	ldr	r1, [r1, #0]
  403452:	6820      	ldr	r0, [r4, #0]
  403454:	4288      	cmp	r0, r1
  403456:	d002      	beq.n	40345e <xTaskCheckForTimeOut+0x2a>
  403458:	6861      	ldr	r1, [r4, #4]
  40345a:	428a      	cmp	r2, r1
  40345c:	d228      	bcs.n	4034b0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40345e:	6861      	ldr	r1, [r4, #4]
  403460:	1a50      	subs	r0, r2, r1
  403462:	4283      	cmp	r3, r0
  403464:	d817      	bhi.n	403496 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403466:	2401      	movs	r4, #1
  403468:	e01c      	b.n	4034a4 <xTaskCheckForTimeOut+0x70>
  40346a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40346e:	b672      	cpsid	i
  403470:	f383 8811 	msr	BASEPRI, r3
  403474:	f3bf 8f6f 	isb	sy
  403478:	f3bf 8f4f 	dsb	sy
  40347c:	b662      	cpsie	i
  40347e:	e7fe      	b.n	40347e <xTaskCheckForTimeOut+0x4a>
  403480:	f04f 0380 	mov.w	r3, #128	; 0x80
  403484:	b672      	cpsid	i
  403486:	f383 8811 	msr	BASEPRI, r3
  40348a:	f3bf 8f6f 	isb	sy
  40348e:	f3bf 8f4f 	dsb	sy
  403492:	b662      	cpsie	i
  403494:	e7fe      	b.n	403494 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403496:	1a9b      	subs	r3, r3, r2
  403498:	440b      	add	r3, r1
  40349a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40349c:	4620      	mov	r0, r4
  40349e:	4b08      	ldr	r3, [pc, #32]	; (4034c0 <xTaskCheckForTimeOut+0x8c>)
  4034a0:	4798      	blx	r3
			xReturn = pdFALSE;
  4034a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4034a4:	4b07      	ldr	r3, [pc, #28]	; (4034c4 <xTaskCheckForTimeOut+0x90>)
  4034a6:	4798      	blx	r3
}
  4034a8:	4620      	mov	r0, r4
  4034aa:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4034ac:	2400      	movs	r4, #0
  4034ae:	e7f9      	b.n	4034a4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4034b0:	2401      	movs	r4, #1
  4034b2:	e7f7      	b.n	4034a4 <xTaskCheckForTimeOut+0x70>
  4034b4:	00401fc5 	.word	0x00401fc5
  4034b8:	20400d60 	.word	0x20400d60
  4034bc:	20400d1c 	.word	0x20400d1c
  4034c0:	00403405 	.word	0x00403405
  4034c4:	00402011 	.word	0x00402011

004034c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4034c8:	2201      	movs	r2, #1
  4034ca:	4b01      	ldr	r3, [pc, #4]	; (4034d0 <vTaskMissedYield+0x8>)
  4034cc:	601a      	str	r2, [r3, #0]
  4034ce:	4770      	bx	lr
  4034d0:	20400d64 	.word	0x20400d64

004034d4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4034d4:	4b05      	ldr	r3, [pc, #20]	; (4034ec <xTaskGetSchedulerState+0x18>)
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	b133      	cbz	r3, 4034e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4034da:	4b05      	ldr	r3, [pc, #20]	; (4034f0 <xTaskGetSchedulerState+0x1c>)
  4034dc:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4034de:	2b00      	cmp	r3, #0
  4034e0:	bf0c      	ite	eq
  4034e2:	2002      	moveq	r0, #2
  4034e4:	2000      	movne	r0, #0
  4034e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4034e8:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4034ea:	4770      	bx	lr
  4034ec:	20400d34 	.word	0x20400d34
  4034f0:	20400ce0 	.word	0x20400ce0

004034f4 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4034f4:	2800      	cmp	r0, #0
  4034f6:	d044      	beq.n	403582 <vTaskPriorityInherit+0x8e>
	{
  4034f8:	b538      	push	{r3, r4, r5, lr}
  4034fa:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4034fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4034fe:	4921      	ldr	r1, [pc, #132]	; (403584 <vTaskPriorityInherit+0x90>)
  403500:	6809      	ldr	r1, [r1, #0]
  403502:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403504:	428a      	cmp	r2, r1
  403506:	d214      	bcs.n	403532 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403508:	6981      	ldr	r1, [r0, #24]
  40350a:	2900      	cmp	r1, #0
  40350c:	db05      	blt.n	40351a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40350e:	491d      	ldr	r1, [pc, #116]	; (403584 <vTaskPriorityInherit+0x90>)
  403510:	6809      	ldr	r1, [r1, #0]
  403512:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403514:	f1c1 0105 	rsb	r1, r1, #5
  403518:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40351a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40351e:	491a      	ldr	r1, [pc, #104]	; (403588 <vTaskPriorityInherit+0x94>)
  403520:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403524:	6961      	ldr	r1, [r4, #20]
  403526:	4291      	cmp	r1, r2
  403528:	d004      	beq.n	403534 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40352a:	4a16      	ldr	r2, [pc, #88]	; (403584 <vTaskPriorityInherit+0x90>)
  40352c:	6812      	ldr	r2, [r2, #0]
  40352e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403530:	62e2      	str	r2, [r4, #44]	; 0x2c
  403532:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403534:	1d25      	adds	r5, r4, #4
  403536:	4628      	mov	r0, r5
  403538:	4b14      	ldr	r3, [pc, #80]	; (40358c <vTaskPriorityInherit+0x98>)
  40353a:	4798      	blx	r3
  40353c:	b970      	cbnz	r0, 40355c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40353e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403540:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403544:	4a10      	ldr	r2, [pc, #64]	; (403588 <vTaskPriorityInherit+0x94>)
  403546:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40354a:	b93a      	cbnz	r2, 40355c <vTaskPriorityInherit+0x68>
  40354c:	4810      	ldr	r0, [pc, #64]	; (403590 <vTaskPriorityInherit+0x9c>)
  40354e:	6802      	ldr	r2, [r0, #0]
  403550:	2101      	movs	r1, #1
  403552:	fa01 f303 	lsl.w	r3, r1, r3
  403556:	ea22 0303 	bic.w	r3, r2, r3
  40355a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40355c:	4b09      	ldr	r3, [pc, #36]	; (403584 <vTaskPriorityInherit+0x90>)
  40355e:	681b      	ldr	r3, [r3, #0]
  403560:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403562:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403564:	4a0a      	ldr	r2, [pc, #40]	; (403590 <vTaskPriorityInherit+0x9c>)
  403566:	6811      	ldr	r1, [r2, #0]
  403568:	2301      	movs	r3, #1
  40356a:	4083      	lsls	r3, r0
  40356c:	430b      	orrs	r3, r1
  40356e:	6013      	str	r3, [r2, #0]
  403570:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403574:	4629      	mov	r1, r5
  403576:	4b04      	ldr	r3, [pc, #16]	; (403588 <vTaskPriorityInherit+0x94>)
  403578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40357c:	4b05      	ldr	r3, [pc, #20]	; (403594 <vTaskPriorityInherit+0xa0>)
  40357e:	4798      	blx	r3
  403580:	bd38      	pop	{r3, r4, r5, pc}
  403582:	4770      	bx	lr
  403584:	20400c68 	.word	0x20400c68
  403588:	20400c74 	.word	0x20400c74
  40358c:	00401ee1 	.word	0x00401ee1
  403590:	20400cec 	.word	0x20400cec
  403594:	00401e95 	.word	0x00401e95

00403598 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403598:	2800      	cmp	r0, #0
  40359a:	d04d      	beq.n	403638 <xTaskPriorityDisinherit+0xa0>
	{
  40359c:	b538      	push	{r3, r4, r5, lr}
  40359e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4035a0:	4a27      	ldr	r2, [pc, #156]	; (403640 <xTaskPriorityDisinherit+0xa8>)
  4035a2:	6812      	ldr	r2, [r2, #0]
  4035a4:	4290      	cmp	r0, r2
  4035a6:	d00a      	beq.n	4035be <xTaskPriorityDisinherit+0x26>
  4035a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ac:	b672      	cpsid	i
  4035ae:	f383 8811 	msr	BASEPRI, r3
  4035b2:	f3bf 8f6f 	isb	sy
  4035b6:	f3bf 8f4f 	dsb	sy
  4035ba:	b662      	cpsie	i
  4035bc:	e7fe      	b.n	4035bc <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4035be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4035c0:	b952      	cbnz	r2, 4035d8 <xTaskPriorityDisinherit+0x40>
  4035c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035c6:	b672      	cpsid	i
  4035c8:	f383 8811 	msr	BASEPRI, r3
  4035cc:	f3bf 8f6f 	isb	sy
  4035d0:	f3bf 8f4f 	dsb	sy
  4035d4:	b662      	cpsie	i
  4035d6:	e7fe      	b.n	4035d6 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4035d8:	3a01      	subs	r2, #1
  4035da:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4035dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4035de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4035e0:	4288      	cmp	r0, r1
  4035e2:	d02b      	beq.n	40363c <xTaskPriorityDisinherit+0xa4>
  4035e4:	bb52      	cbnz	r2, 40363c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4035e6:	1d25      	adds	r5, r4, #4
  4035e8:	4628      	mov	r0, r5
  4035ea:	4b16      	ldr	r3, [pc, #88]	; (403644 <xTaskPriorityDisinherit+0xac>)
  4035ec:	4798      	blx	r3
  4035ee:	b968      	cbnz	r0, 40360c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4035f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4035f2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4035f6:	4b14      	ldr	r3, [pc, #80]	; (403648 <xTaskPriorityDisinherit+0xb0>)
  4035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4035fc:	b933      	cbnz	r3, 40360c <xTaskPriorityDisinherit+0x74>
  4035fe:	4813      	ldr	r0, [pc, #76]	; (40364c <xTaskPriorityDisinherit+0xb4>)
  403600:	6803      	ldr	r3, [r0, #0]
  403602:	2201      	movs	r2, #1
  403604:	408a      	lsls	r2, r1
  403606:	ea23 0302 	bic.w	r3, r3, r2
  40360a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40360c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40360e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403610:	f1c0 0305 	rsb	r3, r0, #5
  403614:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403616:	4a0d      	ldr	r2, [pc, #52]	; (40364c <xTaskPriorityDisinherit+0xb4>)
  403618:	6811      	ldr	r1, [r2, #0]
  40361a:	2401      	movs	r4, #1
  40361c:	fa04 f300 	lsl.w	r3, r4, r0
  403620:	430b      	orrs	r3, r1
  403622:	6013      	str	r3, [r2, #0]
  403624:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403628:	4629      	mov	r1, r5
  40362a:	4b07      	ldr	r3, [pc, #28]	; (403648 <xTaskPriorityDisinherit+0xb0>)
  40362c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403630:	4b07      	ldr	r3, [pc, #28]	; (403650 <xTaskPriorityDisinherit+0xb8>)
  403632:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403634:	4620      	mov	r0, r4
  403636:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403638:	2000      	movs	r0, #0
  40363a:	4770      	bx	lr
  40363c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40363e:	bd38      	pop	{r3, r4, r5, pc}
  403640:	20400c68 	.word	0x20400c68
  403644:	00401ee1 	.word	0x00401ee1
  403648:	20400c74 	.word	0x20400c74
  40364c:	20400cec 	.word	0x20400cec
  403650:	00401e95 	.word	0x00401e95

00403654 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403654:	4b05      	ldr	r3, [pc, #20]	; (40366c <pvTaskIncrementMutexHeldCount+0x18>)
  403656:	681b      	ldr	r3, [r3, #0]
  403658:	b123      	cbz	r3, 403664 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40365a:	4b04      	ldr	r3, [pc, #16]	; (40366c <pvTaskIncrementMutexHeldCount+0x18>)
  40365c:	681a      	ldr	r2, [r3, #0]
  40365e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403660:	3301      	adds	r3, #1
  403662:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403664:	4b01      	ldr	r3, [pc, #4]	; (40366c <pvTaskIncrementMutexHeldCount+0x18>)
  403666:	6818      	ldr	r0, [r3, #0]
	}
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	20400c68 	.word	0x20400c68

00403670 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403670:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  403672:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403674:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403676:	4291      	cmp	r1, r2
  403678:	d80c      	bhi.n	403694 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40367a:	1ad2      	subs	r2, r2, r3
  40367c:	6983      	ldr	r3, [r0, #24]
  40367e:	429a      	cmp	r2, r3
  403680:	d301      	bcc.n	403686 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  403682:	2001      	movs	r0, #1
  403684:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403686:	1d01      	adds	r1, r0, #4
  403688:	4b09      	ldr	r3, [pc, #36]	; (4036b0 <prvInsertTimerInActiveList+0x40>)
  40368a:	6818      	ldr	r0, [r3, #0]
  40368c:	4b09      	ldr	r3, [pc, #36]	; (4036b4 <prvInsertTimerInActiveList+0x44>)
  40368e:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403690:	2000      	movs	r0, #0
  403692:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403694:	429a      	cmp	r2, r3
  403696:	d203      	bcs.n	4036a0 <prvInsertTimerInActiveList+0x30>
  403698:	4299      	cmp	r1, r3
  40369a:	d301      	bcc.n	4036a0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40369c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40369e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4036a0:	1d01      	adds	r1, r0, #4
  4036a2:	4b05      	ldr	r3, [pc, #20]	; (4036b8 <prvInsertTimerInActiveList+0x48>)
  4036a4:	6818      	ldr	r0, [r3, #0]
  4036a6:	4b03      	ldr	r3, [pc, #12]	; (4036b4 <prvInsertTimerInActiveList+0x44>)
  4036a8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4036aa:	2000      	movs	r0, #0
  4036ac:	bd08      	pop	{r3, pc}
  4036ae:	bf00      	nop
  4036b0:	20400d6c 	.word	0x20400d6c
  4036b4:	00401ead 	.word	0x00401ead
  4036b8:	20400d68 	.word	0x20400d68

004036bc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4036bc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4036be:	4b15      	ldr	r3, [pc, #84]	; (403714 <prvCheckForValidListAndQueue+0x58>)
  4036c0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4036c2:	4b15      	ldr	r3, [pc, #84]	; (403718 <prvCheckForValidListAndQueue+0x5c>)
  4036c4:	681b      	ldr	r3, [r3, #0]
  4036c6:	b113      	cbz	r3, 4036ce <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4036c8:	4b14      	ldr	r3, [pc, #80]	; (40371c <prvCheckForValidListAndQueue+0x60>)
  4036ca:	4798      	blx	r3
  4036cc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4036ce:	4d14      	ldr	r5, [pc, #80]	; (403720 <prvCheckForValidListAndQueue+0x64>)
  4036d0:	4628      	mov	r0, r5
  4036d2:	4e14      	ldr	r6, [pc, #80]	; (403724 <prvCheckForValidListAndQueue+0x68>)
  4036d4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4036d6:	4c14      	ldr	r4, [pc, #80]	; (403728 <prvCheckForValidListAndQueue+0x6c>)
  4036d8:	4620      	mov	r0, r4
  4036da:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4036dc:	4b13      	ldr	r3, [pc, #76]	; (40372c <prvCheckForValidListAndQueue+0x70>)
  4036de:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4036e0:	4b13      	ldr	r3, [pc, #76]	; (403730 <prvCheckForValidListAndQueue+0x74>)
  4036e2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4036e4:	2200      	movs	r2, #0
  4036e6:	2110      	movs	r1, #16
  4036e8:	2005      	movs	r0, #5
  4036ea:	4b12      	ldr	r3, [pc, #72]	; (403734 <prvCheckForValidListAndQueue+0x78>)
  4036ec:	4798      	blx	r3
  4036ee:	4b0a      	ldr	r3, [pc, #40]	; (403718 <prvCheckForValidListAndQueue+0x5c>)
  4036f0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4036f2:	b118      	cbz	r0, 4036fc <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4036f4:	4910      	ldr	r1, [pc, #64]	; (403738 <prvCheckForValidListAndQueue+0x7c>)
  4036f6:	4b11      	ldr	r3, [pc, #68]	; (40373c <prvCheckForValidListAndQueue+0x80>)
  4036f8:	4798      	blx	r3
  4036fa:	e7e5      	b.n	4036c8 <prvCheckForValidListAndQueue+0xc>
  4036fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  403700:	b672      	cpsid	i
  403702:	f383 8811 	msr	BASEPRI, r3
  403706:	f3bf 8f6f 	isb	sy
  40370a:	f3bf 8f4f 	dsb	sy
  40370e:	b662      	cpsie	i
  403710:	e7fe      	b.n	403710 <prvCheckForValidListAndQueue+0x54>
  403712:	bf00      	nop
  403714:	00401fc5 	.word	0x00401fc5
  403718:	20400d9c 	.word	0x20400d9c
  40371c:	00402011 	.word	0x00402011
  403720:	20400d70 	.word	0x20400d70
  403724:	00401e79 	.word	0x00401e79
  403728:	20400d84 	.word	0x20400d84
  40372c:	20400d68 	.word	0x20400d68
  403730:	20400d6c 	.word	0x20400d6c
  403734:	004024e5 	.word	0x004024e5
  403738:	0040bc4c 	.word	0x0040bc4c
  40373c:	00402a15 	.word	0x00402a15

00403740 <xTimerCreateTimerTask>:
{
  403740:	b510      	push	{r4, lr}
  403742:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403744:	4b0f      	ldr	r3, [pc, #60]	; (403784 <xTimerCreateTimerTask+0x44>)
  403746:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403748:	4b0f      	ldr	r3, [pc, #60]	; (403788 <xTimerCreateTimerTask+0x48>)
  40374a:	681b      	ldr	r3, [r3, #0]
  40374c:	b173      	cbz	r3, 40376c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40374e:	2300      	movs	r3, #0
  403750:	9303      	str	r3, [sp, #12]
  403752:	9302      	str	r3, [sp, #8]
  403754:	9301      	str	r3, [sp, #4]
  403756:	2204      	movs	r2, #4
  403758:	9200      	str	r2, [sp, #0]
  40375a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40375e:	490b      	ldr	r1, [pc, #44]	; (40378c <xTimerCreateTimerTask+0x4c>)
  403760:	480b      	ldr	r0, [pc, #44]	; (403790 <xTimerCreateTimerTask+0x50>)
  403762:	4c0c      	ldr	r4, [pc, #48]	; (403794 <xTimerCreateTimerTask+0x54>)
  403764:	47a0      	blx	r4
	configASSERT( xReturn );
  403766:	b108      	cbz	r0, 40376c <xTimerCreateTimerTask+0x2c>
}
  403768:	b004      	add	sp, #16
  40376a:	bd10      	pop	{r4, pc}
  40376c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403770:	b672      	cpsid	i
  403772:	f383 8811 	msr	BASEPRI, r3
  403776:	f3bf 8f6f 	isb	sy
  40377a:	f3bf 8f4f 	dsb	sy
  40377e:	b662      	cpsie	i
  403780:	e7fe      	b.n	403780 <xTimerCreateTimerTask+0x40>
  403782:	bf00      	nop
  403784:	004036bd 	.word	0x004036bd
  403788:	20400d9c 	.word	0x20400d9c
  40378c:	0040bc54 	.word	0x0040bc54
  403790:	004038c1 	.word	0x004038c1
  403794:	00402b25 	.word	0x00402b25

00403798 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403798:	b1d8      	cbz	r0, 4037d2 <xTimerGenericCommand+0x3a>
{
  40379a:	b530      	push	{r4, r5, lr}
  40379c:	b085      	sub	sp, #20
  40379e:	4615      	mov	r5, r2
  4037a0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4037a2:	4a15      	ldr	r2, [pc, #84]	; (4037f8 <xTimerGenericCommand+0x60>)
  4037a4:	6810      	ldr	r0, [r2, #0]
  4037a6:	b320      	cbz	r0, 4037f2 <xTimerGenericCommand+0x5a>
  4037a8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4037aa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4037ac:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4037ae:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4037b0:	2905      	cmp	r1, #5
  4037b2:	dc19      	bgt.n	4037e8 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4037b4:	4b11      	ldr	r3, [pc, #68]	; (4037fc <xTimerGenericCommand+0x64>)
  4037b6:	4798      	blx	r3
  4037b8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4037ba:	f04f 0300 	mov.w	r3, #0
  4037be:	bf0c      	ite	eq
  4037c0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4037c2:	461a      	movne	r2, r3
  4037c4:	4669      	mov	r1, sp
  4037c6:	480c      	ldr	r0, [pc, #48]	; (4037f8 <xTimerGenericCommand+0x60>)
  4037c8:	6800      	ldr	r0, [r0, #0]
  4037ca:	4c0d      	ldr	r4, [pc, #52]	; (403800 <xTimerGenericCommand+0x68>)
  4037cc:	47a0      	blx	r4
}
  4037ce:	b005      	add	sp, #20
  4037d0:	bd30      	pop	{r4, r5, pc}
  4037d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037d6:	b672      	cpsid	i
  4037d8:	f383 8811 	msr	BASEPRI, r3
  4037dc:	f3bf 8f6f 	isb	sy
  4037e0:	f3bf 8f4f 	dsb	sy
  4037e4:	b662      	cpsie	i
  4037e6:	e7fe      	b.n	4037e6 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4037e8:	2300      	movs	r3, #0
  4037ea:	4669      	mov	r1, sp
  4037ec:	4c05      	ldr	r4, [pc, #20]	; (403804 <xTimerGenericCommand+0x6c>)
  4037ee:	47a0      	blx	r4
  4037f0:	e7ed      	b.n	4037ce <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4037f2:	2000      	movs	r0, #0
	return xReturn;
  4037f4:	e7eb      	b.n	4037ce <xTimerGenericCommand+0x36>
  4037f6:	bf00      	nop
  4037f8:	20400d9c 	.word	0x20400d9c
  4037fc:	004034d5 	.word	0x004034d5
  403800:	00402561 	.word	0x00402561
  403804:	00402745 	.word	0x00402745

00403808 <prvSampleTimeNow>:
{
  403808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40380c:	b082      	sub	sp, #8
  40380e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403810:	4b24      	ldr	r3, [pc, #144]	; (4038a4 <prvSampleTimeNow+0x9c>)
  403812:	4798      	blx	r3
  403814:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403816:	4b24      	ldr	r3, [pc, #144]	; (4038a8 <prvSampleTimeNow+0xa0>)
  403818:	681b      	ldr	r3, [r3, #0]
  40381a:	4298      	cmp	r0, r3
  40381c:	d31b      	bcc.n	403856 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40381e:	2300      	movs	r3, #0
  403820:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403824:	4b20      	ldr	r3, [pc, #128]	; (4038a8 <prvSampleTimeNow+0xa0>)
  403826:	601f      	str	r7, [r3, #0]
}
  403828:	4638      	mov	r0, r7
  40382a:	b002      	add	sp, #8
  40382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403830:	2100      	movs	r1, #0
  403832:	9100      	str	r1, [sp, #0]
  403834:	460b      	mov	r3, r1
  403836:	4652      	mov	r2, sl
  403838:	4620      	mov	r0, r4
  40383a:	4c1c      	ldr	r4, [pc, #112]	; (4038ac <prvSampleTimeNow+0xa4>)
  40383c:	47a0      	blx	r4
				configASSERT( xResult );
  40383e:	b960      	cbnz	r0, 40385a <prvSampleTimeNow+0x52>
  403840:	f04f 0380 	mov.w	r3, #128	; 0x80
  403844:	b672      	cpsid	i
  403846:	f383 8811 	msr	BASEPRI, r3
  40384a:	f3bf 8f6f 	isb	sy
  40384e:	f3bf 8f4f 	dsb	sy
  403852:	b662      	cpsie	i
  403854:	e7fe      	b.n	403854 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403856:	4d16      	ldr	r5, [pc, #88]	; (4038b0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403858:	4e16      	ldr	r6, [pc, #88]	; (4038b4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40385a:	682b      	ldr	r3, [r5, #0]
  40385c:	681a      	ldr	r2, [r3, #0]
  40385e:	b1c2      	cbz	r2, 403892 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403860:	68db      	ldr	r3, [r3, #12]
  403862:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403866:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403868:	f104 0904 	add.w	r9, r4, #4
  40386c:	4648      	mov	r0, r9
  40386e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403870:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403872:	4620      	mov	r0, r4
  403874:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403876:	69e3      	ldr	r3, [r4, #28]
  403878:	2b01      	cmp	r3, #1
  40387a:	d1ee      	bne.n	40385a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40387c:	69a3      	ldr	r3, [r4, #24]
  40387e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403880:	459a      	cmp	sl, r3
  403882:	d2d5      	bcs.n	403830 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403884:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403886:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403888:	4649      	mov	r1, r9
  40388a:	6828      	ldr	r0, [r5, #0]
  40388c:	4b0a      	ldr	r3, [pc, #40]	; (4038b8 <prvSampleTimeNow+0xb0>)
  40388e:	4798      	blx	r3
  403890:	e7e3      	b.n	40385a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403892:	4a0a      	ldr	r2, [pc, #40]	; (4038bc <prvSampleTimeNow+0xb4>)
  403894:	6810      	ldr	r0, [r2, #0]
  403896:	4906      	ldr	r1, [pc, #24]	; (4038b0 <prvSampleTimeNow+0xa8>)
  403898:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40389a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  40389c:	2301      	movs	r3, #1
  40389e:	f8c8 3000 	str.w	r3, [r8]
  4038a2:	e7bf      	b.n	403824 <prvSampleTimeNow+0x1c>
  4038a4:	00402df9 	.word	0x00402df9
  4038a8:	20400d98 	.word	0x20400d98
  4038ac:	00403799 	.word	0x00403799
  4038b0:	20400d68 	.word	0x20400d68
  4038b4:	00401ee1 	.word	0x00401ee1
  4038b8:	00401ead 	.word	0x00401ead
  4038bc:	20400d6c 	.word	0x20400d6c

004038c0 <prvTimerTask>:
{
  4038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038c4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4038c6:	4e75      	ldr	r6, [pc, #468]	; (403a9c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4038c8:	4f75      	ldr	r7, [pc, #468]	; (403aa0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4038ca:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403ac8 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4038ce:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403acc <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4038d2:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4038d4:	681a      	ldr	r2, [r3, #0]
  4038d6:	2a00      	cmp	r2, #0
  4038d8:	f000 80ce 	beq.w	403a78 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4038dc:	68db      	ldr	r3, [r3, #12]
  4038de:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4038e0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4038e2:	a804      	add	r0, sp, #16
  4038e4:	4b6f      	ldr	r3, [pc, #444]	; (403aa4 <prvTimerTask+0x1e4>)
  4038e6:	4798      	blx	r3
  4038e8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4038ea:	9b04      	ldr	r3, [sp, #16]
  4038ec:	2b00      	cmp	r3, #0
  4038ee:	d144      	bne.n	40397a <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4038f0:	42a0      	cmp	r0, r4
  4038f2:	d212      	bcs.n	40391a <prvTimerTask+0x5a>
  4038f4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4038f6:	1b61      	subs	r1, r4, r5
  4038f8:	4b6b      	ldr	r3, [pc, #428]	; (403aa8 <prvTimerTask+0x1e8>)
  4038fa:	6818      	ldr	r0, [r3, #0]
  4038fc:	4b6b      	ldr	r3, [pc, #428]	; (403aac <prvTimerTask+0x1ec>)
  4038fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403900:	4b6b      	ldr	r3, [pc, #428]	; (403ab0 <prvTimerTask+0x1f0>)
  403902:	4798      	blx	r3
  403904:	2800      	cmp	r0, #0
  403906:	d13a      	bne.n	40397e <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40390c:	f8c9 3000 	str.w	r3, [r9]
  403910:	f3bf 8f4f 	dsb	sy
  403914:	f3bf 8f6f 	isb	sy
  403918:	e031      	b.n	40397e <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40391a:	4b65      	ldr	r3, [pc, #404]	; (403ab0 <prvTimerTask+0x1f0>)
  40391c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40391e:	6833      	ldr	r3, [r6, #0]
  403920:	68db      	ldr	r3, [r3, #12]
  403922:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403926:	f10a 0004 	add.w	r0, sl, #4
  40392a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40392c:	f8da 301c 	ldr.w	r3, [sl, #28]
  403930:	2b01      	cmp	r3, #1
  403932:	d004      	beq.n	40393e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403934:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403938:	4650      	mov	r0, sl
  40393a:	4798      	blx	r3
  40393c:	e01f      	b.n	40397e <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40393e:	f8da 1018 	ldr.w	r1, [sl, #24]
  403942:	4623      	mov	r3, r4
  403944:	462a      	mov	r2, r5
  403946:	4421      	add	r1, r4
  403948:	4650      	mov	r0, sl
  40394a:	4d5a      	ldr	r5, [pc, #360]	; (403ab4 <prvTimerTask+0x1f4>)
  40394c:	47a8      	blx	r5
  40394e:	2801      	cmp	r0, #1
  403950:	d1f0      	bne.n	403934 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403952:	2100      	movs	r1, #0
  403954:	9100      	str	r1, [sp, #0]
  403956:	460b      	mov	r3, r1
  403958:	4622      	mov	r2, r4
  40395a:	4650      	mov	r0, sl
  40395c:	4c56      	ldr	r4, [pc, #344]	; (403ab8 <prvTimerTask+0x1f8>)
  40395e:	47a0      	blx	r4
			configASSERT( xResult );
  403960:	2800      	cmp	r0, #0
  403962:	d1e7      	bne.n	403934 <prvTimerTask+0x74>
  403964:	f04f 0380 	mov.w	r3, #128	; 0x80
  403968:	b672      	cpsid	i
  40396a:	f383 8811 	msr	BASEPRI, r3
  40396e:	f3bf 8f6f 	isb	sy
  403972:	f3bf 8f4f 	dsb	sy
  403976:	b662      	cpsie	i
  403978:	e7fe      	b.n	403978 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40397a:	4b4d      	ldr	r3, [pc, #308]	; (403ab0 <prvTimerTask+0x1f0>)
  40397c:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40397e:	4d4a      	ldr	r5, [pc, #296]	; (403aa8 <prvTimerTask+0x1e8>)
  403980:	4c4e      	ldr	r4, [pc, #312]	; (403abc <prvTimerTask+0x1fc>)
  403982:	e006      	b.n	403992 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403984:	9907      	ldr	r1, [sp, #28]
  403986:	9806      	ldr	r0, [sp, #24]
  403988:	9b05      	ldr	r3, [sp, #20]
  40398a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40398c:	9b04      	ldr	r3, [sp, #16]
  40398e:	2b00      	cmp	r3, #0
  403990:	da09      	bge.n	4039a6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403992:	2300      	movs	r3, #0
  403994:	461a      	mov	r2, r3
  403996:	a904      	add	r1, sp, #16
  403998:	6828      	ldr	r0, [r5, #0]
  40399a:	47a0      	blx	r4
  40399c:	2800      	cmp	r0, #0
  40399e:	d098      	beq.n	4038d2 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4039a0:	9b04      	ldr	r3, [sp, #16]
  4039a2:	2b00      	cmp	r3, #0
  4039a4:	dbee      	blt.n	403984 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4039a6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4039aa:	f8da 3014 	ldr.w	r3, [sl, #20]
  4039ae:	b113      	cbz	r3, 4039b6 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039b0:	f10a 0004 	add.w	r0, sl, #4
  4039b4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4039b6:	a803      	add	r0, sp, #12
  4039b8:	4b3a      	ldr	r3, [pc, #232]	; (403aa4 <prvTimerTask+0x1e4>)
  4039ba:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4039bc:	9b04      	ldr	r3, [sp, #16]
  4039be:	2b09      	cmp	r3, #9
  4039c0:	d8e7      	bhi.n	403992 <prvTimerTask+0xd2>
  4039c2:	a201      	add	r2, pc, #4	; (adr r2, 4039c8 <prvTimerTask+0x108>)
  4039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4039c8:	004039f1 	.word	0x004039f1
  4039cc:	004039f1 	.word	0x004039f1
  4039d0:	004039f1 	.word	0x004039f1
  4039d4:	00403993 	.word	0x00403993
  4039d8:	00403a45 	.word	0x00403a45
  4039dc:	00403a71 	.word	0x00403a71
  4039e0:	004039f1 	.word	0x004039f1
  4039e4:	004039f1 	.word	0x004039f1
  4039e8:	00403993 	.word	0x00403993
  4039ec:	00403a45 	.word	0x00403a45
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4039f0:	9c05      	ldr	r4, [sp, #20]
  4039f2:	f8da 1018 	ldr.w	r1, [sl, #24]
  4039f6:	4623      	mov	r3, r4
  4039f8:	4602      	mov	r2, r0
  4039fa:	4421      	add	r1, r4
  4039fc:	4650      	mov	r0, sl
  4039fe:	4c2d      	ldr	r4, [pc, #180]	; (403ab4 <prvTimerTask+0x1f4>)
  403a00:	47a0      	blx	r4
  403a02:	2801      	cmp	r0, #1
  403a04:	d1bc      	bne.n	403980 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403a06:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403a0a:	4650      	mov	r0, sl
  403a0c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403a0e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403a12:	2b01      	cmp	r3, #1
  403a14:	d1b4      	bne.n	403980 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403a16:	f8da 2018 	ldr.w	r2, [sl, #24]
  403a1a:	2100      	movs	r1, #0
  403a1c:	9100      	str	r1, [sp, #0]
  403a1e:	460b      	mov	r3, r1
  403a20:	9805      	ldr	r0, [sp, #20]
  403a22:	4402      	add	r2, r0
  403a24:	4650      	mov	r0, sl
  403a26:	4c24      	ldr	r4, [pc, #144]	; (403ab8 <prvTimerTask+0x1f8>)
  403a28:	47a0      	blx	r4
							configASSERT( xResult );
  403a2a:	2800      	cmp	r0, #0
  403a2c:	d1a8      	bne.n	403980 <prvTimerTask+0xc0>
  403a2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a32:	b672      	cpsid	i
  403a34:	f383 8811 	msr	BASEPRI, r3
  403a38:	f3bf 8f6f 	isb	sy
  403a3c:	f3bf 8f4f 	dsb	sy
  403a40:	b662      	cpsie	i
  403a42:	e7fe      	b.n	403a42 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403a44:	9905      	ldr	r1, [sp, #20]
  403a46:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403a4a:	b131      	cbz	r1, 403a5a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403a4c:	4603      	mov	r3, r0
  403a4e:	4602      	mov	r2, r0
  403a50:	4401      	add	r1, r0
  403a52:	4650      	mov	r0, sl
  403a54:	4c17      	ldr	r4, [pc, #92]	; (403ab4 <prvTimerTask+0x1f4>)
  403a56:	47a0      	blx	r4
  403a58:	e792      	b.n	403980 <prvTimerTask+0xc0>
  403a5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a5e:	b672      	cpsid	i
  403a60:	f383 8811 	msr	BASEPRI, r3
  403a64:	f3bf 8f6f 	isb	sy
  403a68:	f3bf 8f4f 	dsb	sy
  403a6c:	b662      	cpsie	i
  403a6e:	e7fe      	b.n	403a6e <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403a70:	4650      	mov	r0, sl
  403a72:	4b13      	ldr	r3, [pc, #76]	; (403ac0 <prvTimerTask+0x200>)
  403a74:	4798      	blx	r3
  403a76:	e783      	b.n	403980 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403a78:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403a7a:	a804      	add	r0, sp, #16
  403a7c:	4b09      	ldr	r3, [pc, #36]	; (403aa4 <prvTimerTask+0x1e4>)
  403a7e:	4798      	blx	r3
  403a80:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403a82:	9b04      	ldr	r3, [sp, #16]
  403a84:	2b00      	cmp	r3, #0
  403a86:	f47f af78 	bne.w	40397a <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403a8a:	4b0e      	ldr	r3, [pc, #56]	; (403ac4 <prvTimerTask+0x204>)
  403a8c:	681b      	ldr	r3, [r3, #0]
  403a8e:	681a      	ldr	r2, [r3, #0]
  403a90:	fab2 f282 	clz	r2, r2
  403a94:	0952      	lsrs	r2, r2, #5
  403a96:	2400      	movs	r4, #0
  403a98:	e72d      	b.n	4038f6 <prvTimerTask+0x36>
  403a9a:	bf00      	nop
  403a9c:	20400d68 	.word	0x20400d68
  403aa0:	00402de9 	.word	0x00402de9
  403aa4:	00403809 	.word	0x00403809
  403aa8:	20400d9c 	.word	0x20400d9c
  403aac:	00402a49 	.word	0x00402a49
  403ab0:	00402f51 	.word	0x00402f51
  403ab4:	00403671 	.word	0x00403671
  403ab8:	00403799 	.word	0x00403799
  403abc:	00402845 	.word	0x00402845
  403ac0:	00402251 	.word	0x00402251
  403ac4:	20400d6c 	.word	0x20400d6c
  403ac8:	e000ed04 	.word	0xe000ed04
  403acc:	00401ee1 	.word	0x00401ee1

00403ad0 <task_orientacao>:
			}
		}
	}
}

static void task_orientacao ( void * pvParameters) {
  403ad0:	b580      	push	{r7, lr}
  403ad2:	b082      	sub	sp, #8
	enum orientacao ori;
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403ad4:	2101      	movs	r1, #1
  403ad6:	482f      	ldr	r0, [pc, #188]	; (403b94 <task_orientacao+0xc4>)
  403ad8:	4c2f      	ldr	r4, [pc, #188]	; (403b98 <task_orientacao+0xc8>)
  403ada:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403adc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403ae0:	482e      	ldr	r0, [pc, #184]	; (403b9c <task_orientacao+0xcc>)
  403ae2:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403ae4:	2104      	movs	r1, #4
  403ae6:	482e      	ldr	r0, [pc, #184]	; (403ba0 <task_orientacao+0xd0>)
  403ae8:	47a0      	blx	r4
	while(1){
		if (xQueueReceive(xQueueOrientacao, &ori, 1)) {
  403aea:	4d2e      	ldr	r5, [pc, #184]	; (403ba4 <task_orientacao+0xd4>)
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
				vTaskDelay(10);
			}
		}
		else{
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403aec:	4f29      	ldr	r7, [pc, #164]	; (403b94 <task_orientacao+0xc4>)
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403aee:	4e2b      	ldr	r6, [pc, #172]	; (403b9c <task_orientacao+0xcc>)
  403af0:	e007      	b.n	403b02 <task_orientacao+0x32>
			if(ori == DIREITA){
  403af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403af6:	2b01      	cmp	r3, #1
  403af8:	d020      	beq.n	403b3c <task_orientacao+0x6c>
			if(ori == FRENTE){
  403afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403afe:	2b02      	cmp	r3, #2
  403b00:	d02c      	beq.n	403b5c <task_orientacao+0x8c>
		if (xQueueReceive(xQueueOrientacao, &ori, 1)) {
  403b02:	2300      	movs	r3, #0
  403b04:	2201      	movs	r2, #1
  403b06:	f10d 0107 	add.w	r1, sp, #7
  403b0a:	6828      	ldr	r0, [r5, #0]
  403b0c:	4c26      	ldr	r4, [pc, #152]	; (403ba8 <task_orientacao+0xd8>)
  403b0e:	47a0      	blx	r4
  403b10:	2800      	cmp	r0, #0
  403b12:	d033      	beq.n	403b7c <task_orientacao+0xac>
			if(ori == ESQUERDA){
  403b14:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403b18:	2b00      	cmp	r3, #0
  403b1a:	d1ea      	bne.n	403af2 <task_orientacao+0x22>
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  403b1c:	2101      	movs	r1, #1
  403b1e:	4638      	mov	r0, r7
  403b20:	4b22      	ldr	r3, [pc, #136]	; (403bac <task_orientacao+0xdc>)
  403b22:	4798      	blx	r3
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403b24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b28:	4630      	mov	r0, r6
  403b2a:	4c1b      	ldr	r4, [pc, #108]	; (403b98 <task_orientacao+0xc8>)
  403b2c:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403b2e:	2104      	movs	r1, #4
  403b30:	481b      	ldr	r0, [pc, #108]	; (403ba0 <task_orientacao+0xd0>)
  403b32:	47a0      	blx	r4
				vTaskDelay(10);
  403b34:	200a      	movs	r0, #10
  403b36:	4b1e      	ldr	r3, [pc, #120]	; (403bb0 <task_orientacao+0xe0>)
  403b38:	4798      	blx	r3
  403b3a:	e7da      	b.n	403af2 <task_orientacao+0x22>
				pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  403b3c:	2104      	movs	r1, #4
  403b3e:	4818      	ldr	r0, [pc, #96]	; (403ba0 <task_orientacao+0xd0>)
  403b40:	4b1a      	ldr	r3, [pc, #104]	; (403bac <task_orientacao+0xdc>)
  403b42:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403b44:	2101      	movs	r1, #1
  403b46:	4638      	mov	r0, r7
  403b48:	4c13      	ldr	r4, [pc, #76]	; (403b98 <task_orientacao+0xc8>)
  403b4a:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403b4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b50:	4630      	mov	r0, r6
  403b52:	47a0      	blx	r4
				vTaskDelay(10);
  403b54:	200a      	movs	r0, #10
  403b56:	4b16      	ldr	r3, [pc, #88]	; (403bb0 <task_orientacao+0xe0>)
  403b58:	4798      	blx	r3
  403b5a:	e7ce      	b.n	403afa <task_orientacao+0x2a>
				pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  403b5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b60:	4630      	mov	r0, r6
  403b62:	4b12      	ldr	r3, [pc, #72]	; (403bac <task_orientacao+0xdc>)
  403b64:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403b66:	2101      	movs	r1, #1
  403b68:	4638      	mov	r0, r7
  403b6a:	4c0b      	ldr	r4, [pc, #44]	; (403b98 <task_orientacao+0xc8>)
  403b6c:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403b6e:	2104      	movs	r1, #4
  403b70:	480b      	ldr	r0, [pc, #44]	; (403ba0 <task_orientacao+0xd0>)
  403b72:	47a0      	blx	r4
				vTaskDelay(10);
  403b74:	200a      	movs	r0, #10
  403b76:	4b0e      	ldr	r3, [pc, #56]	; (403bb0 <task_orientacao+0xe0>)
  403b78:	4798      	blx	r3
  403b7a:	e7c2      	b.n	403b02 <task_orientacao+0x32>
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403b7c:	2101      	movs	r1, #1
  403b7e:	4638      	mov	r0, r7
  403b80:	4c05      	ldr	r4, [pc, #20]	; (403b98 <task_orientacao+0xc8>)
  403b82:	47a0      	blx	r4
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403b84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403b88:	4630      	mov	r0, r6
  403b8a:	47a0      	blx	r4
			pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403b8c:	2104      	movs	r1, #4
  403b8e:	4804      	ldr	r0, [pc, #16]	; (403ba0 <task_orientacao+0xd0>)
  403b90:	47a0      	blx	r4
  403b92:	e7b6      	b.n	403b02 <task_orientacao+0x32>
  403b94:	400e0e00 	.word	0x400e0e00
  403b98:	004016d9 	.word	0x004016d9
  403b9c:	400e1200 	.word	0x400e1200
  403ba0:	400e1000 	.word	0x400e1000
  403ba4:	20400e24 	.word	0x20400e24
  403ba8:	00402845 	.word	0x00402845
  403bac:	004016dd 	.word	0x004016dd
  403bb0:	00403071 	.word	0x00403071

00403bb4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bb6:	b083      	sub	sp, #12
  403bb8:	4605      	mov	r5, r0
  403bba:	460c      	mov	r4, r1
	uint32_t val = 0;
  403bbc:	2300      	movs	r3, #0
  403bbe:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403bc0:	4b2a      	ldr	r3, [pc, #168]	; (403c6c <usart_serial_getchar+0xb8>)
  403bc2:	4298      	cmp	r0, r3
  403bc4:	d013      	beq.n	403bee <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403bc6:	4b2a      	ldr	r3, [pc, #168]	; (403c70 <usart_serial_getchar+0xbc>)
  403bc8:	4298      	cmp	r0, r3
  403bca:	d018      	beq.n	403bfe <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403bcc:	4b29      	ldr	r3, [pc, #164]	; (403c74 <usart_serial_getchar+0xc0>)
  403bce:	4298      	cmp	r0, r3
  403bd0:	d01d      	beq.n	403c0e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403bd2:	4b29      	ldr	r3, [pc, #164]	; (403c78 <usart_serial_getchar+0xc4>)
  403bd4:	429d      	cmp	r5, r3
  403bd6:	d022      	beq.n	403c1e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403bd8:	4b28      	ldr	r3, [pc, #160]	; (403c7c <usart_serial_getchar+0xc8>)
  403bda:	429d      	cmp	r5, r3
  403bdc:	d027      	beq.n	403c2e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403bde:	4b28      	ldr	r3, [pc, #160]	; (403c80 <usart_serial_getchar+0xcc>)
  403be0:	429d      	cmp	r5, r3
  403be2:	d02e      	beq.n	403c42 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403be4:	4b27      	ldr	r3, [pc, #156]	; (403c84 <usart_serial_getchar+0xd0>)
  403be6:	429d      	cmp	r5, r3
  403be8:	d035      	beq.n	403c56 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403bea:	b003      	add	sp, #12
  403bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403bee:	461f      	mov	r7, r3
  403bf0:	4e25      	ldr	r6, [pc, #148]	; (403c88 <usart_serial_getchar+0xd4>)
  403bf2:	4621      	mov	r1, r4
  403bf4:	4638      	mov	r0, r7
  403bf6:	47b0      	blx	r6
  403bf8:	2800      	cmp	r0, #0
  403bfa:	d1fa      	bne.n	403bf2 <usart_serial_getchar+0x3e>
  403bfc:	e7e9      	b.n	403bd2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403bfe:	461f      	mov	r7, r3
  403c00:	4e21      	ldr	r6, [pc, #132]	; (403c88 <usart_serial_getchar+0xd4>)
  403c02:	4621      	mov	r1, r4
  403c04:	4638      	mov	r0, r7
  403c06:	47b0      	blx	r6
  403c08:	2800      	cmp	r0, #0
  403c0a:	d1fa      	bne.n	403c02 <usart_serial_getchar+0x4e>
  403c0c:	e7e4      	b.n	403bd8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403c0e:	461f      	mov	r7, r3
  403c10:	4e1d      	ldr	r6, [pc, #116]	; (403c88 <usart_serial_getchar+0xd4>)
  403c12:	4621      	mov	r1, r4
  403c14:	4638      	mov	r0, r7
  403c16:	47b0      	blx	r6
  403c18:	2800      	cmp	r0, #0
  403c1a:	d1fa      	bne.n	403c12 <usart_serial_getchar+0x5e>
  403c1c:	e7df      	b.n	403bde <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403c1e:	461f      	mov	r7, r3
  403c20:	4e19      	ldr	r6, [pc, #100]	; (403c88 <usart_serial_getchar+0xd4>)
  403c22:	4621      	mov	r1, r4
  403c24:	4638      	mov	r0, r7
  403c26:	47b0      	blx	r6
  403c28:	2800      	cmp	r0, #0
  403c2a:	d1fa      	bne.n	403c22 <usart_serial_getchar+0x6e>
  403c2c:	e7da      	b.n	403be4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403c2e:	461e      	mov	r6, r3
  403c30:	4d16      	ldr	r5, [pc, #88]	; (403c8c <usart_serial_getchar+0xd8>)
  403c32:	a901      	add	r1, sp, #4
  403c34:	4630      	mov	r0, r6
  403c36:	47a8      	blx	r5
  403c38:	2800      	cmp	r0, #0
  403c3a:	d1fa      	bne.n	403c32 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403c3c:	9b01      	ldr	r3, [sp, #4]
  403c3e:	7023      	strb	r3, [r4, #0]
  403c40:	e7d3      	b.n	403bea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c42:	461e      	mov	r6, r3
  403c44:	4d11      	ldr	r5, [pc, #68]	; (403c8c <usart_serial_getchar+0xd8>)
  403c46:	a901      	add	r1, sp, #4
  403c48:	4630      	mov	r0, r6
  403c4a:	47a8      	blx	r5
  403c4c:	2800      	cmp	r0, #0
  403c4e:	d1fa      	bne.n	403c46 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403c50:	9b01      	ldr	r3, [sp, #4]
  403c52:	7023      	strb	r3, [r4, #0]
  403c54:	e7c9      	b.n	403bea <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403c56:	461e      	mov	r6, r3
  403c58:	4d0c      	ldr	r5, [pc, #48]	; (403c8c <usart_serial_getchar+0xd8>)
  403c5a:	a901      	add	r1, sp, #4
  403c5c:	4630      	mov	r0, r6
  403c5e:	47a8      	blx	r5
  403c60:	2800      	cmp	r0, #0
  403c62:	d1fa      	bne.n	403c5a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403c64:	9b01      	ldr	r3, [sp, #4]
  403c66:	7023      	strb	r3, [r4, #0]
}
  403c68:	e7bf      	b.n	403bea <usart_serial_getchar+0x36>
  403c6a:	bf00      	nop
  403c6c:	400e0800 	.word	0x400e0800
  403c70:	400e0a00 	.word	0x400e0a00
  403c74:	400e1a00 	.word	0x400e1a00
  403c78:	400e1c00 	.word	0x400e1c00
  403c7c:	40024000 	.word	0x40024000
  403c80:	40028000 	.word	0x40028000
  403c84:	4002c000 	.word	0x4002c000
  403c88:	00401aa3 	.word	0x00401aa3
  403c8c:	00401baf 	.word	0x00401baf

00403c90 <usart_serial_putchar>:
{
  403c90:	b570      	push	{r4, r5, r6, lr}
  403c92:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403c94:	4b2a      	ldr	r3, [pc, #168]	; (403d40 <usart_serial_putchar+0xb0>)
  403c96:	4298      	cmp	r0, r3
  403c98:	d013      	beq.n	403cc2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403c9a:	4b2a      	ldr	r3, [pc, #168]	; (403d44 <usart_serial_putchar+0xb4>)
  403c9c:	4298      	cmp	r0, r3
  403c9e:	d019      	beq.n	403cd4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403ca0:	4b29      	ldr	r3, [pc, #164]	; (403d48 <usart_serial_putchar+0xb8>)
  403ca2:	4298      	cmp	r0, r3
  403ca4:	d01f      	beq.n	403ce6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403ca6:	4b29      	ldr	r3, [pc, #164]	; (403d4c <usart_serial_putchar+0xbc>)
  403ca8:	4298      	cmp	r0, r3
  403caa:	d025      	beq.n	403cf8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403cac:	4b28      	ldr	r3, [pc, #160]	; (403d50 <usart_serial_putchar+0xc0>)
  403cae:	4298      	cmp	r0, r3
  403cb0:	d02b      	beq.n	403d0a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403cb2:	4b28      	ldr	r3, [pc, #160]	; (403d54 <usart_serial_putchar+0xc4>)
  403cb4:	4298      	cmp	r0, r3
  403cb6:	d031      	beq.n	403d1c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403cb8:	4b27      	ldr	r3, [pc, #156]	; (403d58 <usart_serial_putchar+0xc8>)
  403cba:	4298      	cmp	r0, r3
  403cbc:	d037      	beq.n	403d2e <usart_serial_putchar+0x9e>
	return 0;
  403cbe:	2000      	movs	r0, #0
}
  403cc0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cc2:	461e      	mov	r6, r3
  403cc4:	4d25      	ldr	r5, [pc, #148]	; (403d5c <usart_serial_putchar+0xcc>)
  403cc6:	4621      	mov	r1, r4
  403cc8:	4630      	mov	r0, r6
  403cca:	47a8      	blx	r5
  403ccc:	2800      	cmp	r0, #0
  403cce:	d1fa      	bne.n	403cc6 <usart_serial_putchar+0x36>
		return 1;
  403cd0:	2001      	movs	r0, #1
  403cd2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cd4:	461e      	mov	r6, r3
  403cd6:	4d21      	ldr	r5, [pc, #132]	; (403d5c <usart_serial_putchar+0xcc>)
  403cd8:	4621      	mov	r1, r4
  403cda:	4630      	mov	r0, r6
  403cdc:	47a8      	blx	r5
  403cde:	2800      	cmp	r0, #0
  403ce0:	d1fa      	bne.n	403cd8 <usart_serial_putchar+0x48>
		return 1;
  403ce2:	2001      	movs	r0, #1
  403ce4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403ce6:	461e      	mov	r6, r3
  403ce8:	4d1c      	ldr	r5, [pc, #112]	; (403d5c <usart_serial_putchar+0xcc>)
  403cea:	4621      	mov	r1, r4
  403cec:	4630      	mov	r0, r6
  403cee:	47a8      	blx	r5
  403cf0:	2800      	cmp	r0, #0
  403cf2:	d1fa      	bne.n	403cea <usart_serial_putchar+0x5a>
		return 1;
  403cf4:	2001      	movs	r0, #1
  403cf6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403cf8:	461e      	mov	r6, r3
  403cfa:	4d18      	ldr	r5, [pc, #96]	; (403d5c <usart_serial_putchar+0xcc>)
  403cfc:	4621      	mov	r1, r4
  403cfe:	4630      	mov	r0, r6
  403d00:	47a8      	blx	r5
  403d02:	2800      	cmp	r0, #0
  403d04:	d1fa      	bne.n	403cfc <usart_serial_putchar+0x6c>
		return 1;
  403d06:	2001      	movs	r0, #1
  403d08:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d0a:	461e      	mov	r6, r3
  403d0c:	4d14      	ldr	r5, [pc, #80]	; (403d60 <usart_serial_putchar+0xd0>)
  403d0e:	4621      	mov	r1, r4
  403d10:	4630      	mov	r0, r6
  403d12:	47a8      	blx	r5
  403d14:	2800      	cmp	r0, #0
  403d16:	d1fa      	bne.n	403d0e <usart_serial_putchar+0x7e>
		return 1;
  403d18:	2001      	movs	r0, #1
  403d1a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d1c:	461e      	mov	r6, r3
  403d1e:	4d10      	ldr	r5, [pc, #64]	; (403d60 <usart_serial_putchar+0xd0>)
  403d20:	4621      	mov	r1, r4
  403d22:	4630      	mov	r0, r6
  403d24:	47a8      	blx	r5
  403d26:	2800      	cmp	r0, #0
  403d28:	d1fa      	bne.n	403d20 <usart_serial_putchar+0x90>
		return 1;
  403d2a:	2001      	movs	r0, #1
  403d2c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403d2e:	461e      	mov	r6, r3
  403d30:	4d0b      	ldr	r5, [pc, #44]	; (403d60 <usart_serial_putchar+0xd0>)
  403d32:	4621      	mov	r1, r4
  403d34:	4630      	mov	r0, r6
  403d36:	47a8      	blx	r5
  403d38:	2800      	cmp	r0, #0
  403d3a:	d1fa      	bne.n	403d32 <usart_serial_putchar+0xa2>
		return 1;
  403d3c:	2001      	movs	r0, #1
  403d3e:	bd70      	pop	{r4, r5, r6, pc}
  403d40:	400e0800 	.word	0x400e0800
  403d44:	400e0a00 	.word	0x400e0a00
  403d48:	400e1a00 	.word	0x400e1a00
  403d4c:	400e1c00 	.word	0x400e1c00
  403d50:	40024000 	.word	0x40024000
  403d54:	40028000 	.word	0x40028000
  403d58:	4002c000 	.word	0x4002c000
  403d5c:	00401a91 	.word	0x00401a91
  403d60:	00401b99 	.word	0x00401b99

00403d64 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403d64:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403d66:	460a      	mov	r2, r1
  403d68:	4601      	mov	r1, r0
  403d6a:	4802      	ldr	r0, [pc, #8]	; (403d74 <vApplicationStackOverflowHook+0x10>)
  403d6c:	4b02      	ldr	r3, [pc, #8]	; (403d78 <vApplicationStackOverflowHook+0x14>)
  403d6e:	4798      	blx	r3
  403d70:	e7fe      	b.n	403d70 <vApplicationStackOverflowHook+0xc>
  403d72:	bf00      	nop
  403d74:	0040be0c 	.word	0x0040be0c
  403d78:	004074a1 	.word	0x004074a1

00403d7c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403d7c:	4770      	bx	lr

00403d7e <vApplicationMallocFailedHook>:
  403d7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d82:	b672      	cpsid	i
  403d84:	f383 8811 	msr	BASEPRI, r3
  403d88:	f3bf 8f6f 	isb	sy
  403d8c:	f3bf 8f4f 	dsb	sy
  403d90:	b662      	cpsie	i
  403d92:	e7fe      	b.n	403d92 <vApplicationMallocFailedHook+0x14>

00403d94 <mcu6050_i2c_bus_init>:
	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

void mcu6050_i2c_bus_init(void)
{
  403d94:	b530      	push	{r4, r5, lr}
  403d96:	b085      	sub	sp, #20
	twihs_options_t mcu6050_option;
	pmc_enable_periph_clk(ID_TWIHS2);
  403d98:	2029      	movs	r0, #41	; 0x29
  403d9a:	4c0e      	ldr	r4, [pc, #56]	; (403dd4 <mcu6050_i2c_bus_init+0x40>)
  403d9c:	47a0      	blx	r4
	/* Configure the options of TWI driver */
	mcu6050_option.master_clk = sysclk_get_cpu_hz();
  403d9e:	4b0e      	ldr	r3, [pc, #56]	; (403dd8 <mcu6050_i2c_bus_init+0x44>)
  403da0:	9301      	str	r3, [sp, #4]
	mcu6050_option.speed      = 40000;
  403da2:	f649 4340 	movw	r3, #40000	; 0x9c40
  403da6:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS2, &mcu6050_option);
  403da8:	a901      	add	r1, sp, #4
  403daa:	480c      	ldr	r0, [pc, #48]	; (403ddc <mcu6050_i2c_bus_init+0x48>)
  403dac:	4b0c      	ldr	r3, [pc, #48]	; (403de0 <mcu6050_i2c_bus_init+0x4c>)
  403dae:	4798      	blx	r3
	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403db0:	2010      	movs	r0, #16
  403db2:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403db4:	4d0b      	ldr	r5, [pc, #44]	; (403de4 <mcu6050_i2c_bus_init+0x50>)
  403db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403dba:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403dbe:	4628      	mov	r0, r5
  403dc0:	4c09      	ldr	r4, [pc, #36]	; (403de8 <mcu6050_i2c_bus_init+0x54>)
  403dc2:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  403dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403dc8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403dcc:	4628      	mov	r0, r5
  403dce:	47a0      	blx	r4
}
  403dd0:	b005      	add	sp, #20
  403dd2:	bd30      	pop	{r4, r5, pc}
  403dd4:	00401a3d 	.word	0x00401a3d
  403dd8:	11e1a300 	.word	0x11e1a300
  403ddc:	40060000 	.word	0x40060000
  403de0:	004003a9 	.word	0x004003a9
  403de4:	400e1400 	.word	0x400e1400
  403de8:	004016e1 	.word	0x004016e1

00403dec <mcu6050_i2c_bus_write>:

int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403dec:	b500      	push	{lr}
  403dee:	b087      	sub	sp, #28
	int32_t ierror = 0x00;
	twihs_packet_t p_packet;
	p_packet.chip         = dev_addr;
  403df0:	f88d 0014 	strb.w	r0, [sp, #20]
	p_packet.addr[0]      = reg_addr;
  403df4:	f88d 1004 	strb.w	r1, [sp, #4]
	p_packet.addr_length  = 1;
  403df8:	2101      	movs	r1, #1
  403dfa:	9102      	str	r1, [sp, #8]
	p_packet.buffer       = reg_data;
  403dfc:	9203      	str	r2, [sp, #12]
	p_packet.length       = cnt;
  403dfe:	9304      	str	r3, [sp, #16]
	ierror = twihs_master_write(TWIHS2, &p_packet);
  403e00:	a901      	add	r1, sp, #4
  403e02:	4803      	ldr	r0, [pc, #12]	; (403e10 <mcu6050_i2c_bus_write+0x24>)
  403e04:	4b03      	ldr	r3, [pc, #12]	; (403e14 <mcu6050_i2c_bus_write+0x28>)
  403e06:	4798      	blx	r3
	return (int8_t)ierror;
}
  403e08:	b240      	sxtb	r0, r0
  403e0a:	b007      	add	sp, #28
  403e0c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e10:	40060000 	.word	0x40060000
  403e14:	00400489 	.word	0x00400489

00403e18 <mcu6050_i2c_bus_read>:

int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  403e18:	b500      	push	{lr}
  403e1a:	b087      	sub	sp, #28
    int32_t ierror = 0x00;
    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  403e1c:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403e20:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403e24:	2101      	movs	r1, #1
  403e26:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403e28:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  403e2a:	9304      	str	r3, [sp, #16]

// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para conseguirmos pegar o valor correto.
    ierror = twihs_master_read(TWIHS2, &p_packet);
  403e2c:	a901      	add	r1, sp, #4
  403e2e:	4803      	ldr	r0, [pc, #12]	; (403e3c <mcu6050_i2c_bus_read+0x24>)
  403e30:	4b03      	ldr	r3, [pc, #12]	; (403e40 <mcu6050_i2c_bus_read+0x28>)
  403e32:	4798      	blx	r3
    return (int8_t)ierror;
}
  403e34:	b240      	sxtb	r0, r0
  403e36:	b007      	add	sp, #28
  403e38:	f85d fb04 	ldr.w	pc, [sp], #4
  403e3c:	40060000 	.word	0x40060000
  403e40:	004003dd 	.word	0x004003dd
  403e44:	00000000 	.word	0x00000000

00403e48 <task_imu>:
static void task_imu ( void * pvParameters ) {
  403e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e4c:	ed2d 8b0a 	vpush	{d8-d12}
  403e50:	b0b2      	sub	sp, #200	; 0xc8
    mcu6050_i2c_bus_init();
  403e52:	4b3b      	ldr	r3, [pc, #236]	; (403f40 <task_imu+0xf8>)
  403e54:	4798      	blx	r3
	rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  403e56:	2168      	movs	r1, #104	; 0x68
  403e58:	483a      	ldr	r0, [pc, #232]	; (403f44 <task_imu+0xfc>)
  403e5a:	4b3b      	ldr	r3, [pc, #236]	; (403f48 <task_imu+0x100>)
  403e5c:	4798      	blx	r3
    if(rtn != TWIHS_SUCCESS){
  403e5e:	b2c0      	uxtb	r0, r0
  403e60:	2800      	cmp	r0, #0
  403e62:	d042      	beq.n	403eea <task_imu+0xa2>
        printf("[ERRO] [i2c] [probe] \n");
  403e64:	4839      	ldr	r0, [pc, #228]	; (403f4c <task_imu+0x104>)
  403e66:	4b3a      	ldr	r3, [pc, #232]	; (403f50 <task_imu+0x108>)
  403e68:	4798      	blx	r3
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  403e6a:	2301      	movs	r3, #1
  403e6c:	aa2b      	add	r2, sp, #172	; 0xac
  403e6e:	2175      	movs	r1, #117	; 0x75
  403e70:	2068      	movs	r0, #104	; 0x68
  403e72:	4c38      	ldr	r4, [pc, #224]	; (403f54 <task_imu+0x10c>)
  403e74:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS){
  403e76:	2800      	cmp	r0, #0
  403e78:	d03b      	beq.n	403ef2 <task_imu+0xaa>
		printf("[ERRO] [i2c] [read] \n");
  403e7a:	4837      	ldr	r0, [pc, #220]	; (403f58 <task_imu+0x110>)
  403e7c:	4b34      	ldr	r3, [pc, #208]	; (403f50 <task_imu+0x108>)
  403e7e:	4798      	blx	r3
	if(bufferRX[0] == 0x68){
  403e80:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
  403e84:	2b68      	cmp	r3, #104	; 0x68
		printf("Sucesso! MPU6050 encontrado!\r");
  403e86:	bf0c      	ite	eq
  403e88:	4834      	ldreq	r0, [pc, #208]	; (403f5c <task_imu+0x114>)
		printf("Falha! MPU6050 não encontrado!\r");
  403e8a:	4835      	ldrne	r0, [pc, #212]	; (403f60 <task_imu+0x118>)
  403e8c:	4b35      	ldr	r3, [pc, #212]	; (403f64 <task_imu+0x11c>)
  403e8e:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  403e90:	2301      	movs	r3, #1
  403e92:	aa32      	add	r2, sp, #200	; 0xc8
  403e94:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403e98:	216b      	movs	r1, #107	; 0x6b
  403e9a:	2068      	movs	r0, #104	; 0x68
  403e9c:	4c32      	ldr	r4, [pc, #200]	; (403f68 <task_imu+0x120>)
  403e9e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ea0:	bb70      	cbnz	r0, 403f00 <task_imu+0xb8>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  403ea2:	aa32      	add	r2, sp, #200	; 0xc8
  403ea4:	2300      	movs	r3, #0
  403ea6:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403eaa:	2301      	movs	r3, #1
  403eac:	211c      	movs	r1, #28
  403eae:	2068      	movs	r0, #104	; 0x68
  403eb0:	4c2d      	ldr	r4, [pc, #180]	; (403f68 <task_imu+0x120>)
  403eb2:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403eb4:	bb40      	cbnz	r0, 403f08 <task_imu+0xc0>
	bufferTX[0] = 0x00; // 250 °/s
  403eb6:	aa32      	add	r2, sp, #200	; 0xc8
  403eb8:	2300      	movs	r3, #0
  403eba:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  403ebe:	2301      	movs	r3, #1
  403ec0:	211b      	movs	r1, #27
  403ec2:	2068      	movs	r0, #104	; 0x68
  403ec4:	4c28      	ldr	r4, [pc, #160]	; (403f68 <task_imu+0x120>)
  403ec6:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403ec8:	bb10      	cbnz	r0, 403f10 <task_imu+0xc8>
	FusionAhrsInitialise(&ahrs); 
  403eca:	a80b      	add	r0, sp, #44	; 0x2c
  403ecc:	4b27      	ldr	r3, [pc, #156]	; (403f6c <task_imu+0x124>)
  403ece:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403ed0:	2401      	movs	r4, #1
  403ed2:	f04f 0a68 	mov.w	sl, #104	; 0x68
		if(sqrt(proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z) < 0.3) {
  403ed6:	f20f 0960 	addw	r9, pc, #96	; 0x60
  403eda:	e9d9 8900 	ldrd	r8, r9, [r9]
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
  403ede:	4e24      	ldr	r6, [pc, #144]	; (403f70 <task_imu+0x128>)
    return radians * (180.0f / (float) M_PI);
  403ee0:	eddf aa24 	vldr	s21, [pc, #144]	; 403f74 <task_imu+0x12c>
		if(euler.angle.roll > 60){
  403ee4:	ed9f aa24 	vldr	s20, [pc, #144]	; 403f78 <task_imu+0x130>
  403ee8:	e082      	b.n	403ff0 <task_imu+0x1a8>
        printf("[DADO] [i2c] probe OK\n" );
  403eea:	4824      	ldr	r0, [pc, #144]	; (403f7c <task_imu+0x134>)
  403eec:	4b18      	ldr	r3, [pc, #96]	; (403f50 <task_imu+0x108>)
  403eee:	4798      	blx	r3
  403ef0:	e7bb      	b.n	403e6a <task_imu+0x22>
		printf("[DADO] [i2c] %x:%x \n", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  403ef2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
  403ef6:	2175      	movs	r1, #117	; 0x75
  403ef8:	4821      	ldr	r0, [pc, #132]	; (403f80 <task_imu+0x138>)
  403efa:	4b1a      	ldr	r3, [pc, #104]	; (403f64 <task_imu+0x11c>)
  403efc:	4798      	blx	r3
  403efe:	e7bf      	b.n	403e80 <task_imu+0x38>
		printf("[ERRO] [i2c] [write] \n");
  403f00:	4820      	ldr	r0, [pc, #128]	; (403f84 <task_imu+0x13c>)
  403f02:	4b13      	ldr	r3, [pc, #76]	; (403f50 <task_imu+0x108>)
  403f04:	4798      	blx	r3
  403f06:	e7cc      	b.n	403ea2 <task_imu+0x5a>
		printf("[ERRO] [i2c] [write] \n");
  403f08:	481e      	ldr	r0, [pc, #120]	; (403f84 <task_imu+0x13c>)
  403f0a:	4b11      	ldr	r3, [pc, #68]	; (403f50 <task_imu+0x108>)
  403f0c:	4798      	blx	r3
  403f0e:	e7d2      	b.n	403eb6 <task_imu+0x6e>
		printf("[ERRO] [i2c] [write] \n");
  403f10:	481c      	ldr	r0, [pc, #112]	; (403f84 <task_imu+0x13c>)
  403f12:	4b0f      	ldr	r3, [pc, #60]	; (403f50 <task_imu+0x108>)
  403f14:	4798      	blx	r3
  403f16:	e7d8      	b.n	403eca <task_imu+0x82>
			xSemaphoreGive(xSemaphoreHouseDown);
  403f18:	2300      	movs	r3, #0
  403f1a:	461a      	mov	r2, r3
  403f1c:	4619      	mov	r1, r3
  403f1e:	481a      	ldr	r0, [pc, #104]	; (403f88 <task_imu+0x140>)
  403f20:	6800      	ldr	r0, [r0, #0]
  403f22:	4d1a      	ldr	r5, [pc, #104]	; (403f8c <task_imu+0x144>)
  403f24:	47a8      	blx	r5
  403f26:	e13d      	b.n	4041a4 <task_imu+0x35c>
    return asinf(value);
  403f28:	ee17 0a90 	vmov	r0, s15
  403f2c:	4b18      	ldr	r3, [pc, #96]	; (403f90 <task_imu+0x148>)
  403f2e:	4798      	blx	r3
  403f30:	ee0b 0a90 	vmov	s23, r0
  403f34:	e034      	b.n	403fa0 <task_imu+0x158>
  403f36:	bf00      	nop
  403f38:	33333333 	.word	0x33333333
  403f3c:	3fd33333 	.word	0x3fd33333
  403f40:	00403d95 	.word	0x00403d95
  403f44:	40060000 	.word	0x40060000
  403f48:	00400529 	.word	0x00400529
  403f4c:	0040bd00 	.word	0x0040bd00
  403f50:	00407565 	.word	0x00407565
  403f54:	00403e19 	.word	0x00403e19
  403f58:	0040bd30 	.word	0x0040bd30
  403f5c:	0040bd60 	.word	0x0040bd60
  403f60:	0040bd80 	.word	0x0040bd80
  403f64:	004074a1 	.word	0x004074a1
  403f68:	00403ded 	.word	0x00403ded
  403f6c:	00400661 	.word	0x00400661
  403f70:	00404789 	.word	0x00404789
  403f74:	42652ee0 	.word	0x42652ee0
  403f78:	42700000 	.word	0x42700000
  403f7c:	0040bd18 	.word	0x0040bd18
  403f80:	0040bd48 	.word	0x0040bd48
  403f84:	0040bda4 	.word	0x0040bda4
  403f88:	20400e20 	.word	0x20400e20
  403f8c:	00402561 	.word	0x00402561
  403f90:	004046e9 	.word	0x004046e9
  403f94:	bfc90fdb 	.word	0xbfc90fdb
  403f98:	c2700000 	.word	0xc2700000
        return (float) M_PI / -2.0f;
  403f9c:	ed5f ba03 	vldr	s23, [pc, #-12]	; 403f94 <task_imu+0x14c>
    return radians * (180.0f / (float) M_PI);
  403fa0:	ee6b baaa 	vmul.f32	s23, s23, s21
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
  403fa4:	ee69 7a09 	vmul.f32	s15, s18, s18
  403fa8:	ee29 9a89 	vmul.f32	s18, s19, s18
  403fac:	ee28 8a88 	vmul.f32	s16, s17, s16
  403fb0:	ee7b 7a67 	vsub.f32	s15, s22, s15
  403fb4:	ee17 1a90 	vmov	r1, s15
  403fb8:	ee79 7a08 	vadd.f32	s15, s18, s16
  403fbc:	ee17 0a90 	vmov	r0, s15
  403fc0:	47b0      	blx	r6
		if(euler.angle.roll > 60){
  403fc2:	eeb4 caca 	vcmpe.f32	s24, s20
  403fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fca:	f300 8143 	bgt.w	404254 <task_imu+0x40c>
		if(euler.angle.roll < -60){
  403fce:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 403f98 <task_imu+0x150>
  403fd2:	eeb4 cae7 	vcmpe.f32	s24, s15
  403fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fda:	f100 8145 	bmi.w	404268 <task_imu+0x420>
		if(euler.angle.pitch > 60){
  403fde:	eef4 baca 	vcmpe.f32	s23, s20
  403fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403fe6:	f300 8149 	bgt.w	40427c <task_imu+0x434>
		vTaskDelay(1);   
  403fea:	4620      	mov	r0, r4
  403fec:	4ba9      	ldr	r3, [pc, #676]	; (404294 <task_imu+0x44c>)
  403fee:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403ff0:	4623      	mov	r3, r4
  403ff2:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
  403ff6:	213b      	movs	r1, #59	; 0x3b
  403ff8:	4650      	mov	r0, sl
  403ffa:	4da7      	ldr	r5, [pc, #668]	; (404298 <task_imu+0x450>)
  403ffc:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  403ffe:	4623      	mov	r3, r4
  404000:	aa27      	add	r2, sp, #156	; 0x9c
  404002:	213c      	movs	r1, #60	; 0x3c
  404004:	4650      	mov	r0, sl
  404006:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  404008:	4623      	mov	r3, r4
  40400a:	f10d 029e 	add.w	r2, sp, #158	; 0x9e
  40400e:	213d      	movs	r1, #61	; 0x3d
  404010:	4650      	mov	r0, sl
  404012:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  404014:	4623      	mov	r3, r4
  404016:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
  40401a:	2140      	movs	r1, #64	; 0x40
  40401c:	4650      	mov	r0, sl
  40401e:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  404020:	4623      	mov	r3, r4
  404022:	f10d 029d 	add.w	r2, sp, #157	; 0x9d
  404026:	213f      	movs	r1, #63	; 0x3f
  404028:	4650      	mov	r0, sl
  40402a:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  40402c:	4623      	mov	r3, r4
  40402e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
  404032:	2140      	movs	r1, #64	; 0x40
  404034:	4650      	mov	r0, sl
  404036:	47a8      	blx	r5
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  404038:	f89d 209f 	ldrb.w	r2, [sp, #159]	; 0x9f
  40403c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  404040:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404044:	b21b      	sxth	r3, r3
  404046:	ee09 3a10 	vmov	s18, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  40404a:	f89d 209e 	ldrb.w	r2, [sp, #158]	; 0x9e
  40404e:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
  404052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404056:	b21b      	sxth	r3, r3
  404058:	ee08 3a90 	vmov	s17, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  40405c:	f89d 209d 	ldrb.w	r2, [sp, #157]	; 0x9d
  404060:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
  404064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404068:	b21b      	sxth	r3, r3
  40406a:	ee08 3a10 	vmov	s16, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  40406e:	4623      	mov	r3, r4
  404070:	f10d 0299 	add.w	r2, sp, #153	; 0x99
  404074:	2143      	movs	r1, #67	; 0x43
  404076:	4650      	mov	r0, sl
  404078:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  40407a:	4623      	mov	r3, r4
  40407c:	f10d 0296 	add.w	r2, sp, #150	; 0x96
  404080:	2144      	movs	r1, #68	; 0x44
  404082:	4650      	mov	r0, sl
  404084:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  404086:	4623      	mov	r3, r4
  404088:	aa26      	add	r2, sp, #152	; 0x98
  40408a:	2145      	movs	r1, #69	; 0x45
  40408c:	4650      	mov	r0, sl
  40408e:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  404090:	4623      	mov	r3, r4
  404092:	f10d 0295 	add.w	r2, sp, #149	; 0x95
  404096:	2148      	movs	r1, #72	; 0x48
  404098:	4650      	mov	r0, sl
  40409a:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  40409c:	4623      	mov	r3, r4
  40409e:	f10d 0297 	add.w	r2, sp, #151	; 0x97
  4040a2:	2147      	movs	r1, #71	; 0x47
  4040a4:	4650      	mov	r0, sl
  4040a6:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  4040a8:	4623      	mov	r3, r4
  4040aa:	aa25      	add	r2, sp, #148	; 0x94
  4040ac:	2148      	movs	r1, #72	; 0x48
  4040ae:	4650      	mov	r0, sl
  4040b0:	47a8      	blx	r5
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  4040b2:	f89d 7099 	ldrb.w	r7, [sp, #153]	; 0x99
  4040b6:	f89d 1096 	ldrb.w	r1, [sp, #150]	; 0x96
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  4040ba:	f89d 5098 	ldrb.w	r5, [sp, #152]	; 0x98
  4040be:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  4040c2:	f89d 0097 	ldrb.w	r0, [sp, #151]	; 0x97
  4040c6:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
		proc_acc_x = (float)raw_acc_x/16384;
  4040ca:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  4040ce:	eddf 7a73 	vldr	s15, [pc, #460]	; 40429c <task_imu+0x454>
  4040d2:	ee29 9a27 	vmul.f32	s18, s18, s15
		proc_acc_y = (float)raw_acc_y/16384;
  4040d6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  4040da:	ee68 8aa7 	vmul.f32	s17, s17, s15
		proc_acc_z = (float)raw_acc_z/16384;
  4040de:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  4040e2:	ee28 8a27 	vmul.f32	s16, s16, s15
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  4040e6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		proc_gyr_x = (float)raw_gyr_x/131;
  4040ea:	b209      	sxth	r1, r1
  4040ec:	ee07 1a90 	vmov	s15, r1
  4040f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4040f4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 4042a0 <task_imu+0x458>
  4040f8:	ee87 ba87 	vdiv.f32	s22, s15, s14
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  4040fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
		proc_gyr_y = (float)raw_gyr_y/131;
  404100:	b212      	sxth	r2, r2
  404102:	ee07 2a90 	vmov	s15, r2
  404106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40410a:	eec7 ba87 	vdiv.f32	s23, s15, s14
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  40410e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		proc_gyr_z = (float)raw_gyr_z/131;
  404112:	b21b      	sxth	r3, r3
  404114:	ee07 3a90 	vmov	s15, r3
  404118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40411c:	eec7 9a87 	vdiv.f32	s19, s15, s14
		printf("acc_x: %f \n", proc_acc_x);
  404120:	4d60      	ldr	r5, [pc, #384]	; (4042a4 <task_imu+0x45c>)
  404122:	ee19 0a10 	vmov	r0, s18
  404126:	47a8      	blx	r5
  404128:	4602      	mov	r2, r0
  40412a:	460b      	mov	r3, r1
  40412c:	485e      	ldr	r0, [pc, #376]	; (4042a8 <task_imu+0x460>)
  40412e:	4f5f      	ldr	r7, [pc, #380]	; (4042ac <task_imu+0x464>)
  404130:	47b8      	blx	r7
		printf("acc_y: %f \n", proc_acc_y);
  404132:	ee18 0a90 	vmov	r0, s17
  404136:	47a8      	blx	r5
  404138:	4602      	mov	r2, r0
  40413a:	460b      	mov	r3, r1
  40413c:	485c      	ldr	r0, [pc, #368]	; (4042b0 <task_imu+0x468>)
  40413e:	47b8      	blx	r7
		printf("acc_z: %f \n\n", proc_acc_z);
  404140:	ee18 0a10 	vmov	r0, s16
  404144:	47a8      	blx	r5
  404146:	4602      	mov	r2, r0
  404148:	460b      	mov	r3, r1
  40414a:	485a      	ldr	r0, [pc, #360]	; (4042b4 <task_imu+0x46c>)
  40414c:	47b8      	blx	r7
		printf("gyr_x: %f \n", proc_gyr_x);
  40414e:	ee1b 0a10 	vmov	r0, s22
  404152:	47a8      	blx	r5
  404154:	4602      	mov	r2, r0
  404156:	460b      	mov	r3, r1
  404158:	4857      	ldr	r0, [pc, #348]	; (4042b8 <task_imu+0x470>)
  40415a:	47b8      	blx	r7
		printf("gyr_y: %f \n", proc_gyr_y);
  40415c:	ee1b 0a90 	vmov	r0, s23
  404160:	47a8      	blx	r5
  404162:	4602      	mov	r2, r0
  404164:	460b      	mov	r3, r1
  404166:	4855      	ldr	r0, [pc, #340]	; (4042bc <task_imu+0x474>)
  404168:	47b8      	blx	r7
		printf("gyr_z: %f \n\n", proc_gyr_z);
  40416a:	ee19 0a90 	vmov	r0, s19
  40416e:	47a8      	blx	r5
  404170:	4602      	mov	r2, r0
  404172:	460b      	mov	r3, r1
  404174:	4852      	ldr	r0, [pc, #328]	; (4042c0 <task_imu+0x478>)
  404176:	47b8      	blx	r7
		if(sqrt(proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z) < 0.3) {
  404178:	ee29 7a09 	vmul.f32	s14, s18, s18
  40417c:	ee68 7aa8 	vmul.f32	s15, s17, s17
  404180:	ee77 7a27 	vadd.f32	s15, s14, s15
  404184:	ee28 7a08 	vmul.f32	s14, s16, s16
  404188:	ee77 7a87 	vadd.f32	s15, s15, s14
  40418c:	ee17 0a90 	vmov	r0, s15
  404190:	47a8      	blx	r5
  404192:	4b4c      	ldr	r3, [pc, #304]	; (4042c4 <task_imu+0x47c>)
  404194:	4798      	blx	r3
  404196:	4642      	mov	r2, r8
  404198:	464b      	mov	r3, r9
  40419a:	4d4b      	ldr	r5, [pc, #300]	; (4042c8 <task_imu+0x480>)
  40419c:	47a8      	blx	r5
  40419e:	2800      	cmp	r0, #0
  4041a0:	f47f aeba 	bne.w	403f18 <task_imu+0xd0>
		const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z}; 
  4041a4:	ed8d ba04 	vstr	s22, [sp, #16]
  4041a8:	edcd ba05 	vstr	s23, [sp, #20]
  4041ac:	edcd 9a06 	vstr	s19, [sp, #24]
		const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};  
  4041b0:	ed8d 9a07 	vstr	s18, [sp, #28]
  4041b4:	edcd 8a08 	vstr	s17, [sp, #32]
  4041b8:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  4041bc:	4b43      	ldr	r3, [pc, #268]	; (4042cc <task_imu+0x484>)
  4041be:	9303      	str	r3, [sp, #12]
  4041c0:	ab07      	add	r3, sp, #28
  4041c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4041c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  4041ca:	ab04      	add	r3, sp, #16
  4041cc:	cb0e      	ldmia	r3, {r1, r2, r3}
  4041ce:	a80b      	add	r0, sp, #44	; 0x2c
  4041d0:	4d3f      	ldr	r5, [pc, #252]	; (4042d0 <task_imu+0x488>)
  4041d2:	47a8      	blx	r5
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  4041d4:	a90b      	add	r1, sp, #44	; 0x2c
  4041d6:	a82e      	add	r0, sp, #184	; 0xb8
  4041d8:	4b3e      	ldr	r3, [pc, #248]	; (4042d4 <task_imu+0x48c>)
  4041da:	4798      	blx	r3
  4041dc:	eddd 9a2e 	vldr	s19, [sp, #184]	; 0xb8
  4041e0:	eddd 8a2f 	vldr	s17, [sp, #188]	; 0xbc
  4041e4:	ed9d 8a30 	vldr	s16, [sp, #192]	; 0xc0
  4041e8:	ed9d 9a31 	vldr	s18, [sp, #196]	; 0xc4
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  4041ec:	ee68 7a08 	vmul.f32	s15, s16, s16
  4041f0:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
  4041f4:	ee3b ba67 	vsub.f32	s22, s22, s15
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
  4041f8:	ee68 6aa8 	vmul.f32	s13, s17, s17
  4041fc:	ee29 7aa8 	vmul.f32	s14, s19, s17
  404200:	ee68 7a09 	vmul.f32	s15, s16, s18
  404204:	ee7b 6a66 	vsub.f32	s13, s22, s13
  404208:	ee16 1a90 	vmov	r1, s13
  40420c:	ee77 7a27 	vadd.f32	s15, s14, s15
  404210:	ee17 0a90 	vmov	r0, s15
  404214:	47b0      	blx	r6
    return radians * (180.0f / (float) M_PI);
  404216:	ee07 0a90 	vmov	s15, r0
  40421a:	ee27 caaa 	vmul.f32	s24, s15, s21
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
  40421e:	ee29 7a88 	vmul.f32	s14, s19, s16
  404222:	ee68 7a89 	vmul.f32	s15, s17, s18
  404226:	ee77 7a67 	vsub.f32	s15, s14, s15
  40422a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  40422e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  404232:	eef4 7ac7 	vcmpe.f32	s15, s14
  404236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40423a:	f67f aeaf 	bls.w	403f9c <task_imu+0x154>
    if (value >= 1.0f) {
  40423e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  404242:	eef4 7ac7 	vcmpe.f32	s15, s14
  404246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40424a:	f6ff ae6d 	blt.w	403f28 <task_imu+0xe0>
        return (float) M_PI / 2.0f;
  40424e:	eddf ba22 	vldr	s23, [pc, #136]	; 4042d8 <task_imu+0x490>
  404252:	e6a5      	b.n	403fa0 <task_imu+0x158>
			ori = DIREITA;
  404254:	a932      	add	r1, sp, #200	; 0xc8
  404256:	f801 4d9d 	strb.w	r4, [r1, #-157]!
			xQueueSend(xQueueOrientacao, &ori, 0);
  40425a:	2300      	movs	r3, #0
  40425c:	461a      	mov	r2, r3
  40425e:	481f      	ldr	r0, [pc, #124]	; (4042dc <task_imu+0x494>)
  404260:	6800      	ldr	r0, [r0, #0]
  404262:	4d1f      	ldr	r5, [pc, #124]	; (4042e0 <task_imu+0x498>)
  404264:	47a8      	blx	r5
  404266:	e6b2      	b.n	403fce <task_imu+0x186>
			ori = ESQUERDA;
  404268:	2200      	movs	r2, #0
  40426a:	a932      	add	r1, sp, #200	; 0xc8
  40426c:	f801 2d9d 	strb.w	r2, [r1, #-157]!
			xQueueSend(xQueueOrientacao, &ori, 0);
  404270:	4613      	mov	r3, r2
  404272:	481a      	ldr	r0, [pc, #104]	; (4042dc <task_imu+0x494>)
  404274:	6800      	ldr	r0, [r0, #0]
  404276:	4d1a      	ldr	r5, [pc, #104]	; (4042e0 <task_imu+0x498>)
  404278:	47a8      	blx	r5
  40427a:	e6b0      	b.n	403fde <task_imu+0x196>
			ori = FRENTE;
  40427c:	a932      	add	r1, sp, #200	; 0xc8
  40427e:	2302      	movs	r3, #2
  404280:	f801 3d9d 	strb.w	r3, [r1, #-157]!
			xQueueSend(xQueueOrientacao, &ori, 0);
  404284:	2300      	movs	r3, #0
  404286:	461a      	mov	r2, r3
  404288:	4814      	ldr	r0, [pc, #80]	; (4042dc <task_imu+0x494>)
  40428a:	6800      	ldr	r0, [r0, #0]
  40428c:	4d14      	ldr	r5, [pc, #80]	; (4042e0 <task_imu+0x498>)
  40428e:	47a8      	blx	r5
  404290:	e6ab      	b.n	403fea <task_imu+0x1a2>
  404292:	bf00      	nop
  404294:	00403071 	.word	0x00403071
  404298:	00403e19 	.word	0x00403e19
  40429c:	38800000 	.word	0x38800000
  4042a0:	43030000 	.word	0x43030000
  4042a4:	00406015 	.word	0x00406015
  4042a8:	0040bdbc 	.word	0x0040bdbc
  4042ac:	004074a1 	.word	0x004074a1
  4042b0:	0040bdc8 	.word	0x0040bdc8
  4042b4:	0040bdd4 	.word	0x0040bdd4
  4042b8:	0040bde4 	.word	0x0040bde4
  4042bc:	0040bdf0 	.word	0x0040bdf0
  4042c0:	0040bdfc 	.word	0x0040bdfc
  4042c4:	0040462d 	.word	0x0040462d
  4042c8:	004065a1 	.word	0x004065a1
  4042cc:	3dcccccd 	.word	0x3dcccccd
  4042d0:	00400da9 	.word	0x00400da9
  4042d4:	00400691 	.word	0x00400691
  4042d8:	3fc90fdb 	.word	0x3fc90fdb
  4042dc:	20400e24 	.word	0x20400e24
  4042e0:	00402561 	.word	0x00402561

004042e4 <io_init>:

void io_init(void){
  4042e4:	b570      	push	{r4, r5, r6, lr}
	pmc_enable_periph_clk(LED0_PIO_ID);
  4042e6:	200c      	movs	r0, #12
  4042e8:	4d12      	ldr	r5, [pc, #72]	; (404334 <io_init+0x50>)
  4042ea:	47a8      	blx	r5
	pio_configure(LED0_PIO, PIO_OUTPUT_0, LED0_PIO_IDX_MASK, PIO_DEFAULT);
  4042ec:	4e12      	ldr	r6, [pc, #72]	; (404338 <io_init+0x54>)
  4042ee:	2300      	movs	r3, #0
  4042f0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4042f4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4042f8:	4630      	mov	r0, r6
  4042fa:	4c10      	ldr	r4, [pc, #64]	; (40433c <io_init+0x58>)
  4042fc:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  4042fe:	200a      	movs	r0, #10
  404300:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  404302:	2300      	movs	r3, #0
  404304:	2201      	movs	r2, #1
  404306:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40430a:	480d      	ldr	r0, [pc, #52]	; (404340 <io_init+0x5c>)
  40430c:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  40430e:	200c      	movs	r0, #12
  404310:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  404312:	2300      	movs	r3, #0
  404314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  404318:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40431c:	4630      	mov	r0, r6
  40431e:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  404320:	200b      	movs	r0, #11
  404322:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  404324:	2300      	movs	r3, #0
  404326:	2204      	movs	r2, #4
  404328:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40432c:	4805      	ldr	r0, [pc, #20]	; (404344 <io_init+0x60>)
  40432e:	47a0      	blx	r4
  404330:	bd70      	pop	{r4, r5, r6, pc}
  404332:	bf00      	nop
  404334:	00401a3d 	.word	0x00401a3d
  404338:	400e1200 	.word	0x400e1200
  40433c:	004017d1 	.word	0x004017d1
  404340:	400e0e00 	.word	0x400e0e00
  404344:	400e1000 	.word	0x400e1000

00404348 <task_house_down>:
static void task_house_down ( void * pvParameters ) {
  404348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	io_init();
  40434c:	4b13      	ldr	r3, [pc, #76]	; (40439c <task_house_down+0x54>)
  40434e:	4798      	blx	r3
	pio_set(LED0_PIO, LED0_PIO_IDX_MASK);
  404350:	f44f 7180 	mov.w	r1, #256	; 0x100
  404354:	4812      	ldr	r0, [pc, #72]	; (4043a0 <task_house_down+0x58>)
  404356:	4b13      	ldr	r3, [pc, #76]	; (4043a4 <task_house_down+0x5c>)
  404358:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphoreHouseDown, 1000)) {
  40435a:	4f13      	ldr	r7, [pc, #76]	; (4043a8 <task_house_down+0x60>)
  40435c:	4e13      	ldr	r6, [pc, #76]	; (4043ac <task_house_down+0x64>)
				pio_clear(LED0_PIO, LED0_PIO_IDX_MASK);
  40435e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4043a0 <task_house_down+0x58>
		if (xSemaphoreTake(xSemaphoreHouseDown, 1000)) {
  404362:	2400      	movs	r4, #0
  404364:	4623      	mov	r3, r4
  404366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40436a:	4621      	mov	r1, r4
  40436c:	6838      	ldr	r0, [r7, #0]
  40436e:	47b0      	blx	r6
  404370:	2800      	cmp	r0, #0
  404372:	d0f7      	beq.n	404364 <task_house_down+0x1c>
  404374:	2405      	movs	r4, #5
				pio_clear(LED0_PIO, LED0_PIO_IDX_MASK);
  404376:	f44f 7880 	mov.w	r8, #256	; 0x100
  40437a:	f8df a038 	ldr.w	sl, [pc, #56]	; 4043b4 <task_house_down+0x6c>
  40437e:	4641      	mov	r1, r8
  404380:	4648      	mov	r0, r9
  404382:	47d0      	blx	sl
				vTaskDelay(50);
  404384:	2032      	movs	r0, #50	; 0x32
  404386:	4d0a      	ldr	r5, [pc, #40]	; (4043b0 <task_house_down+0x68>)
  404388:	47a8      	blx	r5
				pio_set(LED0_PIO, LED0_PIO_IDX_MASK);
  40438a:	4641      	mov	r1, r8
  40438c:	4648      	mov	r0, r9
  40438e:	4b05      	ldr	r3, [pc, #20]	; (4043a4 <task_house_down+0x5c>)
  404390:	4798      	blx	r3
				vTaskDelay(50);
  404392:	2032      	movs	r0, #50	; 0x32
  404394:	47a8      	blx	r5
			for(int i = 0; i < 5; i++){
  404396:	3c01      	subs	r4, #1
  404398:	d1f1      	bne.n	40437e <task_house_down+0x36>
  40439a:	e7e2      	b.n	404362 <task_house_down+0x1a>
  40439c:	004042e5 	.word	0x004042e5
  4043a0:	400e1200 	.word	0x400e1200
  4043a4:	004016d9 	.word	0x004016d9
  4043a8:	20400e20 	.word	0x20400e20
  4043ac:	00402845 	.word	0x00402845
  4043b0:	00403071 	.word	0x00403071
  4043b4:	004016dd 	.word	0x004016dd

004043b8 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void) {
  4043b8:	b500      	push	{lr}
  4043ba:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  4043bc:	4b3d      	ldr	r3, [pc, #244]	; (4044b4 <main+0xfc>)
  4043be:	4798      	blx	r3
	board_init();
  4043c0:	4b3d      	ldr	r3, [pc, #244]	; (4044b8 <main+0x100>)
  4043c2:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  4043c4:	4b3d      	ldr	r3, [pc, #244]	; (4044bc <main+0x104>)
  4043c6:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4043c8:	4d3d      	ldr	r5, [pc, #244]	; (4044c0 <main+0x108>)
  4043ca:	4b3e      	ldr	r3, [pc, #248]	; (4044c4 <main+0x10c>)
  4043cc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4043ce:	4a3e      	ldr	r2, [pc, #248]	; (4044c8 <main+0x110>)
  4043d0:	4b3e      	ldr	r3, [pc, #248]	; (4044cc <main+0x114>)
  4043d2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4043d4:	4a3e      	ldr	r2, [pc, #248]	; (4044d0 <main+0x118>)
  4043d6:	4b3f      	ldr	r3, [pc, #252]	; (4044d4 <main+0x11c>)
  4043d8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4043da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4043de:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4043e0:	23c0      	movs	r3, #192	; 0xc0
  4043e2:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4043e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4043e8:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4043ea:	2400      	movs	r4, #0
  4043ec:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4043ee:	9408      	str	r4, [sp, #32]
  4043f0:	200e      	movs	r0, #14
  4043f2:	4b39      	ldr	r3, [pc, #228]	; (4044d8 <main+0x120>)
  4043f4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4043f6:	4a39      	ldr	r2, [pc, #228]	; (4044dc <main+0x124>)
  4043f8:	a904      	add	r1, sp, #16
  4043fa:	4628      	mov	r0, r5
  4043fc:	4b38      	ldr	r3, [pc, #224]	; (4044e0 <main+0x128>)
  4043fe:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404400:	4628      	mov	r0, r5
  404402:	4b38      	ldr	r3, [pc, #224]	; (4044e4 <main+0x12c>)
  404404:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404406:	4628      	mov	r0, r5
  404408:	4b37      	ldr	r3, [pc, #220]	; (4044e8 <main+0x130>)
  40440a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40440c:	4e37      	ldr	r6, [pc, #220]	; (4044ec <main+0x134>)
  40440e:	6833      	ldr	r3, [r6, #0]
  404410:	4621      	mov	r1, r4
  404412:	6898      	ldr	r0, [r3, #8]
  404414:	4d36      	ldr	r5, [pc, #216]	; (4044f0 <main+0x138>)
  404416:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404418:	6833      	ldr	r3, [r6, #0]
  40441a:	4621      	mov	r1, r4
  40441c:	6858      	ldr	r0, [r3, #4]
  40441e:	47a8      	blx	r5
	setbuf(stdout, NULL);
  404420:	6833      	ldr	r3, [r6, #0]
  404422:	4621      	mov	r1, r4
  404424:	6898      	ldr	r0, [r3, #8]
  404426:	47a8      	blx	r5
	configure_console();

	xSemaphoreHouseDown = xSemaphoreCreateBinary();
  404428:	2203      	movs	r2, #3
  40442a:	4621      	mov	r1, r4
  40442c:	2001      	movs	r0, #1
  40442e:	4d31      	ldr	r5, [pc, #196]	; (4044f4 <main+0x13c>)
  404430:	47a8      	blx	r5
  404432:	4b31      	ldr	r3, [pc, #196]	; (4044f8 <main+0x140>)
  404434:	6018      	str	r0, [r3, #0]

	xQueueOrientacao = xQueueCreate(32, sizeof(enum orientacao));
  404436:	4622      	mov	r2, r4
  404438:	2101      	movs	r1, #1
  40443a:	2020      	movs	r0, #32
  40443c:	47a8      	blx	r5
  40443e:	4b2f      	ldr	r3, [pc, #188]	; (4044fc <main+0x144>)
  404440:	6018      	str	r0, [r3, #0]
	if (xQueueOrientacao == NULL) {
  404442:	2800      	cmp	r0, #0
  404444:	d032      	beq.n	4044ac <main+0xf4>
		printf("Failed to create xQueueOrientacao\r");
	}

	if (xTaskCreate(task_house_down, "HouseDown", TASK_STACK_SIZE, NULL, TASK_STACK_PRIORITY, NULL) != pdPASS) {
  404446:	2300      	movs	r3, #0
  404448:	9303      	str	r3, [sp, #12]
  40444a:	9302      	str	r3, [sp, #8]
  40444c:	9301      	str	r3, [sp, #4]
  40444e:	9300      	str	r3, [sp, #0]
  404450:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404454:	492a      	ldr	r1, [pc, #168]	; (404500 <main+0x148>)
  404456:	482b      	ldr	r0, [pc, #172]	; (404504 <main+0x14c>)
  404458:	4c2b      	ldr	r4, [pc, #172]	; (404508 <main+0x150>)
  40445a:	47a0      	blx	r4
  40445c:	2801      	cmp	r0, #1
  40445e:	d002      	beq.n	404466 <main+0xae>
		printf("Failed to create HouseDown task\r\n");
  404460:	482a      	ldr	r0, [pc, #168]	; (40450c <main+0x154>)
  404462:	4b2b      	ldr	r3, [pc, #172]	; (404510 <main+0x158>)
  404464:	4798      	blx	r3
	}
	if (xTaskCreate(task_imu, "IMU", TASK_STACK_SIZE, NULL, TASK_STACK_PRIORITY, NULL) != pdPASS) {
  404466:	2300      	movs	r3, #0
  404468:	9303      	str	r3, [sp, #12]
  40446a:	9302      	str	r3, [sp, #8]
  40446c:	9301      	str	r3, [sp, #4]
  40446e:	9300      	str	r3, [sp, #0]
  404470:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404474:	4927      	ldr	r1, [pc, #156]	; (404514 <main+0x15c>)
  404476:	4828      	ldr	r0, [pc, #160]	; (404518 <main+0x160>)
  404478:	4c23      	ldr	r4, [pc, #140]	; (404508 <main+0x150>)
  40447a:	47a0      	blx	r4
  40447c:	2801      	cmp	r0, #1
  40447e:	d002      	beq.n	404486 <main+0xce>
		printf("Failed to create IMU task\r\n");
  404480:	4826      	ldr	r0, [pc, #152]	; (40451c <main+0x164>)
  404482:	4b23      	ldr	r3, [pc, #140]	; (404510 <main+0x158>)
  404484:	4798      	blx	r3
	}
	if (xTaskCreate(task_orientacao, "Orientacao", TASK_STACK_SIZE, NULL, TASK_STACK_PRIORITY, NULL) != pdPASS) {
  404486:	2300      	movs	r3, #0
  404488:	9303      	str	r3, [sp, #12]
  40448a:	9302      	str	r3, [sp, #8]
  40448c:	9301      	str	r3, [sp, #4]
  40448e:	9300      	str	r3, [sp, #0]
  404490:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404494:	4922      	ldr	r1, [pc, #136]	; (404520 <main+0x168>)
  404496:	4823      	ldr	r0, [pc, #140]	; (404524 <main+0x16c>)
  404498:	4c1b      	ldr	r4, [pc, #108]	; (404508 <main+0x150>)
  40449a:	47a0      	blx	r4
  40449c:	2801      	cmp	r0, #1
  40449e:	d002      	beq.n	4044a6 <main+0xee>
		printf("Failed to create Orientacao task\r\n");
  4044a0:	4821      	ldr	r0, [pc, #132]	; (404528 <main+0x170>)
  4044a2:	4b1b      	ldr	r3, [pc, #108]	; (404510 <main+0x158>)
  4044a4:	4798      	blx	r3
	}

	vTaskStartScheduler();
  4044a6:	4b21      	ldr	r3, [pc, #132]	; (40452c <main+0x174>)
  4044a8:	4798      	blx	r3
  4044aa:	e7fe      	b.n	4044aa <main+0xf2>
		printf("Failed to create xQueueOrientacao\r");
  4044ac:	4820      	ldr	r0, [pc, #128]	; (404530 <main+0x178>)
  4044ae:	4b21      	ldr	r3, [pc, #132]	; (404534 <main+0x17c>)
  4044b0:	4798      	blx	r3
  4044b2:	e7c8      	b.n	404446 <main+0x8e>
  4044b4:	00401445 	.word	0x00401445
  4044b8:	00401541 	.word	0x00401541
  4044bc:	00401195 	.word	0x00401195
  4044c0:	40028000 	.word	0x40028000
  4044c4:	20400ddc 	.word	0x20400ddc
  4044c8:	00403c91 	.word	0x00403c91
  4044cc:	20400dd8 	.word	0x20400dd8
  4044d0:	00403bb5 	.word	0x00403bb5
  4044d4:	20400dd4 	.word	0x20400dd4
  4044d8:	00401a3d 	.word	0x00401a3d
  4044dc:	08f0d180 	.word	0x08f0d180
  4044e0:	00401b39 	.word	0x00401b39
  4044e4:	00401b8d 	.word	0x00401b8d
  4044e8:	00401b93 	.word	0x00401b93
  4044ec:	20400018 	.word	0x20400018
  4044f0:	00407599 	.word	0x00407599
  4044f4:	004024e5 	.word	0x004024e5
  4044f8:	20400e20 	.word	0x20400e20
  4044fc:	20400e24 	.word	0x20400e24
  404500:	0040bc80 	.word	0x0040bc80
  404504:	00404349 	.word	0x00404349
  404508:	00402b25 	.word	0x00402b25
  40450c:	0040bc8c 	.word	0x0040bc8c
  404510:	00407565 	.word	0x00407565
  404514:	0040bcb0 	.word	0x0040bcb0
  404518:	00403e49 	.word	0x00403e49
  40451c:	0040bcb4 	.word	0x0040bcb4
  404520:	0040bcd0 	.word	0x0040bcd0
  404524:	00403ad1 	.word	0x00403ad1
  404528:	0040bcdc 	.word	0x0040bcdc
  40452c:	00402d59 	.word	0x00402d59
  404530:	0040bc5c 	.word	0x0040bc5c
  404534:	004074a1 	.word	0x004074a1

00404538 <cosf>:
  404538:	b500      	push	{lr}
  40453a:	4a1c      	ldr	r2, [pc, #112]	; (4045ac <cosf+0x74>)
  40453c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404540:	4293      	cmp	r3, r2
  404542:	b083      	sub	sp, #12
  404544:	dd18      	ble.n	404578 <cosf+0x40>
  404546:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  40454a:	db05      	blt.n	404558 <cosf+0x20>
  40454c:	4601      	mov	r1, r0
  40454e:	f002 f8b9 	bl	4066c4 <__aeabi_fsub>
  404552:	b003      	add	sp, #12
  404554:	f85d fb04 	ldr.w	pc, [sp], #4
  404558:	4669      	mov	r1, sp
  40455a:	f000 fbaf 	bl	404cbc <__ieee754_rem_pio2f>
  40455e:	f000 0203 	and.w	r2, r0, #3
  404562:	2a01      	cmp	r2, #1
  404564:	d015      	beq.n	404592 <cosf+0x5a>
  404566:	2a02      	cmp	r2, #2
  404568:	d00c      	beq.n	404584 <cosf+0x4c>
  40456a:	b1ca      	cbz	r2, 4045a0 <cosf+0x68>
  40456c:	2201      	movs	r2, #1
  40456e:	9901      	ldr	r1, [sp, #4]
  404570:	9800      	ldr	r0, [sp, #0]
  404572:	f001 f9af 	bl	4058d4 <__kernel_sinf>
  404576:	e7ec      	b.n	404552 <cosf+0x1a>
  404578:	2100      	movs	r1, #0
  40457a:	f000 fd61 	bl	405040 <__kernel_cosf>
  40457e:	b003      	add	sp, #12
  404580:	f85d fb04 	ldr.w	pc, [sp], #4
  404584:	9901      	ldr	r1, [sp, #4]
  404586:	9800      	ldr	r0, [sp, #0]
  404588:	f000 fd5a 	bl	405040 <__kernel_cosf>
  40458c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404590:	e7df      	b.n	404552 <cosf+0x1a>
  404592:	9901      	ldr	r1, [sp, #4]
  404594:	9800      	ldr	r0, [sp, #0]
  404596:	f001 f99d 	bl	4058d4 <__kernel_sinf>
  40459a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40459e:	e7d8      	b.n	404552 <cosf+0x1a>
  4045a0:	9901      	ldr	r1, [sp, #4]
  4045a2:	9800      	ldr	r0, [sp, #0]
  4045a4:	f000 fd4c 	bl	405040 <__kernel_cosf>
  4045a8:	e7d3      	b.n	404552 <cosf+0x1a>
  4045aa:	bf00      	nop
  4045ac:	3f490fd8 	.word	0x3f490fd8

004045b0 <sinf>:
  4045b0:	b500      	push	{lr}
  4045b2:	4a1d      	ldr	r2, [pc, #116]	; (404628 <sinf+0x78>)
  4045b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4045b8:	4293      	cmp	r3, r2
  4045ba:	b083      	sub	sp, #12
  4045bc:	dd19      	ble.n	4045f2 <sinf+0x42>
  4045be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  4045c2:	db05      	blt.n	4045d0 <sinf+0x20>
  4045c4:	4601      	mov	r1, r0
  4045c6:	f002 f87d 	bl	4066c4 <__aeabi_fsub>
  4045ca:	b003      	add	sp, #12
  4045cc:	f85d fb04 	ldr.w	pc, [sp], #4
  4045d0:	4669      	mov	r1, sp
  4045d2:	f000 fb73 	bl	404cbc <__ieee754_rem_pio2f>
  4045d6:	f000 0003 	and.w	r0, r0, #3
  4045da:	2801      	cmp	r0, #1
  4045dc:	d018      	beq.n	404610 <sinf+0x60>
  4045de:	2802      	cmp	r0, #2
  4045e0:	d00e      	beq.n	404600 <sinf+0x50>
  4045e2:	b1d0      	cbz	r0, 40461a <sinf+0x6a>
  4045e4:	9901      	ldr	r1, [sp, #4]
  4045e6:	9800      	ldr	r0, [sp, #0]
  4045e8:	f000 fd2a 	bl	405040 <__kernel_cosf>
  4045ec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4045f0:	e7eb      	b.n	4045ca <sinf+0x1a>
  4045f2:	2200      	movs	r2, #0
  4045f4:	2100      	movs	r1, #0
  4045f6:	f001 f96d 	bl	4058d4 <__kernel_sinf>
  4045fa:	b003      	add	sp, #12
  4045fc:	f85d fb04 	ldr.w	pc, [sp], #4
  404600:	2201      	movs	r2, #1
  404602:	9901      	ldr	r1, [sp, #4]
  404604:	9800      	ldr	r0, [sp, #0]
  404606:	f001 f965 	bl	4058d4 <__kernel_sinf>
  40460a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40460e:	e7dc      	b.n	4045ca <sinf+0x1a>
  404610:	9901      	ldr	r1, [sp, #4]
  404612:	9800      	ldr	r0, [sp, #0]
  404614:	f000 fd14 	bl	405040 <__kernel_cosf>
  404618:	e7d7      	b.n	4045ca <sinf+0x1a>
  40461a:	2201      	movs	r2, #1
  40461c:	9901      	ldr	r1, [sp, #4]
  40461e:	9800      	ldr	r0, [sp, #0]
  404620:	f001 f958 	bl	4058d4 <__kernel_sinf>
  404624:	e7d1      	b.n	4045ca <sinf+0x1a>
  404626:	bf00      	nop
  404628:	3f490fd8 	.word	0x3f490fd8

0040462c <sqrt>:
  40462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404630:	b08b      	sub	sp, #44	; 0x2c
  404632:	4604      	mov	r4, r0
  404634:	460d      	mov	r5, r1
  404636:	f000 f8a9 	bl	40478c <__ieee754_sqrt>
  40463a:	4b29      	ldr	r3, [pc, #164]	; (4046e0 <sqrt+0xb4>)
  40463c:	f993 a000 	ldrsb.w	sl, [r3]
  404640:	f1ba 3fff 	cmp.w	sl, #4294967295
  404644:	4606      	mov	r6, r0
  404646:	460f      	mov	r7, r1
  404648:	d012      	beq.n	404670 <sqrt+0x44>
  40464a:	4622      	mov	r2, r4
  40464c:	462b      	mov	r3, r5
  40464e:	4620      	mov	r0, r4
  404650:	4629      	mov	r1, r5
  404652:	f001 ffcd 	bl	4065f0 <__aeabi_dcmpun>
  404656:	4683      	mov	fp, r0
  404658:	b950      	cbnz	r0, 404670 <sqrt+0x44>
  40465a:	f04f 0800 	mov.w	r8, #0
  40465e:	f04f 0900 	mov.w	r9, #0
  404662:	4642      	mov	r2, r8
  404664:	464b      	mov	r3, r9
  404666:	4620      	mov	r0, r4
  404668:	4629      	mov	r1, r5
  40466a:	f001 ff99 	bl	4065a0 <__aeabi_dcmplt>
  40466e:	b920      	cbnz	r0, 40467a <sqrt+0x4e>
  404670:	4630      	mov	r0, r6
  404672:	4639      	mov	r1, r7
  404674:	b00b      	add	sp, #44	; 0x2c
  404676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40467a:	4b1a      	ldr	r3, [pc, #104]	; (4046e4 <sqrt+0xb8>)
  40467c:	f8cd b020 	str.w	fp, [sp, #32]
  404680:	2201      	movs	r2, #1
  404682:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404686:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40468a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40468e:	f1ba 0f00 	cmp.w	sl, #0
  404692:	d017      	beq.n	4046c4 <sqrt+0x98>
  404694:	4642      	mov	r2, r8
  404696:	464b      	mov	r3, r9
  404698:	4640      	mov	r0, r8
  40469a:	4649      	mov	r1, r9
  40469c:	f001 fe38 	bl	406310 <__aeabi_ddiv>
  4046a0:	f1ba 0f02 	cmp.w	sl, #2
  4046a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4046a8:	d10e      	bne.n	4046c8 <sqrt+0x9c>
  4046aa:	f002 fb17 	bl	406cdc <__errno>
  4046ae:	2321      	movs	r3, #33	; 0x21
  4046b0:	6003      	str	r3, [r0, #0]
  4046b2:	9b08      	ldr	r3, [sp, #32]
  4046b4:	b973      	cbnz	r3, 4046d4 <sqrt+0xa8>
  4046b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  4046ba:	4630      	mov	r0, r6
  4046bc:	4639      	mov	r1, r7
  4046be:	b00b      	add	sp, #44	; 0x2c
  4046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4046c8:	4668      	mov	r0, sp
  4046ca:	f001 f979 	bl	4059c0 <matherr>
  4046ce:	2800      	cmp	r0, #0
  4046d0:	d1ef      	bne.n	4046b2 <sqrt+0x86>
  4046d2:	e7ea      	b.n	4046aa <sqrt+0x7e>
  4046d4:	f002 fb02 	bl	406cdc <__errno>
  4046d8:	9b08      	ldr	r3, [sp, #32]
  4046da:	6003      	str	r3, [r0, #0]
  4046dc:	e7eb      	b.n	4046b6 <sqrt+0x8a>
  4046de:	bf00      	nop
  4046e0:	20400014 	.word	0x20400014
  4046e4:	0040be24 	.word	0x0040be24

004046e8 <asinf>:
  4046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4046ea:	4e24      	ldr	r6, [pc, #144]	; (40477c <asinf+0x94>)
  4046ec:	b08b      	sub	sp, #44	; 0x2c
  4046ee:	4604      	mov	r4, r0
  4046f0:	f000 f908 	bl	404904 <__ieee754_asinf>
  4046f4:	f996 3000 	ldrsb.w	r3, [r6]
  4046f8:	3301      	adds	r3, #1
  4046fa:	4605      	mov	r5, r0
  4046fc:	d02f      	beq.n	40475e <asinf+0x76>
  4046fe:	4621      	mov	r1, r4
  404700:	4620      	mov	r0, r4
  404702:	f002 faaf 	bl	406c64 <__aeabi_fcmpun>
  404706:	4607      	mov	r7, r0
  404708:	bb48      	cbnz	r0, 40475e <asinf+0x76>
  40470a:	4620      	mov	r0, r4
  40470c:	f001 fa76 	bl	405bfc <fabsf>
  404710:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404714:	f002 fa9c 	bl	406c50 <__aeabi_fcmpgt>
  404718:	b308      	cbz	r0, 40475e <asinf+0x76>
  40471a:	4b19      	ldr	r3, [pc, #100]	; (404780 <asinf+0x98>)
  40471c:	9708      	str	r7, [sp, #32]
  40471e:	2201      	movs	r2, #1
  404720:	4620      	mov	r0, r4
  404722:	e88d 000c 	stmia.w	sp, {r2, r3}
  404726:	f001 fc75 	bl	406014 <__aeabi_f2d>
  40472a:	4602      	mov	r2, r0
  40472c:	460b      	mov	r3, r1
  40472e:	4815      	ldr	r0, [pc, #84]	; (404784 <asinf+0x9c>)
  404730:	e9cd 2304 	strd	r2, r3, [sp, #16]
  404734:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404738:	f001 f944 	bl	4059c4 <nan>
  40473c:	f996 3000 	ldrsb.w	r3, [r6]
  404740:	2b02      	cmp	r3, #2
  404742:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404746:	d00d      	beq.n	404764 <asinf+0x7c>
  404748:	4668      	mov	r0, sp
  40474a:	f001 f939 	bl	4059c0 <matherr>
  40474e:	b148      	cbz	r0, 404764 <asinf+0x7c>
  404750:	9b08      	ldr	r3, [sp, #32]
  404752:	b973      	cbnz	r3, 404772 <asinf+0x8a>
  404754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404758:	f001 ff60 	bl	40661c <__aeabi_d2f>
  40475c:	4605      	mov	r5, r0
  40475e:	4628      	mov	r0, r5
  404760:	b00b      	add	sp, #44	; 0x2c
  404762:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404764:	f002 faba 	bl	406cdc <__errno>
  404768:	2321      	movs	r3, #33	; 0x21
  40476a:	6003      	str	r3, [r0, #0]
  40476c:	9b08      	ldr	r3, [sp, #32]
  40476e:	2b00      	cmp	r3, #0
  404770:	d0f0      	beq.n	404754 <asinf+0x6c>
  404772:	f002 fab3 	bl	406cdc <__errno>
  404776:	9b08      	ldr	r3, [sp, #32]
  404778:	6003      	str	r3, [r0, #0]
  40477a:	e7eb      	b.n	404754 <asinf+0x6c>
  40477c:	20400014 	.word	0x20400014
  404780:	0040be2c 	.word	0x0040be2c
  404784:	0040bde0 	.word	0x0040bde0

00404788 <atan2f>:
  404788:	f000 ba06 	b.w	404b98 <__ieee754_atan2f>

0040478c <__ieee754_sqrt>:
  40478c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404790:	4f5b      	ldr	r7, [pc, #364]	; (404900 <__ieee754_sqrt+0x174>)
  404792:	438f      	bics	r7, r1
  404794:	4605      	mov	r5, r0
  404796:	460c      	mov	r4, r1
  404798:	f000 8092 	beq.w	4048c0 <__ieee754_sqrt+0x134>
  40479c:	2900      	cmp	r1, #0
  40479e:	460b      	mov	r3, r1
  4047a0:	4602      	mov	r2, r0
  4047a2:	dd6f      	ble.n	404884 <__ieee754_sqrt+0xf8>
  4047a4:	150f      	asrs	r7, r1, #20
  4047a6:	d07b      	beq.n	4048a0 <__ieee754_sqrt+0x114>
  4047a8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4047ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4047b0:	07f8      	lsls	r0, r7, #31
  4047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4047b6:	d45c      	bmi.n	404872 <__ieee754_sqrt+0xe6>
  4047b8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4047bc:	2600      	movs	r6, #0
  4047be:	440b      	add	r3, r1
  4047c0:	107f      	asrs	r7, r7, #1
  4047c2:	0052      	lsls	r2, r2, #1
  4047c4:	46b6      	mov	lr, r6
  4047c6:	2016      	movs	r0, #22
  4047c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4047cc:	eb0e 0401 	add.w	r4, lr, r1
  4047d0:	429c      	cmp	r4, r3
  4047d2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4047d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4047da:	dc03      	bgt.n	4047e4 <__ieee754_sqrt+0x58>
  4047dc:	1b1b      	subs	r3, r3, r4
  4047de:	eb04 0e01 	add.w	lr, r4, r1
  4047e2:	440e      	add	r6, r1
  4047e4:	3801      	subs	r0, #1
  4047e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4047ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4047ee:	d1ed      	bne.n	4047cc <__ieee754_sqrt+0x40>
  4047f0:	4684      	mov	ip, r0
  4047f2:	2420      	movs	r4, #32
  4047f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4047f8:	e009      	b.n	40480e <__ieee754_sqrt+0x82>
  4047fa:	d020      	beq.n	40483e <__ieee754_sqrt+0xb2>
  4047fc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  404800:	3c01      	subs	r4, #1
  404802:	ea4f 0151 	mov.w	r1, r1, lsr #1
  404806:	442b      	add	r3, r5
  404808:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40480c:	d020      	beq.n	404850 <__ieee754_sqrt+0xc4>
  40480e:	4573      	cmp	r3, lr
  404810:	eb01 050c 	add.w	r5, r1, ip
  404814:	ddf1      	ble.n	4047fa <__ieee754_sqrt+0x6e>
  404816:	2d00      	cmp	r5, #0
  404818:	eb05 0c01 	add.w	ip, r5, r1
  40481c:	db09      	blt.n	404832 <__ieee754_sqrt+0xa6>
  40481e:	46f0      	mov	r8, lr
  404820:	4295      	cmp	r5, r2
  404822:	eba3 030e 	sub.w	r3, r3, lr
  404826:	d900      	bls.n	40482a <__ieee754_sqrt+0x9e>
  404828:	3b01      	subs	r3, #1
  40482a:	1b52      	subs	r2, r2, r5
  40482c:	4408      	add	r0, r1
  40482e:	46c6      	mov	lr, r8
  404830:	e7e4      	b.n	4047fc <__ieee754_sqrt+0x70>
  404832:	f1bc 0f00 	cmp.w	ip, #0
  404836:	dbf2      	blt.n	40481e <__ieee754_sqrt+0x92>
  404838:	f10e 0801 	add.w	r8, lr, #1
  40483c:	e7f0      	b.n	404820 <__ieee754_sqrt+0x94>
  40483e:	4295      	cmp	r5, r2
  404840:	d8dc      	bhi.n	4047fc <__ieee754_sqrt+0x70>
  404842:	2d00      	cmp	r5, #0
  404844:	eb05 0c01 	add.w	ip, r5, r1
  404848:	db44      	blt.n	4048d4 <__ieee754_sqrt+0x148>
  40484a:	4698      	mov	r8, r3
  40484c:	2300      	movs	r3, #0
  40484e:	e7ec      	b.n	40482a <__ieee754_sqrt+0x9e>
  404850:	4313      	orrs	r3, r2
  404852:	d113      	bne.n	40487c <__ieee754_sqrt+0xf0>
  404854:	0840      	lsrs	r0, r0, #1
  404856:	1073      	asrs	r3, r6, #1
  404858:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  40485c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404860:	07f2      	lsls	r2, r6, #31
  404862:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  404866:	bf48      	it	mi
  404868:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  40486c:	4649      	mov	r1, r9
  40486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404872:	005b      	lsls	r3, r3, #1
  404874:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  404878:	0052      	lsls	r2, r2, #1
  40487a:	e79d      	b.n	4047b8 <__ieee754_sqrt+0x2c>
  40487c:	1c41      	adds	r1, r0, #1
  40487e:	d02d      	beq.n	4048dc <__ieee754_sqrt+0x150>
  404880:	3001      	adds	r0, #1
  404882:	e7e7      	b.n	404854 <__ieee754_sqrt+0xc8>
  404884:	4606      	mov	r6, r0
  404886:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40488a:	433e      	orrs	r6, r7
  40488c:	d0ef      	beq.n	40486e <__ieee754_sqrt+0xe2>
  40488e:	bb69      	cbnz	r1, 4048ec <__ieee754_sqrt+0x160>
  404890:	460f      	mov	r7, r1
  404892:	0ad3      	lsrs	r3, r2, #11
  404894:	3f15      	subs	r7, #21
  404896:	0552      	lsls	r2, r2, #21
  404898:	2b00      	cmp	r3, #0
  40489a:	d0fa      	beq.n	404892 <__ieee754_sqrt+0x106>
  40489c:	02de      	lsls	r6, r3, #11
  40489e:	d420      	bmi.n	4048e2 <__ieee754_sqrt+0x156>
  4048a0:	2400      	movs	r4, #0
  4048a2:	e000      	b.n	4048a6 <__ieee754_sqrt+0x11a>
  4048a4:	4604      	mov	r4, r0
  4048a6:	005b      	lsls	r3, r3, #1
  4048a8:	02dd      	lsls	r5, r3, #11
  4048aa:	f104 0001 	add.w	r0, r4, #1
  4048ae:	d5f9      	bpl.n	4048a4 <__ieee754_sqrt+0x118>
  4048b0:	f1c0 0120 	rsb	r1, r0, #32
  4048b4:	fa22 f101 	lsr.w	r1, r2, r1
  4048b8:	430b      	orrs	r3, r1
  4048ba:	1b3f      	subs	r7, r7, r4
  4048bc:	4082      	lsls	r2, r0
  4048be:	e773      	b.n	4047a8 <__ieee754_sqrt+0x1c>
  4048c0:	4602      	mov	r2, r0
  4048c2:	460b      	mov	r3, r1
  4048c4:	f001 fbfa 	bl	4060bc <__aeabi_dmul>
  4048c8:	462a      	mov	r2, r5
  4048ca:	4623      	mov	r3, r4
  4048cc:	f001 fa44 	bl	405d58 <__adddf3>
  4048d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048d4:	f1bc 0f00 	cmp.w	ip, #0
  4048d8:	daae      	bge.n	404838 <__ieee754_sqrt+0xac>
  4048da:	e7b6      	b.n	40484a <__ieee754_sqrt+0xbe>
  4048dc:	3601      	adds	r6, #1
  4048de:	4620      	mov	r0, r4
  4048e0:	e7b9      	b.n	404856 <__ieee754_sqrt+0xca>
  4048e2:	2000      	movs	r0, #0
  4048e4:	2120      	movs	r1, #32
  4048e6:	f04f 34ff 	mov.w	r4, #4294967295
  4048ea:	e7e3      	b.n	4048b4 <__ieee754_sqrt+0x128>
  4048ec:	4602      	mov	r2, r0
  4048ee:	460b      	mov	r3, r1
  4048f0:	f001 fa30 	bl	405d54 <__aeabi_dsub>
  4048f4:	4602      	mov	r2, r0
  4048f6:	460b      	mov	r3, r1
  4048f8:	f001 fd0a 	bl	406310 <__aeabi_ddiv>
  4048fc:	e7b7      	b.n	40486e <__ieee754_sqrt+0xe2>
  4048fe:	bf00      	nop
  404900:	7ff00000 	.word	0x7ff00000

00404904 <__ieee754_asinf>:
  404904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404908:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  40490c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  404910:	4604      	mov	r4, r0
  404912:	f000 80c6 	beq.w	404aa2 <__ieee754_asinf+0x19e>
  404916:	dc12      	bgt.n	40493e <__ieee754_asinf+0x3a>
  404918:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  40491c:	4606      	mov	r6, r0
  40491e:	da16      	bge.n	40494e <__ieee754_asinf+0x4a>
  404920:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  404924:	f280 80cb 	bge.w	404abe <__ieee754_asinf+0x1ba>
  404928:	498b      	ldr	r1, [pc, #556]	; (404b58 <__ieee754_asinf+0x254>)
  40492a:	f001 fecd 	bl	4066c8 <__addsf3>
  40492e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404932:	f002 f98d 	bl	406c50 <__aeabi_fcmpgt>
  404936:	b150      	cbz	r0, 40494e <__ieee754_asinf+0x4a>
  404938:	4620      	mov	r0, r4
  40493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40493e:	4601      	mov	r1, r0
  404940:	f001 fec0 	bl	4066c4 <__aeabi_fsub>
  404944:	4601      	mov	r1, r0
  404946:	f002 f87b 	bl	406a40 <__aeabi_fdiv>
  40494a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40494e:	4620      	mov	r0, r4
  404950:	f001 f954 	bl	405bfc <fabsf>
  404954:	4601      	mov	r1, r0
  404956:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40495a:	f001 feb3 	bl	4066c4 <__aeabi_fsub>
  40495e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404962:	f001 ffb9 	bl	4068d8 <__aeabi_fmul>
  404966:	497d      	ldr	r1, [pc, #500]	; (404b5c <__ieee754_asinf+0x258>)
  404968:	4604      	mov	r4, r0
  40496a:	f001 ffb5 	bl	4068d8 <__aeabi_fmul>
  40496e:	497c      	ldr	r1, [pc, #496]	; (404b60 <__ieee754_asinf+0x25c>)
  404970:	f001 feaa 	bl	4066c8 <__addsf3>
  404974:	4621      	mov	r1, r4
  404976:	f001 ffaf 	bl	4068d8 <__aeabi_fmul>
  40497a:	497a      	ldr	r1, [pc, #488]	; (404b64 <__ieee754_asinf+0x260>)
  40497c:	f001 fea2 	bl	4066c4 <__aeabi_fsub>
  404980:	4621      	mov	r1, r4
  404982:	f001 ffa9 	bl	4068d8 <__aeabi_fmul>
  404986:	4978      	ldr	r1, [pc, #480]	; (404b68 <__ieee754_asinf+0x264>)
  404988:	f001 fe9e 	bl	4066c8 <__addsf3>
  40498c:	4621      	mov	r1, r4
  40498e:	f001 ffa3 	bl	4068d8 <__aeabi_fmul>
  404992:	4976      	ldr	r1, [pc, #472]	; (404b6c <__ieee754_asinf+0x268>)
  404994:	f001 fe96 	bl	4066c4 <__aeabi_fsub>
  404998:	4621      	mov	r1, r4
  40499a:	f001 ff9d 	bl	4068d8 <__aeabi_fmul>
  40499e:	4974      	ldr	r1, [pc, #464]	; (404b70 <__ieee754_asinf+0x26c>)
  4049a0:	f001 fe92 	bl	4066c8 <__addsf3>
  4049a4:	4621      	mov	r1, r4
  4049a6:	f001 ff97 	bl	4068d8 <__aeabi_fmul>
  4049aa:	4972      	ldr	r1, [pc, #456]	; (404b74 <__ieee754_asinf+0x270>)
  4049ac:	4680      	mov	r8, r0
  4049ae:	4620      	mov	r0, r4
  4049b0:	f001 ff92 	bl	4068d8 <__aeabi_fmul>
  4049b4:	4970      	ldr	r1, [pc, #448]	; (404b78 <__ieee754_asinf+0x274>)
  4049b6:	f001 fe85 	bl	4066c4 <__aeabi_fsub>
  4049ba:	4621      	mov	r1, r4
  4049bc:	f001 ff8c 	bl	4068d8 <__aeabi_fmul>
  4049c0:	496e      	ldr	r1, [pc, #440]	; (404b7c <__ieee754_asinf+0x278>)
  4049c2:	f001 fe81 	bl	4066c8 <__addsf3>
  4049c6:	4621      	mov	r1, r4
  4049c8:	f001 ff86 	bl	4068d8 <__aeabi_fmul>
  4049cc:	496c      	ldr	r1, [pc, #432]	; (404b80 <__ieee754_asinf+0x27c>)
  4049ce:	f001 fe79 	bl	4066c4 <__aeabi_fsub>
  4049d2:	4621      	mov	r1, r4
  4049d4:	f001 ff80 	bl	4068d8 <__aeabi_fmul>
  4049d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4049dc:	f001 fe74 	bl	4066c8 <__addsf3>
  4049e0:	4681      	mov	r9, r0
  4049e2:	4620      	mov	r0, r4
  4049e4:	f000 fad8 	bl	404f98 <__ieee754_sqrtf>
  4049e8:	4b66      	ldr	r3, [pc, #408]	; (404b84 <__ieee754_asinf+0x280>)
  4049ea:	429d      	cmp	r5, r3
  4049ec:	4607      	mov	r7, r0
  4049ee:	4649      	mov	r1, r9
  4049f0:	4640      	mov	r0, r8
  4049f2:	dc43      	bgt.n	404a7c <__ieee754_asinf+0x178>
  4049f4:	f002 f824 	bl	406a40 <__aeabi_fdiv>
  4049f8:	4639      	mov	r1, r7
  4049fa:	4680      	mov	r8, r0
  4049fc:	4638      	mov	r0, r7
  4049fe:	f001 fe63 	bl	4066c8 <__addsf3>
  404a02:	4601      	mov	r1, r0
  404a04:	4640      	mov	r0, r8
  404a06:	f001 ff67 	bl	4068d8 <__aeabi_fmul>
  404a0a:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  404a0e:	f025 050f 	bic.w	r5, r5, #15
  404a12:	4680      	mov	r8, r0
  404a14:	4629      	mov	r1, r5
  404a16:	4628      	mov	r0, r5
  404a18:	f001 ff5e 	bl	4068d8 <__aeabi_fmul>
  404a1c:	4601      	mov	r1, r0
  404a1e:	4620      	mov	r0, r4
  404a20:	f001 fe50 	bl	4066c4 <__aeabi_fsub>
  404a24:	4639      	mov	r1, r7
  404a26:	4604      	mov	r4, r0
  404a28:	4628      	mov	r0, r5
  404a2a:	f001 fe4d 	bl	4066c8 <__addsf3>
  404a2e:	4601      	mov	r1, r0
  404a30:	4620      	mov	r0, r4
  404a32:	f002 f805 	bl	406a40 <__aeabi_fdiv>
  404a36:	4601      	mov	r1, r0
  404a38:	f001 fe46 	bl	4066c8 <__addsf3>
  404a3c:	4601      	mov	r1, r0
  404a3e:	4852      	ldr	r0, [pc, #328]	; (404b88 <__ieee754_asinf+0x284>)
  404a40:	f001 fe40 	bl	4066c4 <__aeabi_fsub>
  404a44:	4601      	mov	r1, r0
  404a46:	4640      	mov	r0, r8
  404a48:	f001 fe3c 	bl	4066c4 <__aeabi_fsub>
  404a4c:	4629      	mov	r1, r5
  404a4e:	4604      	mov	r4, r0
  404a50:	4628      	mov	r0, r5
  404a52:	f001 fe39 	bl	4066c8 <__addsf3>
  404a56:	4601      	mov	r1, r0
  404a58:	484c      	ldr	r0, [pc, #304]	; (404b8c <__ieee754_asinf+0x288>)
  404a5a:	f001 fe33 	bl	4066c4 <__aeabi_fsub>
  404a5e:	4601      	mov	r1, r0
  404a60:	4620      	mov	r0, r4
  404a62:	f001 fe2f 	bl	4066c4 <__aeabi_fsub>
  404a66:	4601      	mov	r1, r0
  404a68:	4848      	ldr	r0, [pc, #288]	; (404b8c <__ieee754_asinf+0x288>)
  404a6a:	f001 fe2b 	bl	4066c4 <__aeabi_fsub>
  404a6e:	2e00      	cmp	r6, #0
  404a70:	f73f af63 	bgt.w	40493a <__ieee754_asinf+0x36>
  404a74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a7c:	f001 ffe0 	bl	406a40 <__aeabi_fdiv>
  404a80:	4639      	mov	r1, r7
  404a82:	f001 ff29 	bl	4068d8 <__aeabi_fmul>
  404a86:	4639      	mov	r1, r7
  404a88:	f001 fe1e 	bl	4066c8 <__addsf3>
  404a8c:	4601      	mov	r1, r0
  404a8e:	f001 fe1b 	bl	4066c8 <__addsf3>
  404a92:	493f      	ldr	r1, [pc, #252]	; (404b90 <__ieee754_asinf+0x28c>)
  404a94:	f001 fe18 	bl	4066c8 <__addsf3>
  404a98:	4601      	mov	r1, r0
  404a9a:	483e      	ldr	r0, [pc, #248]	; (404b94 <__ieee754_asinf+0x290>)
  404a9c:	f001 fe12 	bl	4066c4 <__aeabi_fsub>
  404aa0:	e7e5      	b.n	404a6e <__ieee754_asinf+0x16a>
  404aa2:	493c      	ldr	r1, [pc, #240]	; (404b94 <__ieee754_asinf+0x290>)
  404aa4:	f001 ff18 	bl	4068d8 <__aeabi_fmul>
  404aa8:	4937      	ldr	r1, [pc, #220]	; (404b88 <__ieee754_asinf+0x284>)
  404aaa:	4605      	mov	r5, r0
  404aac:	4620      	mov	r0, r4
  404aae:	f001 ff13 	bl	4068d8 <__aeabi_fmul>
  404ab2:	4601      	mov	r1, r0
  404ab4:	4628      	mov	r0, r5
  404ab6:	f001 fe07 	bl	4066c8 <__addsf3>
  404aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404abe:	4601      	mov	r1, r0
  404ac0:	f001 ff0a 	bl	4068d8 <__aeabi_fmul>
  404ac4:	4925      	ldr	r1, [pc, #148]	; (404b5c <__ieee754_asinf+0x258>)
  404ac6:	4605      	mov	r5, r0
  404ac8:	f001 ff06 	bl	4068d8 <__aeabi_fmul>
  404acc:	4924      	ldr	r1, [pc, #144]	; (404b60 <__ieee754_asinf+0x25c>)
  404ace:	f001 fdfb 	bl	4066c8 <__addsf3>
  404ad2:	4629      	mov	r1, r5
  404ad4:	f001 ff00 	bl	4068d8 <__aeabi_fmul>
  404ad8:	4922      	ldr	r1, [pc, #136]	; (404b64 <__ieee754_asinf+0x260>)
  404ada:	f001 fdf3 	bl	4066c4 <__aeabi_fsub>
  404ade:	4629      	mov	r1, r5
  404ae0:	f001 fefa 	bl	4068d8 <__aeabi_fmul>
  404ae4:	4920      	ldr	r1, [pc, #128]	; (404b68 <__ieee754_asinf+0x264>)
  404ae6:	f001 fdef 	bl	4066c8 <__addsf3>
  404aea:	4629      	mov	r1, r5
  404aec:	f001 fef4 	bl	4068d8 <__aeabi_fmul>
  404af0:	491e      	ldr	r1, [pc, #120]	; (404b6c <__ieee754_asinf+0x268>)
  404af2:	f001 fde7 	bl	4066c4 <__aeabi_fsub>
  404af6:	4629      	mov	r1, r5
  404af8:	f001 feee 	bl	4068d8 <__aeabi_fmul>
  404afc:	491c      	ldr	r1, [pc, #112]	; (404b70 <__ieee754_asinf+0x26c>)
  404afe:	f001 fde3 	bl	4066c8 <__addsf3>
  404b02:	4629      	mov	r1, r5
  404b04:	f001 fee8 	bl	4068d8 <__aeabi_fmul>
  404b08:	491a      	ldr	r1, [pc, #104]	; (404b74 <__ieee754_asinf+0x270>)
  404b0a:	4606      	mov	r6, r0
  404b0c:	4628      	mov	r0, r5
  404b0e:	f001 fee3 	bl	4068d8 <__aeabi_fmul>
  404b12:	4919      	ldr	r1, [pc, #100]	; (404b78 <__ieee754_asinf+0x274>)
  404b14:	f001 fdd6 	bl	4066c4 <__aeabi_fsub>
  404b18:	4629      	mov	r1, r5
  404b1a:	f001 fedd 	bl	4068d8 <__aeabi_fmul>
  404b1e:	4917      	ldr	r1, [pc, #92]	; (404b7c <__ieee754_asinf+0x278>)
  404b20:	f001 fdd2 	bl	4066c8 <__addsf3>
  404b24:	4629      	mov	r1, r5
  404b26:	f001 fed7 	bl	4068d8 <__aeabi_fmul>
  404b2a:	4915      	ldr	r1, [pc, #84]	; (404b80 <__ieee754_asinf+0x27c>)
  404b2c:	f001 fdca 	bl	4066c4 <__aeabi_fsub>
  404b30:	4629      	mov	r1, r5
  404b32:	f001 fed1 	bl	4068d8 <__aeabi_fmul>
  404b36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404b3a:	f001 fdc5 	bl	4066c8 <__addsf3>
  404b3e:	4601      	mov	r1, r0
  404b40:	4630      	mov	r0, r6
  404b42:	f001 ff7d 	bl	406a40 <__aeabi_fdiv>
  404b46:	4621      	mov	r1, r4
  404b48:	f001 fec6 	bl	4068d8 <__aeabi_fmul>
  404b4c:	4621      	mov	r1, r4
  404b4e:	f001 fdbb 	bl	4066c8 <__addsf3>
  404b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b56:	bf00      	nop
  404b58:	7149f2ca 	.word	0x7149f2ca
  404b5c:	3811ef08 	.word	0x3811ef08
  404b60:	3a4f7f04 	.word	0x3a4f7f04
  404b64:	3d241146 	.word	0x3d241146
  404b68:	3e4e0aa8 	.word	0x3e4e0aa8
  404b6c:	3ea6b090 	.word	0x3ea6b090
  404b70:	3e2aaaab 	.word	0x3e2aaaab
  404b74:	3d9dc62e 	.word	0x3d9dc62e
  404b78:	3f303361 	.word	0x3f303361
  404b7c:	4001572d 	.word	0x4001572d
  404b80:	4019d139 	.word	0x4019d139
  404b84:	3f799999 	.word	0x3f799999
  404b88:	b33bbd2e 	.word	0xb33bbd2e
  404b8c:	3f490fdb 	.word	0x3f490fdb
  404b90:	333bbd2e 	.word	0x333bbd2e
  404b94:	3fc90fdb 	.word	0x3fc90fdb

00404b98 <__ieee754_atan2f>:
  404b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b9a:	460c      	mov	r4, r1
  404b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404ba0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404ba4:	4603      	mov	r3, r0
  404ba6:	dc14      	bgt.n	404bd2 <__ieee754_atan2f+0x3a>
  404ba8:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  404bac:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404bb0:	4607      	mov	r7, r0
  404bb2:	dc0e      	bgt.n	404bd2 <__ieee754_atan2f+0x3a>
  404bb4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  404bb8:	d03d      	beq.n	404c36 <__ieee754_atan2f+0x9e>
  404bba:	17a5      	asrs	r5, r4, #30
  404bbc:	f005 0502 	and.w	r5, r5, #2
  404bc0:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  404bc4:	b956      	cbnz	r6, 404bdc <__ieee754_atan2f+0x44>
  404bc6:	2d02      	cmp	r5, #2
  404bc8:	d030      	beq.n	404c2c <__ieee754_atan2f+0x94>
  404bca:	2d03      	cmp	r5, #3
  404bcc:	d130      	bne.n	404c30 <__ieee754_atan2f+0x98>
  404bce:	4832      	ldr	r0, [pc, #200]	; (404c98 <__ieee754_atan2f+0x100>)
  404bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bd2:	4619      	mov	r1, r3
  404bd4:	4620      	mov	r0, r4
  404bd6:	f001 fd77 	bl	4066c8 <__addsf3>
  404bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bdc:	b301      	cbz	r1, 404c20 <__ieee754_atan2f+0x88>
  404bde:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  404be2:	d02c      	beq.n	404c3e <__ieee754_atan2f+0xa6>
  404be4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404be8:	d01a      	beq.n	404c20 <__ieee754_atan2f+0x88>
  404bea:	1a71      	subs	r1, r6, r1
  404bec:	15c9      	asrs	r1, r1, #23
  404bee:	293c      	cmp	r1, #60	; 0x3c
  404bf0:	dc1a      	bgt.n	404c28 <__ieee754_atan2f+0x90>
  404bf2:	2c00      	cmp	r4, #0
  404bf4:	db39      	blt.n	404c6a <__ieee754_atan2f+0xd2>
  404bf6:	4621      	mov	r1, r4
  404bf8:	4618      	mov	r0, r3
  404bfa:	f001 ff21 	bl	406a40 <__aeabi_fdiv>
  404bfe:	f000 fffd 	bl	405bfc <fabsf>
  404c02:	f000 fee5 	bl	4059d0 <atanf>
  404c06:	2d01      	cmp	r5, #1
  404c08:	d02c      	beq.n	404c64 <__ieee754_atan2f+0xcc>
  404c0a:	2d02      	cmp	r5, #2
  404c0c:	d022      	beq.n	404c54 <__ieee754_atan2f+0xbc>
  404c0e:	2d00      	cmp	r5, #0
  404c10:	d02f      	beq.n	404c72 <__ieee754_atan2f+0xda>
  404c12:	4922      	ldr	r1, [pc, #136]	; (404c9c <__ieee754_atan2f+0x104>)
  404c14:	f001 fd58 	bl	4066c8 <__addsf3>
  404c18:	4921      	ldr	r1, [pc, #132]	; (404ca0 <__ieee754_atan2f+0x108>)
  404c1a:	f001 fd53 	bl	4066c4 <__aeabi_fsub>
  404c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c20:	2f00      	cmp	r7, #0
  404c22:	db06      	blt.n	404c32 <__ieee754_atan2f+0x9a>
  404c24:	481f      	ldr	r0, [pc, #124]	; (404ca4 <__ieee754_atan2f+0x10c>)
  404c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c28:	481e      	ldr	r0, [pc, #120]	; (404ca4 <__ieee754_atan2f+0x10c>)
  404c2a:	e7ec      	b.n	404c06 <__ieee754_atan2f+0x6e>
  404c2c:	481c      	ldr	r0, [pc, #112]	; (404ca0 <__ieee754_atan2f+0x108>)
  404c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c32:	481d      	ldr	r0, [pc, #116]	; (404ca8 <__ieee754_atan2f+0x110>)
  404c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404c3a:	f000 bec9 	b.w	4059d0 <atanf>
  404c3e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404c42:	d017      	beq.n	404c74 <__ieee754_atan2f+0xdc>
  404c44:	2d02      	cmp	r5, #2
  404c46:	d0f1      	beq.n	404c2c <__ieee754_atan2f+0x94>
  404c48:	2d03      	cmp	r5, #3
  404c4a:	d0c0      	beq.n	404bce <__ieee754_atan2f+0x36>
  404c4c:	2d01      	cmp	r5, #1
  404c4e:	d019      	beq.n	404c84 <__ieee754_atan2f+0xec>
  404c50:	2000      	movs	r0, #0
  404c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c54:	4911      	ldr	r1, [pc, #68]	; (404c9c <__ieee754_atan2f+0x104>)
  404c56:	f001 fd37 	bl	4066c8 <__addsf3>
  404c5a:	4601      	mov	r1, r0
  404c5c:	4810      	ldr	r0, [pc, #64]	; (404ca0 <__ieee754_atan2f+0x108>)
  404c5e:	f001 fd31 	bl	4066c4 <__aeabi_fsub>
  404c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c64:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c6a:	313c      	adds	r1, #60	; 0x3c
  404c6c:	dac3      	bge.n	404bf6 <__ieee754_atan2f+0x5e>
  404c6e:	2000      	movs	r0, #0
  404c70:	e7c9      	b.n	404c06 <__ieee754_atan2f+0x6e>
  404c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c74:	2d02      	cmp	r5, #2
  404c76:	d00c      	beq.n	404c92 <__ieee754_atan2f+0xfa>
  404c78:	2d03      	cmp	r5, #3
  404c7a:	d008      	beq.n	404c8e <__ieee754_atan2f+0xf6>
  404c7c:	2d01      	cmp	r5, #1
  404c7e:	d004      	beq.n	404c8a <__ieee754_atan2f+0xf2>
  404c80:	480a      	ldr	r0, [pc, #40]	; (404cac <__ieee754_atan2f+0x114>)
  404c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c8a:	4809      	ldr	r0, [pc, #36]	; (404cb0 <__ieee754_atan2f+0x118>)
  404c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c8e:	4809      	ldr	r0, [pc, #36]	; (404cb4 <__ieee754_atan2f+0x11c>)
  404c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c92:	4809      	ldr	r0, [pc, #36]	; (404cb8 <__ieee754_atan2f+0x120>)
  404c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c96:	bf00      	nop
  404c98:	c0490fdb 	.word	0xc0490fdb
  404c9c:	33bbbd2e 	.word	0x33bbbd2e
  404ca0:	40490fdb 	.word	0x40490fdb
  404ca4:	3fc90fdb 	.word	0x3fc90fdb
  404ca8:	bfc90fdb 	.word	0xbfc90fdb
  404cac:	3f490fdb 	.word	0x3f490fdb
  404cb0:	bf490fdb 	.word	0xbf490fdb
  404cb4:	c016cbe4 	.word	0xc016cbe4
  404cb8:	4016cbe4 	.word	0x4016cbe4

00404cbc <__ieee754_rem_pio2f>:
  404cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cc0:	4aa8      	ldr	r2, [pc, #672]	; (404f64 <__ieee754_rem_pio2f+0x2a8>)
  404cc2:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404cc6:	4294      	cmp	r4, r2
  404cc8:	b089      	sub	sp, #36	; 0x24
  404cca:	dd6e      	ble.n	404daa <__ieee754_rem_pio2f+0xee>
  404ccc:	4aa6      	ldr	r2, [pc, #664]	; (404f68 <__ieee754_rem_pio2f+0x2ac>)
  404cce:	4294      	cmp	r4, r2
  404cd0:	4606      	mov	r6, r0
  404cd2:	460d      	mov	r5, r1
  404cd4:	dc1c      	bgt.n	404d10 <__ieee754_rem_pio2f+0x54>
  404cd6:	2800      	cmp	r0, #0
  404cd8:	49a4      	ldr	r1, [pc, #656]	; (404f6c <__ieee754_rem_pio2f+0x2b0>)
  404cda:	f340 80fc 	ble.w	404ed6 <__ieee754_rem_pio2f+0x21a>
  404cde:	f001 fcf1 	bl	4066c4 <__aeabi_fsub>
  404ce2:	4ba3      	ldr	r3, [pc, #652]	; (404f70 <__ieee754_rem_pio2f+0x2b4>)
  404ce4:	f024 040f 	bic.w	r4, r4, #15
  404ce8:	429c      	cmp	r4, r3
  404cea:	4606      	mov	r6, r0
  404cec:	d06c      	beq.n	404dc8 <__ieee754_rem_pio2f+0x10c>
  404cee:	49a1      	ldr	r1, [pc, #644]	; (404f74 <__ieee754_rem_pio2f+0x2b8>)
  404cf0:	f001 fce8 	bl	4066c4 <__aeabi_fsub>
  404cf4:	4601      	mov	r1, r0
  404cf6:	6028      	str	r0, [r5, #0]
  404cf8:	4630      	mov	r0, r6
  404cfa:	f001 fce3 	bl	4066c4 <__aeabi_fsub>
  404cfe:	499d      	ldr	r1, [pc, #628]	; (404f74 <__ieee754_rem_pio2f+0x2b8>)
  404d00:	f001 fce0 	bl	4066c4 <__aeabi_fsub>
  404d04:	2701      	movs	r7, #1
  404d06:	6068      	str	r0, [r5, #4]
  404d08:	4638      	mov	r0, r7
  404d0a:	b009      	add	sp, #36	; 0x24
  404d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d10:	4a99      	ldr	r2, [pc, #612]	; (404f78 <__ieee754_rem_pio2f+0x2bc>)
  404d12:	4294      	cmp	r4, r2
  404d14:	dd6a      	ble.n	404dec <__ieee754_rem_pio2f+0x130>
  404d16:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404d1a:	da4e      	bge.n	404dba <__ieee754_rem_pio2f+0xfe>
  404d1c:	15e7      	asrs	r7, r4, #23
  404d1e:	3f86      	subs	r7, #134	; 0x86
  404d20:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404d24:	4620      	mov	r0, r4
  404d26:	f001 ffb3 	bl	406c90 <__aeabi_f2iz>
  404d2a:	f001 fd81 	bl	406830 <__aeabi_i2f>
  404d2e:	4603      	mov	r3, r0
  404d30:	4601      	mov	r1, r0
  404d32:	4620      	mov	r0, r4
  404d34:	9305      	str	r3, [sp, #20]
  404d36:	f001 fcc5 	bl	4066c4 <__aeabi_fsub>
  404d3a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404d3e:	f001 fdcb 	bl	4068d8 <__aeabi_fmul>
  404d42:	4680      	mov	r8, r0
  404d44:	f001 ffa4 	bl	406c90 <__aeabi_f2iz>
  404d48:	f001 fd72 	bl	406830 <__aeabi_i2f>
  404d4c:	4601      	mov	r1, r0
  404d4e:	4604      	mov	r4, r0
  404d50:	4640      	mov	r0, r8
  404d52:	9406      	str	r4, [sp, #24]
  404d54:	f001 fcb6 	bl	4066c4 <__aeabi_fsub>
  404d58:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404d5c:	f001 fdbc 	bl	4068d8 <__aeabi_fmul>
  404d60:	2100      	movs	r1, #0
  404d62:	9007      	str	r0, [sp, #28]
  404d64:	f001 ff4c 	bl	406c00 <__aeabi_fcmpeq>
  404d68:	2800      	cmp	r0, #0
  404d6a:	f000 80cb 	beq.w	404f04 <__ieee754_rem_pio2f+0x248>
  404d6e:	4620      	mov	r0, r4
  404d70:	2100      	movs	r1, #0
  404d72:	f001 ff45 	bl	406c00 <__aeabi_fcmpeq>
  404d76:	2800      	cmp	r0, #0
  404d78:	bf14      	ite	ne
  404d7a:	2301      	movne	r3, #1
  404d7c:	2302      	moveq	r3, #2
  404d7e:	4a7f      	ldr	r2, [pc, #508]	; (404f7c <__ieee754_rem_pio2f+0x2c0>)
  404d80:	9201      	str	r2, [sp, #4]
  404d82:	2102      	movs	r1, #2
  404d84:	463a      	mov	r2, r7
  404d86:	9100      	str	r1, [sp, #0]
  404d88:	a805      	add	r0, sp, #20
  404d8a:	4629      	mov	r1, r5
  404d8c:	f000 fa1c 	bl	4051c8 <__kernel_rem_pio2f>
  404d90:	2e00      	cmp	r6, #0
  404d92:	4607      	mov	r7, r0
  404d94:	da0d      	bge.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404d96:	e895 000c 	ldmia.w	r5, {r2, r3}
  404d9a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404d9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404da2:	4247      	negs	r7, r0
  404da4:	602a      	str	r2, [r5, #0]
  404da6:	606b      	str	r3, [r5, #4]
  404da8:	e003      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404daa:	2200      	movs	r2, #0
  404dac:	6008      	str	r0, [r1, #0]
  404dae:	604a      	str	r2, [r1, #4]
  404db0:	2700      	movs	r7, #0
  404db2:	4638      	mov	r0, r7
  404db4:	b009      	add	sp, #36	; 0x24
  404db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dba:	4601      	mov	r1, r0
  404dbc:	f001 fc82 	bl	4066c4 <__aeabi_fsub>
  404dc0:	2700      	movs	r7, #0
  404dc2:	6068      	str	r0, [r5, #4]
  404dc4:	6028      	str	r0, [r5, #0]
  404dc6:	e7f4      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404dc8:	496d      	ldr	r1, [pc, #436]	; (404f80 <__ieee754_rem_pio2f+0x2c4>)
  404dca:	f001 fc7b 	bl	4066c4 <__aeabi_fsub>
  404dce:	496d      	ldr	r1, [pc, #436]	; (404f84 <__ieee754_rem_pio2f+0x2c8>)
  404dd0:	4604      	mov	r4, r0
  404dd2:	f001 fc77 	bl	4066c4 <__aeabi_fsub>
  404dd6:	4601      	mov	r1, r0
  404dd8:	6028      	str	r0, [r5, #0]
  404dda:	4620      	mov	r0, r4
  404ddc:	f001 fc72 	bl	4066c4 <__aeabi_fsub>
  404de0:	4968      	ldr	r1, [pc, #416]	; (404f84 <__ieee754_rem_pio2f+0x2c8>)
  404de2:	f001 fc6f 	bl	4066c4 <__aeabi_fsub>
  404de6:	2701      	movs	r7, #1
  404de8:	6068      	str	r0, [r5, #4]
  404dea:	e7e2      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404dec:	f000 ff06 	bl	405bfc <fabsf>
  404df0:	4965      	ldr	r1, [pc, #404]	; (404f88 <__ieee754_rem_pio2f+0x2cc>)
  404df2:	4680      	mov	r8, r0
  404df4:	f001 fd70 	bl	4068d8 <__aeabi_fmul>
  404df8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404dfc:	f001 fc64 	bl	4066c8 <__addsf3>
  404e00:	f001 ff46 	bl	406c90 <__aeabi_f2iz>
  404e04:	4607      	mov	r7, r0
  404e06:	f001 fd13 	bl	406830 <__aeabi_i2f>
  404e0a:	4958      	ldr	r1, [pc, #352]	; (404f6c <__ieee754_rem_pio2f+0x2b0>)
  404e0c:	4683      	mov	fp, r0
  404e0e:	f001 fd63 	bl	4068d8 <__aeabi_fmul>
  404e12:	4601      	mov	r1, r0
  404e14:	4640      	mov	r0, r8
  404e16:	f001 fc55 	bl	4066c4 <__aeabi_fsub>
  404e1a:	4956      	ldr	r1, [pc, #344]	; (404f74 <__ieee754_rem_pio2f+0x2b8>)
  404e1c:	4681      	mov	r9, r0
  404e1e:	4658      	mov	r0, fp
  404e20:	f001 fd5a 	bl	4068d8 <__aeabi_fmul>
  404e24:	2f1f      	cmp	r7, #31
  404e26:	4682      	mov	sl, r0
  404e28:	dc21      	bgt.n	404e6e <__ieee754_rem_pio2f+0x1b2>
  404e2a:	4a58      	ldr	r2, [pc, #352]	; (404f8c <__ieee754_rem_pio2f+0x2d0>)
  404e2c:	1e79      	subs	r1, r7, #1
  404e2e:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  404e32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404e36:	4293      	cmp	r3, r2
  404e38:	d019      	beq.n	404e6e <__ieee754_rem_pio2f+0x1b2>
  404e3a:	4651      	mov	r1, sl
  404e3c:	4648      	mov	r0, r9
  404e3e:	f001 fc41 	bl	4066c4 <__aeabi_fsub>
  404e42:	4680      	mov	r8, r0
  404e44:	f8c5 8000 	str.w	r8, [r5]
  404e48:	4641      	mov	r1, r8
  404e4a:	4648      	mov	r0, r9
  404e4c:	f001 fc3a 	bl	4066c4 <__aeabi_fsub>
  404e50:	4651      	mov	r1, sl
  404e52:	f001 fc37 	bl	4066c4 <__aeabi_fsub>
  404e56:	2e00      	cmp	r6, #0
  404e58:	6068      	str	r0, [r5, #4]
  404e5a:	daaa      	bge.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404e5c:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  404e60:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404e64:	f8c5 8000 	str.w	r8, [r5]
  404e68:	6068      	str	r0, [r5, #4]
  404e6a:	427f      	negs	r7, r7
  404e6c:	e7a1      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404e6e:	4651      	mov	r1, sl
  404e70:	4648      	mov	r0, r9
  404e72:	f001 fc27 	bl	4066c4 <__aeabi_fsub>
  404e76:	15e2      	asrs	r2, r4, #23
  404e78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404e7c:	1ad3      	subs	r3, r2, r3
  404e7e:	2b08      	cmp	r3, #8
  404e80:	4680      	mov	r8, r0
  404e82:	dddf      	ble.n	404e44 <__ieee754_rem_pio2f+0x188>
  404e84:	493e      	ldr	r1, [pc, #248]	; (404f80 <__ieee754_rem_pio2f+0x2c4>)
  404e86:	9203      	str	r2, [sp, #12]
  404e88:	4658      	mov	r0, fp
  404e8a:	f001 fd25 	bl	4068d8 <__aeabi_fmul>
  404e8e:	4680      	mov	r8, r0
  404e90:	4601      	mov	r1, r0
  404e92:	4648      	mov	r0, r9
  404e94:	f001 fc16 	bl	4066c4 <__aeabi_fsub>
  404e98:	4601      	mov	r1, r0
  404e9a:	4604      	mov	r4, r0
  404e9c:	4648      	mov	r0, r9
  404e9e:	f001 fc11 	bl	4066c4 <__aeabi_fsub>
  404ea2:	4641      	mov	r1, r8
  404ea4:	f001 fc0e 	bl	4066c4 <__aeabi_fsub>
  404ea8:	4936      	ldr	r1, [pc, #216]	; (404f84 <__ieee754_rem_pio2f+0x2c8>)
  404eaa:	4680      	mov	r8, r0
  404eac:	4658      	mov	r0, fp
  404eae:	f001 fd13 	bl	4068d8 <__aeabi_fmul>
  404eb2:	4641      	mov	r1, r8
  404eb4:	f001 fc06 	bl	4066c4 <__aeabi_fsub>
  404eb8:	4601      	mov	r1, r0
  404eba:	4682      	mov	sl, r0
  404ebc:	4620      	mov	r0, r4
  404ebe:	f001 fc01 	bl	4066c4 <__aeabi_fsub>
  404ec2:	9a03      	ldr	r2, [sp, #12]
  404ec4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404ec8:	1ad2      	subs	r2, r2, r3
  404eca:	2a19      	cmp	r2, #25
  404ecc:	4680      	mov	r8, r0
  404ece:	dc2e      	bgt.n	404f2e <__ieee754_rem_pio2f+0x272>
  404ed0:	6028      	str	r0, [r5, #0]
  404ed2:	46a1      	mov	r9, r4
  404ed4:	e7b8      	b.n	404e48 <__ieee754_rem_pio2f+0x18c>
  404ed6:	f001 fbf7 	bl	4066c8 <__addsf3>
  404eda:	4b25      	ldr	r3, [pc, #148]	; (404f70 <__ieee754_rem_pio2f+0x2b4>)
  404edc:	f024 040f 	bic.w	r4, r4, #15
  404ee0:	429c      	cmp	r4, r3
  404ee2:	4606      	mov	r6, r0
  404ee4:	d010      	beq.n	404f08 <__ieee754_rem_pio2f+0x24c>
  404ee6:	4923      	ldr	r1, [pc, #140]	; (404f74 <__ieee754_rem_pio2f+0x2b8>)
  404ee8:	f001 fbee 	bl	4066c8 <__addsf3>
  404eec:	4601      	mov	r1, r0
  404eee:	6028      	str	r0, [r5, #0]
  404ef0:	4630      	mov	r0, r6
  404ef2:	f001 fbe7 	bl	4066c4 <__aeabi_fsub>
  404ef6:	491f      	ldr	r1, [pc, #124]	; (404f74 <__ieee754_rem_pio2f+0x2b8>)
  404ef8:	f001 fbe6 	bl	4066c8 <__addsf3>
  404efc:	f04f 37ff 	mov.w	r7, #4294967295
  404f00:	6068      	str	r0, [r5, #4]
  404f02:	e756      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404f04:	2303      	movs	r3, #3
  404f06:	e73a      	b.n	404d7e <__ieee754_rem_pio2f+0xc2>
  404f08:	491d      	ldr	r1, [pc, #116]	; (404f80 <__ieee754_rem_pio2f+0x2c4>)
  404f0a:	f001 fbdd 	bl	4066c8 <__addsf3>
  404f0e:	491d      	ldr	r1, [pc, #116]	; (404f84 <__ieee754_rem_pio2f+0x2c8>)
  404f10:	4604      	mov	r4, r0
  404f12:	f001 fbd9 	bl	4066c8 <__addsf3>
  404f16:	4601      	mov	r1, r0
  404f18:	6028      	str	r0, [r5, #0]
  404f1a:	4620      	mov	r0, r4
  404f1c:	f001 fbd2 	bl	4066c4 <__aeabi_fsub>
  404f20:	4918      	ldr	r1, [pc, #96]	; (404f84 <__ieee754_rem_pio2f+0x2c8>)
  404f22:	f001 fbd1 	bl	4066c8 <__addsf3>
  404f26:	f04f 37ff 	mov.w	r7, #4294967295
  404f2a:	6068      	str	r0, [r5, #4]
  404f2c:	e741      	b.n	404db2 <__ieee754_rem_pio2f+0xf6>
  404f2e:	4918      	ldr	r1, [pc, #96]	; (404f90 <__ieee754_rem_pio2f+0x2d4>)
  404f30:	4658      	mov	r0, fp
  404f32:	f001 fcd1 	bl	4068d8 <__aeabi_fmul>
  404f36:	4601      	mov	r1, r0
  404f38:	4680      	mov	r8, r0
  404f3a:	4620      	mov	r0, r4
  404f3c:	f001 fbc2 	bl	4066c4 <__aeabi_fsub>
  404f40:	4601      	mov	r1, r0
  404f42:	4681      	mov	r9, r0
  404f44:	4620      	mov	r0, r4
  404f46:	f001 fbbd 	bl	4066c4 <__aeabi_fsub>
  404f4a:	4641      	mov	r1, r8
  404f4c:	f001 fbba 	bl	4066c4 <__aeabi_fsub>
  404f50:	4910      	ldr	r1, [pc, #64]	; (404f94 <__ieee754_rem_pio2f+0x2d8>)
  404f52:	4604      	mov	r4, r0
  404f54:	4658      	mov	r0, fp
  404f56:	f001 fcbf 	bl	4068d8 <__aeabi_fmul>
  404f5a:	4621      	mov	r1, r4
  404f5c:	f001 fbb2 	bl	4066c4 <__aeabi_fsub>
  404f60:	4682      	mov	sl, r0
  404f62:	e76a      	b.n	404e3a <__ieee754_rem_pio2f+0x17e>
  404f64:	3f490fd8 	.word	0x3f490fd8
  404f68:	4016cbe3 	.word	0x4016cbe3
  404f6c:	3fc90f80 	.word	0x3fc90f80
  404f70:	3fc90fd0 	.word	0x3fc90fd0
  404f74:	37354443 	.word	0x37354443
  404f78:	43490f80 	.word	0x43490f80
  404f7c:	0040beb4 	.word	0x0040beb4
  404f80:	37354400 	.word	0x37354400
  404f84:	2e85a308 	.word	0x2e85a308
  404f88:	3f22f984 	.word	0x3f22f984
  404f8c:	0040be34 	.word	0x0040be34
  404f90:	2e85a300 	.word	0x2e85a300
  404f94:	248d3132 	.word	0x248d3132

00404f98 <__ieee754_sqrtf>:
  404f98:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  404f9c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  404fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fa2:	4604      	mov	r4, r0
  404fa4:	d22e      	bcs.n	405004 <__ieee754_sqrtf+0x6c>
  404fa6:	b362      	cbz	r2, 405002 <__ieee754_sqrtf+0x6a>
  404fa8:	2800      	cmp	r0, #0
  404faa:	4603      	mov	r3, r0
  404fac:	db3d      	blt.n	40502a <__ieee754_sqrtf+0x92>
  404fae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  404fb2:	ea4f 50e0 	mov.w	r0, r0, asr #23
  404fb6:	d32c      	bcc.n	405012 <__ieee754_sqrtf+0x7a>
  404fb8:	387f      	subs	r0, #127	; 0x7f
  404fba:	f3c3 0316 	ubfx	r3, r3, #0, #23
  404fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404fc2:	07c2      	lsls	r2, r0, #31
  404fc4:	bf48      	it	mi
  404fc6:	005b      	lslmi	r3, r3, #1
  404fc8:	2600      	movs	r6, #0
  404fca:	1047      	asrs	r7, r0, #1
  404fcc:	005b      	lsls	r3, r3, #1
  404fce:	4631      	mov	r1, r6
  404fd0:	2419      	movs	r4, #25
  404fd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404fd6:	188d      	adds	r5, r1, r2
  404fd8:	429d      	cmp	r5, r3
  404fda:	dc02      	bgt.n	404fe2 <__ieee754_sqrtf+0x4a>
  404fdc:	1b5b      	subs	r3, r3, r5
  404fde:	18a9      	adds	r1, r5, r2
  404fe0:	4416      	add	r6, r2
  404fe2:	3c01      	subs	r4, #1
  404fe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404fe8:	ea4f 0252 	mov.w	r2, r2, lsr #1
  404fec:	d1f3      	bne.n	404fd6 <__ieee754_sqrtf+0x3e>
  404fee:	b113      	cbz	r3, 404ff6 <__ieee754_sqrtf+0x5e>
  404ff0:	3601      	adds	r6, #1
  404ff2:	f026 0601 	bic.w	r6, r6, #1
  404ff6:	1070      	asrs	r0, r6, #1
  404ff8:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  404ffc:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  405000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405004:	4601      	mov	r1, r0
  405006:	f001 fc67 	bl	4068d8 <__aeabi_fmul>
  40500a:	4621      	mov	r1, r4
  40500c:	f001 fb5c 	bl	4066c8 <__addsf3>
  405010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405012:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  405016:	d001      	beq.n	40501c <__ieee754_sqrtf+0x84>
  405018:	e00e      	b.n	405038 <__ieee754_sqrtf+0xa0>
  40501a:	460a      	mov	r2, r1
  40501c:	005b      	lsls	r3, r3, #1
  40501e:	021c      	lsls	r4, r3, #8
  405020:	f102 0101 	add.w	r1, r2, #1
  405024:	d5f9      	bpl.n	40501a <__ieee754_sqrtf+0x82>
  405026:	1a80      	subs	r0, r0, r2
  405028:	e7c6      	b.n	404fb8 <__ieee754_sqrtf+0x20>
  40502a:	4601      	mov	r1, r0
  40502c:	f001 fb4a 	bl	4066c4 <__aeabi_fsub>
  405030:	4601      	mov	r1, r0
  405032:	f001 fd05 	bl	406a40 <__aeabi_fdiv>
  405036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405038:	f04f 32ff 	mov.w	r2, #4294967295
  40503c:	e7f3      	b.n	405026 <__ieee754_sqrtf+0x8e>
  40503e:	bf00      	nop

00405040 <__kernel_cosf>:
  405040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405044:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  405048:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  40504c:	4606      	mov	r6, r0
  40504e:	460f      	mov	r7, r1
  405050:	da49      	bge.n	4050e6 <__kernel_cosf+0xa6>
  405052:	f001 fe1d 	bl	406c90 <__aeabi_f2iz>
  405056:	2800      	cmp	r0, #0
  405058:	f000 809d 	beq.w	405196 <__kernel_cosf+0x156>
  40505c:	4631      	mov	r1, r6
  40505e:	4630      	mov	r0, r6
  405060:	f001 fc3a 	bl	4068d8 <__aeabi_fmul>
  405064:	494e      	ldr	r1, [pc, #312]	; (4051a0 <__kernel_cosf+0x160>)
  405066:	4605      	mov	r5, r0
  405068:	f001 fc36 	bl	4068d8 <__aeabi_fmul>
  40506c:	494d      	ldr	r1, [pc, #308]	; (4051a4 <__kernel_cosf+0x164>)
  40506e:	f001 fb2b 	bl	4066c8 <__addsf3>
  405072:	4629      	mov	r1, r5
  405074:	f001 fc30 	bl	4068d8 <__aeabi_fmul>
  405078:	494b      	ldr	r1, [pc, #300]	; (4051a8 <__kernel_cosf+0x168>)
  40507a:	f001 fb23 	bl	4066c4 <__aeabi_fsub>
  40507e:	4629      	mov	r1, r5
  405080:	f001 fc2a 	bl	4068d8 <__aeabi_fmul>
  405084:	4949      	ldr	r1, [pc, #292]	; (4051ac <__kernel_cosf+0x16c>)
  405086:	f001 fb1f 	bl	4066c8 <__addsf3>
  40508a:	4629      	mov	r1, r5
  40508c:	f001 fc24 	bl	4068d8 <__aeabi_fmul>
  405090:	4947      	ldr	r1, [pc, #284]	; (4051b0 <__kernel_cosf+0x170>)
  405092:	f001 fb17 	bl	4066c4 <__aeabi_fsub>
  405096:	4629      	mov	r1, r5
  405098:	f001 fc1e 	bl	4068d8 <__aeabi_fmul>
  40509c:	4945      	ldr	r1, [pc, #276]	; (4051b4 <__kernel_cosf+0x174>)
  40509e:	f001 fb13 	bl	4066c8 <__addsf3>
  4050a2:	4629      	mov	r1, r5
  4050a4:	f001 fc18 	bl	4068d8 <__aeabi_fmul>
  4050a8:	4680      	mov	r8, r0
  4050aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4050ae:	4628      	mov	r0, r5
  4050b0:	f001 fc12 	bl	4068d8 <__aeabi_fmul>
  4050b4:	4641      	mov	r1, r8
  4050b6:	4604      	mov	r4, r0
  4050b8:	4628      	mov	r0, r5
  4050ba:	f001 fc0d 	bl	4068d8 <__aeabi_fmul>
  4050be:	4639      	mov	r1, r7
  4050c0:	4605      	mov	r5, r0
  4050c2:	4630      	mov	r0, r6
  4050c4:	f001 fc08 	bl	4068d8 <__aeabi_fmul>
  4050c8:	4601      	mov	r1, r0
  4050ca:	4628      	mov	r0, r5
  4050cc:	f001 fafa 	bl	4066c4 <__aeabi_fsub>
  4050d0:	4601      	mov	r1, r0
  4050d2:	4620      	mov	r0, r4
  4050d4:	f001 faf6 	bl	4066c4 <__aeabi_fsub>
  4050d8:	4601      	mov	r1, r0
  4050da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4050de:	f001 faf1 	bl	4066c4 <__aeabi_fsub>
  4050e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4050e6:	4601      	mov	r1, r0
  4050e8:	f001 fbf6 	bl	4068d8 <__aeabi_fmul>
  4050ec:	492c      	ldr	r1, [pc, #176]	; (4051a0 <__kernel_cosf+0x160>)
  4050ee:	4605      	mov	r5, r0
  4050f0:	f001 fbf2 	bl	4068d8 <__aeabi_fmul>
  4050f4:	492b      	ldr	r1, [pc, #172]	; (4051a4 <__kernel_cosf+0x164>)
  4050f6:	f001 fae7 	bl	4066c8 <__addsf3>
  4050fa:	4629      	mov	r1, r5
  4050fc:	f001 fbec 	bl	4068d8 <__aeabi_fmul>
  405100:	4929      	ldr	r1, [pc, #164]	; (4051a8 <__kernel_cosf+0x168>)
  405102:	f001 fadf 	bl	4066c4 <__aeabi_fsub>
  405106:	4629      	mov	r1, r5
  405108:	f001 fbe6 	bl	4068d8 <__aeabi_fmul>
  40510c:	4927      	ldr	r1, [pc, #156]	; (4051ac <__kernel_cosf+0x16c>)
  40510e:	f001 fadb 	bl	4066c8 <__addsf3>
  405112:	4629      	mov	r1, r5
  405114:	f001 fbe0 	bl	4068d8 <__aeabi_fmul>
  405118:	4925      	ldr	r1, [pc, #148]	; (4051b0 <__kernel_cosf+0x170>)
  40511a:	f001 fad3 	bl	4066c4 <__aeabi_fsub>
  40511e:	4629      	mov	r1, r5
  405120:	f001 fbda 	bl	4068d8 <__aeabi_fmul>
  405124:	4923      	ldr	r1, [pc, #140]	; (4051b4 <__kernel_cosf+0x174>)
  405126:	f001 facf 	bl	4066c8 <__addsf3>
  40512a:	4629      	mov	r1, r5
  40512c:	f001 fbd4 	bl	4068d8 <__aeabi_fmul>
  405130:	4b21      	ldr	r3, [pc, #132]	; (4051b8 <__kernel_cosf+0x178>)
  405132:	429c      	cmp	r4, r3
  405134:	4680      	mov	r8, r0
  405136:	ddb8      	ble.n	4050aa <__kernel_cosf+0x6a>
  405138:	4b20      	ldr	r3, [pc, #128]	; (4051bc <__kernel_cosf+0x17c>)
  40513a:	429c      	cmp	r4, r3
  40513c:	dc27      	bgt.n	40518e <__kernel_cosf+0x14e>
  40513e:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  405142:	4621      	mov	r1, r4
  405144:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405148:	f001 fabc 	bl	4066c4 <__aeabi_fsub>
  40514c:	4681      	mov	r9, r0
  40514e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  405152:	4628      	mov	r0, r5
  405154:	f001 fbc0 	bl	4068d8 <__aeabi_fmul>
  405158:	4621      	mov	r1, r4
  40515a:	f001 fab3 	bl	4066c4 <__aeabi_fsub>
  40515e:	4641      	mov	r1, r8
  405160:	4604      	mov	r4, r0
  405162:	4628      	mov	r0, r5
  405164:	f001 fbb8 	bl	4068d8 <__aeabi_fmul>
  405168:	4639      	mov	r1, r7
  40516a:	4605      	mov	r5, r0
  40516c:	4630      	mov	r0, r6
  40516e:	f001 fbb3 	bl	4068d8 <__aeabi_fmul>
  405172:	4601      	mov	r1, r0
  405174:	4628      	mov	r0, r5
  405176:	f001 faa5 	bl	4066c4 <__aeabi_fsub>
  40517a:	4601      	mov	r1, r0
  40517c:	4620      	mov	r0, r4
  40517e:	f001 faa1 	bl	4066c4 <__aeabi_fsub>
  405182:	4601      	mov	r1, r0
  405184:	4648      	mov	r0, r9
  405186:	f001 fa9d 	bl	4066c4 <__aeabi_fsub>
  40518a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40518e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4051c4 <__kernel_cosf+0x184>
  405192:	4c0b      	ldr	r4, [pc, #44]	; (4051c0 <__kernel_cosf+0x180>)
  405194:	e7db      	b.n	40514e <__kernel_cosf+0x10e>
  405196:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40519e:	bf00      	nop
  4051a0:	ad47d74e 	.word	0xad47d74e
  4051a4:	310f74f6 	.word	0x310f74f6
  4051a8:	3493f27c 	.word	0x3493f27c
  4051ac:	37d00d01 	.word	0x37d00d01
  4051b0:	3ab60b61 	.word	0x3ab60b61
  4051b4:	3d2aaaab 	.word	0x3d2aaaab
  4051b8:	3e999999 	.word	0x3e999999
  4051bc:	3f480000 	.word	0x3f480000
  4051c0:	3e900000 	.word	0x3e900000
  4051c4:	3f380000 	.word	0x3f380000

004051c8 <__kernel_rem_pio2f>:
  4051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051cc:	b0dd      	sub	sp, #372	; 0x174
  4051ce:	4c90      	ldr	r4, [pc, #576]	; (405410 <__kernel_rem_pio2f+0x248>)
  4051d0:	9308      	str	r3, [sp, #32]
  4051d2:	3b01      	subs	r3, #1
  4051d4:	9301      	str	r3, [sp, #4]
  4051d6:	1ed3      	subs	r3, r2, #3
  4051d8:	bf48      	it	mi
  4051da:	1d13      	addmi	r3, r2, #4
  4051dc:	9d66      	ldr	r5, [sp, #408]	; 0x198
  4051de:	9107      	str	r1, [sp, #28]
  4051e0:	10db      	asrs	r3, r3, #3
  4051e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4051e6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  4051ea:	9309      	str	r3, [sp, #36]	; 0x24
  4051ec:	4619      	mov	r1, r3
  4051ee:	3301      	adds	r3, #1
  4051f0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  4051f4:	9405      	str	r4, [sp, #20]
  4051f6:	9a01      	ldr	r2, [sp, #4]
  4051f8:	9304      	str	r3, [sp, #16]
  4051fa:	9b05      	ldr	r3, [sp, #20]
  4051fc:	9002      	str	r0, [sp, #8]
  4051fe:	189c      	adds	r4, r3, r2
  405200:	eba1 0602 	sub.w	r6, r1, r2
  405204:	d417      	bmi.n	405236 <__kernel_rem_pio2f+0x6e>
  405206:	4434      	add	r4, r6
  405208:	2500      	movs	r5, #0
  40520a:	3401      	adds	r4, #1
  40520c:	af1f      	add	r7, sp, #124	; 0x7c
  40520e:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  405212:	e008      	b.n	405226 <__kernel_rem_pio2f+0x5e>
  405214:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  405218:	f001 fb0a 	bl	406830 <__aeabi_i2f>
  40521c:	3601      	adds	r6, #1
  40521e:	42a6      	cmp	r6, r4
  405220:	f847 0f04 	str.w	r0, [r7, #4]!
  405224:	d007      	beq.n	405236 <__kernel_rem_pio2f+0x6e>
  405226:	2e00      	cmp	r6, #0
  405228:	daf4      	bge.n	405214 <__kernel_rem_pio2f+0x4c>
  40522a:	3601      	adds	r6, #1
  40522c:	4628      	mov	r0, r5
  40522e:	42a6      	cmp	r6, r4
  405230:	f847 0f04 	str.w	r0, [r7, #4]!
  405234:	d1f7      	bne.n	405226 <__kernel_rem_pio2f+0x5e>
  405236:	9b05      	ldr	r3, [sp, #20]
  405238:	2b00      	cmp	r3, #0
  40523a:	db28      	blt.n	40528e <__kernel_rem_pio2f+0xc6>
  40523c:	9b08      	ldr	r3, [sp, #32]
  40523e:	009e      	lsls	r6, r3, #2
  405240:	9b02      	ldr	r3, [sp, #8]
  405242:	1f35      	subs	r5, r6, #4
  405244:	441d      	add	r5, r3
  405246:	ab20      	add	r3, sp, #128	; 0x80
  405248:	441e      	add	r6, r3
  40524a:	9b05      	ldr	r3, [sp, #20]
  40524c:	aa48      	add	r2, sp, #288	; 0x120
  40524e:	f04f 0900 	mov.w	r9, #0
  405252:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  405256:	af47      	add	r7, sp, #284	; 0x11c
  405258:	9b01      	ldr	r3, [sp, #4]
  40525a:	2b00      	cmp	r3, #0
  40525c:	f2c0 82b9 	blt.w	4057d2 <__kernel_rem_pio2f+0x60a>
  405260:	9b02      	ldr	r3, [sp, #8]
  405262:	46b3      	mov	fp, r6
  405264:	1f1c      	subs	r4, r3, #4
  405266:	46ca      	mov	sl, r9
  405268:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  40526c:	f854 0f04 	ldr.w	r0, [r4, #4]!
  405270:	f001 fb32 	bl	4068d8 <__aeabi_fmul>
  405274:	4601      	mov	r1, r0
  405276:	4650      	mov	r0, sl
  405278:	f001 fa26 	bl	4066c8 <__addsf3>
  40527c:	42ac      	cmp	r4, r5
  40527e:	4682      	mov	sl, r0
  405280:	d1f2      	bne.n	405268 <__kernel_rem_pio2f+0xa0>
  405282:	f847 af04 	str.w	sl, [r7, #4]!
  405286:	4547      	cmp	r7, r8
  405288:	f106 0604 	add.w	r6, r6, #4
  40528c:	d1e4      	bne.n	405258 <__kernel_rem_pio2f+0x90>
  40528e:	9805      	ldr	r0, [sp, #20]
  405290:	9908      	ldr	r1, [sp, #32]
  405292:	9c02      	ldr	r4, [sp, #8]
  405294:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  405298:	4603      	mov	r3, r0
  40529a:	4413      	add	r3, r2
  40529c:	009b      	lsls	r3, r3, #2
  40529e:	440a      	add	r2, r1
  4052a0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  4052a4:	1f19      	subs	r1, r3, #4
  4052a6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  4052aa:	4453      	add	r3, sl
  4052ac:	eb0a 0201 	add.w	r2, sl, r1
  4052b0:	920a      	str	r2, [sp, #40]	; 0x28
  4052b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4052b4:	4680      	mov	r8, r0
  4052b6:	ea4f 0388 	mov.w	r3, r8, lsl #2
  4052ba:	aa5c      	add	r2, sp, #368	; 0x170
  4052bc:	9303      	str	r3, [sp, #12]
  4052be:	18d3      	adds	r3, r2, r3
  4052c0:	f1b8 0f00 	cmp.w	r8, #0
  4052c4:	f853 9c50 	ldr.w	r9, [r3, #-80]
  4052c8:	dd22      	ble.n	405310 <__kernel_rem_pio2f+0x148>
  4052ca:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  4052ce:	3c54      	subs	r4, #84	; 0x54
  4052d0:	ae0b      	add	r6, sp, #44	; 0x2c
  4052d2:	af47      	add	r7, sp, #284	; 0x11c
  4052d4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4052d8:	4648      	mov	r0, r9
  4052da:	f001 fafd 	bl	4068d8 <__aeabi_fmul>
  4052de:	f001 fcd7 	bl	406c90 <__aeabi_f2iz>
  4052e2:	f001 faa5 	bl	406830 <__aeabi_i2f>
  4052e6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4052ea:	4683      	mov	fp, r0
  4052ec:	f001 faf4 	bl	4068d8 <__aeabi_fmul>
  4052f0:	4601      	mov	r1, r0
  4052f2:	4648      	mov	r0, r9
  4052f4:	f001 f9e6 	bl	4066c4 <__aeabi_fsub>
  4052f8:	f001 fcca 	bl	406c90 <__aeabi_f2iz>
  4052fc:	f854 1904 	ldr.w	r1, [r4], #-4
  405300:	f846 0f04 	str.w	r0, [r6, #4]!
  405304:	4658      	mov	r0, fp
  405306:	f001 f9df 	bl	4066c8 <__addsf3>
  40530a:	42bc      	cmp	r4, r7
  40530c:	4681      	mov	r9, r0
  40530e:	d1e1      	bne.n	4052d4 <__kernel_rem_pio2f+0x10c>
  405310:	9e04      	ldr	r6, [sp, #16]
  405312:	4648      	mov	r0, r9
  405314:	4631      	mov	r1, r6
  405316:	f000 fcbb 	bl	405c90 <scalbnf>
  40531a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  40531e:	4604      	mov	r4, r0
  405320:	f001 fada 	bl	4068d8 <__aeabi_fmul>
  405324:	f000 fc6e 	bl	405c04 <floorf>
  405328:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  40532c:	f001 fad4 	bl	4068d8 <__aeabi_fmul>
  405330:	4601      	mov	r1, r0
  405332:	4620      	mov	r0, r4
  405334:	f001 f9c6 	bl	4066c4 <__aeabi_fsub>
  405338:	4604      	mov	r4, r0
  40533a:	f001 fca9 	bl	406c90 <__aeabi_f2iz>
  40533e:	4681      	mov	r9, r0
  405340:	9006      	str	r0, [sp, #24]
  405342:	f001 fa75 	bl	406830 <__aeabi_i2f>
  405346:	4601      	mov	r1, r0
  405348:	4620      	mov	r0, r4
  40534a:	f001 f9bb 	bl	4066c4 <__aeabi_fsub>
  40534e:	2e00      	cmp	r6, #0
  405350:	4607      	mov	r7, r0
  405352:	f340 80e6 	ble.w	405522 <__kernel_rem_pio2f+0x35a>
  405356:	f108 31ff 	add.w	r1, r8, #4294967295
  40535a:	f1c6 0308 	rsb	r3, r6, #8
  40535e:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  405362:	fa42 f003 	asr.w	r0, r2, r3
  405366:	fa00 f303 	lsl.w	r3, r0, r3
  40536a:	1ad3      	subs	r3, r2, r3
  40536c:	464a      	mov	r2, r9
  40536e:	f1c6 0407 	rsb	r4, r6, #7
  405372:	4402      	add	r2, r0
  405374:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  405378:	9206      	str	r2, [sp, #24]
  40537a:	fa43 f404 	asr.w	r4, r3, r4
  40537e:	2c00      	cmp	r4, #0
  405380:	dd5b      	ble.n	40543a <__kernel_rem_pio2f+0x272>
  405382:	9b06      	ldr	r3, [sp, #24]
  405384:	f1b8 0f00 	cmp.w	r8, #0
  405388:	f103 0301 	add.w	r3, r3, #1
  40538c:	9306      	str	r3, [sp, #24]
  40538e:	f340 823b 	ble.w	405808 <__kernel_rem_pio2f+0x640>
  405392:	f8da 6000 	ldr.w	r6, [sl]
  405396:	2e00      	cmp	r6, #0
  405398:	f040 8294 	bne.w	4058c4 <__kernel_rem_pio2f+0x6fc>
  40539c:	f1b8 0f01 	cmp.w	r8, #1
  4053a0:	f340 8255 	ble.w	40584e <__kernel_rem_pio2f+0x686>
  4053a4:	4652      	mov	r2, sl
  4053a6:	2301      	movs	r3, #1
  4053a8:	f852 6f04 	ldr.w	r6, [r2, #4]!
  4053ac:	2e00      	cmp	r6, #0
  4053ae:	f000 824a 	beq.w	405846 <__kernel_rem_pio2f+0x67e>
  4053b2:	1c59      	adds	r1, r3, #1
  4053b4:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  4053b8:	4588      	cmp	r8, r1
  4053ba:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  4053be:	dd14      	ble.n	4053ea <__kernel_rem_pio2f+0x222>
  4053c0:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  4053c4:	3302      	adds	r3, #2
  4053c6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  4053ca:	4598      	cmp	r8, r3
  4053cc:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  4053d0:	dd0b      	ble.n	4053ea <__kernel_rem_pio2f+0x222>
  4053d2:	9a03      	ldr	r2, [sp, #12]
  4053d4:	4452      	add	r2, sl
  4053d6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4053da:	4691      	mov	r9, r2
  4053dc:	681a      	ldr	r2, [r3, #0]
  4053de:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  4053e2:	f843 2b04 	str.w	r2, [r3], #4
  4053e6:	454b      	cmp	r3, r9
  4053e8:	d1f8      	bne.n	4053dc <__kernel_rem_pio2f+0x214>
  4053ea:	9b04      	ldr	r3, [sp, #16]
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	dd11      	ble.n	405414 <__kernel_rem_pio2f+0x24c>
  4053f0:	9b04      	ldr	r3, [sp, #16]
  4053f2:	2b01      	cmp	r3, #1
  4053f4:	f04f 0601 	mov.w	r6, #1
  4053f8:	f040 820e 	bne.w	405818 <__kernel_rem_pio2f+0x650>
  4053fc:	f108 32ff 	add.w	r2, r8, #4294967295
  405400:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405408:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  40540c:	e20e      	b.n	40582c <__kernel_rem_pio2f+0x664>
  40540e:	bf00      	nop
  405410:	0040c1f8 	.word	0x0040c1f8
  405414:	2c02      	cmp	r4, #2
  405416:	d110      	bne.n	40543a <__kernel_rem_pio2f+0x272>
  405418:	4639      	mov	r1, r7
  40541a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40541e:	f001 f951 	bl	4066c4 <__aeabi_fsub>
  405422:	4607      	mov	r7, r0
  405424:	9904      	ldr	r1, [sp, #16]
  405426:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40542a:	f000 fc31 	bl	405c90 <scalbnf>
  40542e:	4601      	mov	r1, r0
  405430:	4638      	mov	r0, r7
  405432:	f001 f947 	bl	4066c4 <__aeabi_fsub>
  405436:	2402      	movs	r4, #2
  405438:	4607      	mov	r7, r0
  40543a:	2100      	movs	r1, #0
  40543c:	4638      	mov	r0, r7
  40543e:	f001 fbdf 	bl	406c00 <__aeabi_fcmpeq>
  405442:	2800      	cmp	r0, #0
  405444:	f000 8083 	beq.w	40554e <__kernel_rem_pio2f+0x386>
  405448:	9b05      	ldr	r3, [sp, #20]
  40544a:	f108 37ff 	add.w	r7, r8, #4294967295
  40544e:	42bb      	cmp	r3, r7
  405450:	dc0f      	bgt.n	405472 <__kernel_rem_pio2f+0x2aa>
  405452:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  405456:	3b01      	subs	r3, #1
  405458:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40545a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  40545e:	2200      	movs	r2, #0
  405460:	f853 1904 	ldr.w	r1, [r3], #-4
  405464:	4283      	cmp	r3, r0
  405466:	ea42 0201 	orr.w	r2, r2, r1
  40546a:	d1f9      	bne.n	405460 <__kernel_rem_pio2f+0x298>
  40546c:	2a00      	cmp	r2, #0
  40546e:	f040 809d 	bne.w	4055ac <__kernel_rem_pio2f+0x3e4>
  405472:	9b05      	ldr	r3, [sp, #20]
  405474:	3b01      	subs	r3, #1
  405476:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  40547a:	2b00      	cmp	r3, #0
  40547c:	f040 81f4 	bne.w	405868 <__kernel_rem_pio2f+0x6a0>
  405480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405482:	2301      	movs	r3, #1
  405484:	f852 1904 	ldr.w	r1, [r2], #-4
  405488:	3301      	adds	r3, #1
  40548a:	2900      	cmp	r1, #0
  40548c:	d0fa      	beq.n	405484 <__kernel_rem_pio2f+0x2bc>
  40548e:	4443      	add	r3, r8
  405490:	461a      	mov	r2, r3
  405492:	9306      	str	r3, [sp, #24]
  405494:	f108 0301 	add.w	r3, r8, #1
  405498:	4293      	cmp	r3, r2
  40549a:	dc37      	bgt.n	40550c <__kernel_rem_pio2f+0x344>
  40549c:	9908      	ldr	r1, [sp, #32]
  40549e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4054a0:	eb01 0708 	add.w	r7, r1, r8
  4054a4:	a920      	add	r1, sp, #128	; 0x80
  4054a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4054aa:	9906      	ldr	r1, [sp, #24]
  4054ac:	189e      	adds	r6, r3, r2
  4054ae:	eb01 0902 	add.w	r9, r1, r2
  4054b2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  4054b6:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  4054b8:	3e01      	subs	r6, #1
  4054ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4054be:	aa48      	add	r2, sp, #288	; 0x120
  4054c0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  4054c4:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  4054c6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  4054ca:	9303      	str	r3, [sp, #12]
  4054cc:	f856 0f04 	ldr.w	r0, [r6, #4]!
  4054d0:	f001 f9ae 	bl	406830 <__aeabi_i2f>
  4054d4:	9b01      	ldr	r3, [sp, #4]
  4054d6:	f847 0b04 	str.w	r0, [r7], #4
  4054da:	2b00      	cmp	r3, #0
  4054dc:	db19      	blt.n	405512 <__kernel_rem_pio2f+0x34a>
  4054de:	9b02      	ldr	r3, [sp, #8]
  4054e0:	46bb      	mov	fp, r7
  4054e2:	1f1c      	subs	r4, r3, #4
  4054e4:	f04f 0900 	mov.w	r9, #0
  4054e8:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  4054ec:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4054f0:	f001 f9f2 	bl	4068d8 <__aeabi_fmul>
  4054f4:	4601      	mov	r1, r0
  4054f6:	4648      	mov	r0, r9
  4054f8:	f001 f8e6 	bl	4066c8 <__addsf3>
  4054fc:	42ac      	cmp	r4, r5
  4054fe:	4681      	mov	r9, r0
  405500:	d1f2      	bne.n	4054e8 <__kernel_rem_pio2f+0x320>
  405502:	9b03      	ldr	r3, [sp, #12]
  405504:	f848 9b04 	str.w	r9, [r8], #4
  405508:	429e      	cmp	r6, r3
  40550a:	d1df      	bne.n	4054cc <__kernel_rem_pio2f+0x304>
  40550c:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405510:	e6d1      	b.n	4052b6 <__kernel_rem_pio2f+0xee>
  405512:	9b03      	ldr	r3, [sp, #12]
  405514:	f04f 0900 	mov.w	r9, #0
  405518:	429e      	cmp	r6, r3
  40551a:	f848 9b04 	str.w	r9, [r8], #4
  40551e:	d1d5      	bne.n	4054cc <__kernel_rem_pio2f+0x304>
  405520:	e7f4      	b.n	40550c <__kernel_rem_pio2f+0x344>
  405522:	d105      	bne.n	405530 <__kernel_rem_pio2f+0x368>
  405524:	f108 33ff 	add.w	r3, r8, #4294967295
  405528:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  40552c:	1224      	asrs	r4, r4, #8
  40552e:	e726      	b.n	40537e <__kernel_rem_pio2f+0x1b6>
  405530:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  405534:	f001 fb82 	bl	406c3c <__aeabi_fcmpge>
  405538:	2800      	cmp	r0, #0
  40553a:	f040 8153 	bne.w	4057e4 <__kernel_rem_pio2f+0x61c>
  40553e:	4604      	mov	r4, r0
  405540:	2100      	movs	r1, #0
  405542:	4638      	mov	r0, r7
  405544:	f001 fb5c 	bl	406c00 <__aeabi_fcmpeq>
  405548:	2800      	cmp	r0, #0
  40554a:	f47f af7d 	bne.w	405448 <__kernel_rem_pio2f+0x280>
  40554e:	9e04      	ldr	r6, [sp, #16]
  405550:	4638      	mov	r0, r7
  405552:	4271      	negs	r1, r6
  405554:	f000 fb9c 	bl	405c90 <scalbnf>
  405558:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40555c:	46a1      	mov	r9, r4
  40555e:	4604      	mov	r4, r0
  405560:	f001 fb6c 	bl	406c3c <__aeabi_fcmpge>
  405564:	2800      	cmp	r0, #0
  405566:	f000 818d 	beq.w	405884 <__kernel_rem_pio2f+0x6bc>
  40556a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  40556e:	4620      	mov	r0, r4
  405570:	f001 f9b2 	bl	4068d8 <__aeabi_fmul>
  405574:	f001 fb8c 	bl	406c90 <__aeabi_f2iz>
  405578:	f001 f95a 	bl	406830 <__aeabi_i2f>
  40557c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  405580:	4605      	mov	r5, r0
  405582:	f001 f9a9 	bl	4068d8 <__aeabi_fmul>
  405586:	4601      	mov	r1, r0
  405588:	4620      	mov	r0, r4
  40558a:	f001 f89b 	bl	4066c4 <__aeabi_fsub>
  40558e:	f001 fb7f 	bl	406c90 <__aeabi_f2iz>
  405592:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  405596:	4628      	mov	r0, r5
  405598:	f001 fb7a 	bl	406c90 <__aeabi_f2iz>
  40559c:	f108 0701 	add.w	r7, r8, #1
  4055a0:	4633      	mov	r3, r6
  4055a2:	3308      	adds	r3, #8
  4055a4:	9304      	str	r3, [sp, #16]
  4055a6:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  4055aa:	e012      	b.n	4055d2 <__kernel_rem_pio2f+0x40a>
  4055ac:	9a04      	ldr	r2, [sp, #16]
  4055ae:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4055b2:	3a08      	subs	r2, #8
  4055b4:	46a1      	mov	r9, r4
  4055b6:	9204      	str	r2, [sp, #16]
  4055b8:	b95b      	cbnz	r3, 4055d2 <__kernel_rem_pio2f+0x40a>
  4055ba:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  4055be:	3b01      	subs	r3, #1
  4055c0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4055c4:	f853 1904 	ldr.w	r1, [r3], #-4
  4055c8:	3f01      	subs	r7, #1
  4055ca:	3a08      	subs	r2, #8
  4055cc:	2900      	cmp	r1, #0
  4055ce:	d0f9      	beq.n	4055c4 <__kernel_rem_pio2f+0x3fc>
  4055d0:	9204      	str	r2, [sp, #16]
  4055d2:	9904      	ldr	r1, [sp, #16]
  4055d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4055d8:	f000 fb5a 	bl	405c90 <scalbnf>
  4055dc:	2f00      	cmp	r7, #0
  4055de:	4604      	mov	r4, r0
  4055e0:	f2c0 815c 	blt.w	40589c <__kernel_rem_pio2f+0x6d4>
  4055e4:	00bb      	lsls	r3, r7, #2
  4055e6:	a948      	add	r1, sp, #288	; 0x120
  4055e8:	1d1a      	adds	r2, r3, #4
  4055ea:	eb01 0803 	add.w	r8, r1, r3
  4055ee:	9301      	str	r3, [sp, #4]
  4055f0:	9202      	str	r2, [sp, #8]
  4055f2:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  4055f6:	eb0a 0b02 	add.w	fp, sl, r2
  4055fa:	f108 0504 	add.w	r5, r8, #4
  4055fe:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  405602:	f001 f915 	bl	406830 <__aeabi_i2f>
  405606:	4621      	mov	r1, r4
  405608:	f001 f966 	bl	4068d8 <__aeabi_fmul>
  40560c:	4631      	mov	r1, r6
  40560e:	f845 0d04 	str.w	r0, [r5, #-4]!
  405612:	4620      	mov	r0, r4
  405614:	f001 f960 	bl	4068d8 <__aeabi_fmul>
  405618:	45d3      	cmp	fp, sl
  40561a:	4604      	mov	r4, r0
  40561c:	d1ef      	bne.n	4055fe <__kernel_rem_pio2f+0x436>
  40561e:	2600      	movs	r6, #0
  405620:	f8dd b014 	ldr.w	fp, [sp, #20]
  405624:	9703      	str	r7, [sp, #12]
  405626:	f1a8 0804 	sub.w	r8, r8, #4
  40562a:	46b2      	mov	sl, r6
  40562c:	f1bb 0f00 	cmp.w	fp, #0
  405630:	bfb8      	it	lt
  405632:	2500      	movlt	r5, #0
  405634:	db15      	blt.n	405662 <__kernel_rem_pio2f+0x49a>
  405636:	4ea5      	ldr	r6, [pc, #660]	; (4058cc <__kernel_rem_pio2f+0x704>)
  405638:	48a5      	ldr	r0, [pc, #660]	; (4058d0 <__kernel_rem_pio2f+0x708>)
  40563a:	4647      	mov	r7, r8
  40563c:	2500      	movs	r5, #0
  40563e:	2400      	movs	r4, #0
  405640:	e003      	b.n	40564a <__kernel_rem_pio2f+0x482>
  405642:	4554      	cmp	r4, sl
  405644:	dc0d      	bgt.n	405662 <__kernel_rem_pio2f+0x49a>
  405646:	f856 0f04 	ldr.w	r0, [r6, #4]!
  40564a:	f857 1f04 	ldr.w	r1, [r7, #4]!
  40564e:	f001 f943 	bl	4068d8 <__aeabi_fmul>
  405652:	4601      	mov	r1, r0
  405654:	4628      	mov	r0, r5
  405656:	f001 f837 	bl	4066c8 <__addsf3>
  40565a:	3401      	adds	r4, #1
  40565c:	45a3      	cmp	fp, r4
  40565e:	4605      	mov	r5, r0
  405660:	daef      	bge.n	405642 <__kernel_rem_pio2f+0x47a>
  405662:	ab5c      	add	r3, sp, #368	; 0x170
  405664:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405668:	f1a8 0804 	sub.w	r8, r8, #4
  40566c:	f843 5ca0 	str.w	r5, [r3, #-160]
  405670:	ab46      	add	r3, sp, #280	; 0x118
  405672:	4543      	cmp	r3, r8
  405674:	f10a 0a01 	add.w	sl, sl, #1
  405678:	d1d8      	bne.n	40562c <__kernel_rem_pio2f+0x464>
  40567a:	9b66      	ldr	r3, [sp, #408]	; 0x198
  40567c:	9f03      	ldr	r7, [sp, #12]
  40567e:	2b03      	cmp	r3, #3
  405680:	d85a      	bhi.n	405738 <__kernel_rem_pio2f+0x570>
  405682:	e8df f003 	tbb	[pc, r3]
  405686:	5f8e      	.short	0x5f8e
  405688:	025f      	.short	0x025f
  40568a:	2f00      	cmp	r7, #0
  40568c:	f340 8104 	ble.w	405898 <__kernel_rem_pio2f+0x6d0>
  405690:	9a01      	ldr	r2, [sp, #4]
  405692:	a95c      	add	r1, sp, #368	; 0x170
  405694:	188b      	adds	r3, r1, r2
  405696:	ac34      	add	r4, sp, #208	; 0xd0
  405698:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  40569c:	18a5      	adds	r5, r4, r2
  40569e:	f855 ac04 	ldr.w	sl, [r5, #-4]
  4056a2:	4631      	mov	r1, r6
  4056a4:	4650      	mov	r0, sl
  4056a6:	f001 f80f 	bl	4066c8 <__addsf3>
  4056aa:	4680      	mov	r8, r0
  4056ac:	4601      	mov	r1, r0
  4056ae:	4650      	mov	r0, sl
  4056b0:	f001 f808 	bl	4066c4 <__aeabi_fsub>
  4056b4:	4631      	mov	r1, r6
  4056b6:	f001 f807 	bl	4066c8 <__addsf3>
  4056ba:	6028      	str	r0, [r5, #0]
  4056bc:	f845 8d04 	str.w	r8, [r5, #-4]!
  4056c0:	42ac      	cmp	r4, r5
  4056c2:	4646      	mov	r6, r8
  4056c4:	d1eb      	bne.n	40569e <__kernel_rem_pio2f+0x4d6>
  4056c6:	2f01      	cmp	r7, #1
  4056c8:	f340 80e6 	ble.w	405898 <__kernel_rem_pio2f+0x6d0>
  4056cc:	9a01      	ldr	r2, [sp, #4]
  4056ce:	a95c      	add	r1, sp, #368	; 0x170
  4056d0:	188b      	adds	r3, r1, r2
  4056d2:	4414      	add	r4, r2
  4056d4:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  4056d8:	4625      	mov	r5, r4
  4056da:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  4056de:	f855 8c04 	ldr.w	r8, [r5, #-4]
  4056e2:	4631      	mov	r1, r6
  4056e4:	4640      	mov	r0, r8
  4056e6:	f000 ffef 	bl	4066c8 <__addsf3>
  4056ea:	4607      	mov	r7, r0
  4056ec:	4601      	mov	r1, r0
  4056ee:	4640      	mov	r0, r8
  4056f0:	f000 ffe8 	bl	4066c4 <__aeabi_fsub>
  4056f4:	4631      	mov	r1, r6
  4056f6:	f000 ffe7 	bl	4066c8 <__addsf3>
  4056fa:	6028      	str	r0, [r5, #0]
  4056fc:	f845 7d04 	str.w	r7, [r5, #-4]!
  405700:	45aa      	cmp	sl, r5
  405702:	463e      	mov	r6, r7
  405704:	d1eb      	bne.n	4056de <__kernel_rem_pio2f+0x516>
  405706:	2000      	movs	r0, #0
  405708:	3404      	adds	r4, #4
  40570a:	ad36      	add	r5, sp, #216	; 0xd8
  40570c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  405710:	f000 ffda 	bl	4066c8 <__addsf3>
  405714:	42a5      	cmp	r5, r4
  405716:	d1f9      	bne.n	40570c <__kernel_rem_pio2f+0x544>
  405718:	f1b9 0f00 	cmp.w	r9, #0
  40571c:	f000 80b9 	beq.w	405892 <__kernel_rem_pio2f+0x6ca>
  405720:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  405722:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  405724:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405728:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40572c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405730:	9c07      	ldr	r4, [sp, #28]
  405732:	60a0      	str	r0, [r4, #8]
  405734:	6022      	str	r2, [r4, #0]
  405736:	6063      	str	r3, [r4, #4]
  405738:	9b06      	ldr	r3, [sp, #24]
  40573a:	f003 0007 	and.w	r0, r3, #7
  40573e:	b05d      	add	sp, #372	; 0x174
  405740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405744:	9c01      	ldr	r4, [sp, #4]
  405746:	ad34      	add	r5, sp, #208	; 0xd0
  405748:	3404      	adds	r4, #4
  40574a:	442c      	add	r4, r5
  40574c:	2000      	movs	r0, #0
  40574e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  405752:	f000 ffb9 	bl	4066c8 <__addsf3>
  405756:	42ac      	cmp	r4, r5
  405758:	d1f9      	bne.n	40574e <__kernel_rem_pio2f+0x586>
  40575a:	f1b9 0f00 	cmp.w	r9, #0
  40575e:	f000 8085 	beq.w	40586c <__kernel_rem_pio2f+0x6a4>
  405762:	9a07      	ldr	r2, [sp, #28]
  405764:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  405768:	4601      	mov	r1, r0
  40576a:	6013      	str	r3, [r2, #0]
  40576c:	9834      	ldr	r0, [sp, #208]	; 0xd0
  40576e:	f000 ffa9 	bl	4066c4 <__aeabi_fsub>
  405772:	2f00      	cmp	r7, #0
  405774:	dd0b      	ble.n	40578e <__kernel_rem_pio2f+0x5c6>
  405776:	ad34      	add	r5, sp, #208	; 0xd0
  405778:	2401      	movs	r4, #1
  40577a:	3401      	adds	r4, #1
  40577c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405780:	f000 ffa2 	bl	4066c8 <__addsf3>
  405784:	42a7      	cmp	r7, r4
  405786:	daf8      	bge.n	40577a <__kernel_rem_pio2f+0x5b2>
  405788:	f1b9 0f00 	cmp.w	r9, #0
  40578c:	d001      	beq.n	405792 <__kernel_rem_pio2f+0x5ca>
  40578e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405792:	9b07      	ldr	r3, [sp, #28]
  405794:	6058      	str	r0, [r3, #4]
  405796:	9b06      	ldr	r3, [sp, #24]
  405798:	f003 0007 	and.w	r0, r3, #7
  40579c:	b05d      	add	sp, #372	; 0x174
  40579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057a2:	9b02      	ldr	r3, [sp, #8]
  4057a4:	ad34      	add	r5, sp, #208	; 0xd0
  4057a6:	442b      	add	r3, r5
  4057a8:	2000      	movs	r0, #0
  4057aa:	461c      	mov	r4, r3
  4057ac:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  4057b0:	f000 ff8a 	bl	4066c8 <__addsf3>
  4057b4:	42a5      	cmp	r5, r4
  4057b6:	d1f9      	bne.n	4057ac <__kernel_rem_pio2f+0x5e4>
  4057b8:	f1b9 0f00 	cmp.w	r9, #0
  4057bc:	d001      	beq.n	4057c2 <__kernel_rem_pio2f+0x5fa>
  4057be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4057c2:	9b07      	ldr	r3, [sp, #28]
  4057c4:	6018      	str	r0, [r3, #0]
  4057c6:	9b06      	ldr	r3, [sp, #24]
  4057c8:	f003 0007 	and.w	r0, r3, #7
  4057cc:	b05d      	add	sp, #372	; 0x174
  4057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057d2:	46ca      	mov	sl, r9
  4057d4:	f847 af04 	str.w	sl, [r7, #4]!
  4057d8:	4547      	cmp	r7, r8
  4057da:	f106 0604 	add.w	r6, r6, #4
  4057de:	f47f ad3b 	bne.w	405258 <__kernel_rem_pio2f+0x90>
  4057e2:	e554      	b.n	40528e <__kernel_rem_pio2f+0xc6>
  4057e4:	9b06      	ldr	r3, [sp, #24]
  4057e6:	f1b8 0f00 	cmp.w	r8, #0
  4057ea:	f103 0301 	add.w	r3, r3, #1
  4057ee:	9306      	str	r3, [sp, #24]
  4057f0:	bfc8      	it	gt
  4057f2:	2402      	movgt	r4, #2
  4057f4:	f73f adcd 	bgt.w	405392 <__kernel_rem_pio2f+0x1ca>
  4057f8:	4639      	mov	r1, r7
  4057fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4057fe:	f000 ff61 	bl	4066c4 <__aeabi_fsub>
  405802:	2402      	movs	r4, #2
  405804:	4607      	mov	r7, r0
  405806:	e618      	b.n	40543a <__kernel_rem_pio2f+0x272>
  405808:	9b04      	ldr	r3, [sp, #16]
  40580a:	2b00      	cmp	r3, #0
  40580c:	dd22      	ble.n	405854 <__kernel_rem_pio2f+0x68c>
  40580e:	2600      	movs	r6, #0
  405810:	9b04      	ldr	r3, [sp, #16]
  405812:	2b01      	cmp	r3, #1
  405814:	f43f adf2 	beq.w	4053fc <__kernel_rem_pio2f+0x234>
  405818:	2b02      	cmp	r3, #2
  40581a:	d107      	bne.n	40582c <__kernel_rem_pio2f+0x664>
  40581c:	f108 32ff 	add.w	r2, r8, #4294967295
  405820:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405828:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  40582c:	2c02      	cmp	r4, #2
  40582e:	f47f ae04 	bne.w	40543a <__kernel_rem_pio2f+0x272>
  405832:	4639      	mov	r1, r7
  405834:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405838:	f000 ff44 	bl	4066c4 <__aeabi_fsub>
  40583c:	4607      	mov	r7, r0
  40583e:	2e00      	cmp	r6, #0
  405840:	f43f adfb 	beq.w	40543a <__kernel_rem_pio2f+0x272>
  405844:	e5ee      	b.n	405424 <__kernel_rem_pio2f+0x25c>
  405846:	3301      	adds	r3, #1
  405848:	4598      	cmp	r8, r3
  40584a:	f47f adad 	bne.w	4053a8 <__kernel_rem_pio2f+0x1e0>
  40584e:	9b04      	ldr	r3, [sp, #16]
  405850:	2b00      	cmp	r3, #0
  405852:	dcdd      	bgt.n	405810 <__kernel_rem_pio2f+0x648>
  405854:	2c02      	cmp	r4, #2
  405856:	f47f adf0 	bne.w	40543a <__kernel_rem_pio2f+0x272>
  40585a:	4639      	mov	r1, r7
  40585c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405860:	f000 ff30 	bl	4066c4 <__aeabi_fsub>
  405864:	4607      	mov	r7, r0
  405866:	e5e8      	b.n	40543a <__kernel_rem_pio2f+0x272>
  405868:	2301      	movs	r3, #1
  40586a:	e610      	b.n	40548e <__kernel_rem_pio2f+0x2c6>
  40586c:	9b07      	ldr	r3, [sp, #28]
  40586e:	4601      	mov	r1, r0
  405870:	6018      	str	r0, [r3, #0]
  405872:	9834      	ldr	r0, [sp, #208]	; 0xd0
  405874:	f000 ff26 	bl	4066c4 <__aeabi_fsub>
  405878:	2f00      	cmp	r7, #0
  40587a:	f73f af7c 	bgt.w	405776 <__kernel_rem_pio2f+0x5ae>
  40587e:	9b07      	ldr	r3, [sp, #28]
  405880:	6058      	str	r0, [r3, #4]
  405882:	e788      	b.n	405796 <__kernel_rem_pio2f+0x5ce>
  405884:	4620      	mov	r0, r4
  405886:	f001 fa03 	bl	406c90 <__aeabi_f2iz>
  40588a:	4647      	mov	r7, r8
  40588c:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  405890:	e69f      	b.n	4055d2 <__kernel_rem_pio2f+0x40a>
  405892:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  405894:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  405896:	e74b      	b.n	405730 <__kernel_rem_pio2f+0x568>
  405898:	2000      	movs	r0, #0
  40589a:	e73d      	b.n	405718 <__kernel_rem_pio2f+0x550>
  40589c:	9b66      	ldr	r3, [sp, #408]	; 0x198
  40589e:	2b03      	cmp	r3, #3
  4058a0:	f63f af4a 	bhi.w	405738 <__kernel_rem_pio2f+0x570>
  4058a4:	a201      	add	r2, pc, #4	; (adr r2, 4058ac <__kernel_rem_pio2f+0x6e4>)
  4058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4058aa:	bf00      	nop
  4058ac:	004058c1 	.word	0x004058c1
  4058b0:	004058bd 	.word	0x004058bd
  4058b4:	004058bd 	.word	0x004058bd
  4058b8:	00405899 	.word	0x00405899
  4058bc:	2000      	movs	r0, #0
  4058be:	e74c      	b.n	40575a <__kernel_rem_pio2f+0x592>
  4058c0:	2000      	movs	r0, #0
  4058c2:	e779      	b.n	4057b8 <__kernel_rem_pio2f+0x5f0>
  4058c4:	2101      	movs	r1, #1
  4058c6:	2300      	movs	r3, #0
  4058c8:	e574      	b.n	4053b4 <__kernel_rem_pio2f+0x1ec>
  4058ca:	bf00      	nop
  4058cc:	0040c1cc 	.word	0x0040c1cc
  4058d0:	3fc90000 	.word	0x3fc90000

004058d4 <__kernel_sinf>:
  4058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4058d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4058dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  4058e0:	4604      	mov	r4, r0
  4058e2:	460f      	mov	r7, r1
  4058e4:	4690      	mov	r8, r2
  4058e6:	da03      	bge.n	4058f0 <__kernel_sinf+0x1c>
  4058e8:	f001 f9d2 	bl	406c90 <__aeabi_f2iz>
  4058ec:	2800      	cmp	r0, #0
  4058ee:	d058      	beq.n	4059a2 <__kernel_sinf+0xce>
  4058f0:	4621      	mov	r1, r4
  4058f2:	4620      	mov	r0, r4
  4058f4:	f000 fff0 	bl	4068d8 <__aeabi_fmul>
  4058f8:	4605      	mov	r5, r0
  4058fa:	4601      	mov	r1, r0
  4058fc:	4620      	mov	r0, r4
  4058fe:	f000 ffeb 	bl	4068d8 <__aeabi_fmul>
  405902:	4929      	ldr	r1, [pc, #164]	; (4059a8 <__kernel_sinf+0xd4>)
  405904:	4606      	mov	r6, r0
  405906:	4628      	mov	r0, r5
  405908:	f000 ffe6 	bl	4068d8 <__aeabi_fmul>
  40590c:	4927      	ldr	r1, [pc, #156]	; (4059ac <__kernel_sinf+0xd8>)
  40590e:	f000 fed9 	bl	4066c4 <__aeabi_fsub>
  405912:	4629      	mov	r1, r5
  405914:	f000 ffe0 	bl	4068d8 <__aeabi_fmul>
  405918:	4925      	ldr	r1, [pc, #148]	; (4059b0 <__kernel_sinf+0xdc>)
  40591a:	f000 fed5 	bl	4066c8 <__addsf3>
  40591e:	4629      	mov	r1, r5
  405920:	f000 ffda 	bl	4068d8 <__aeabi_fmul>
  405924:	4923      	ldr	r1, [pc, #140]	; (4059b4 <__kernel_sinf+0xe0>)
  405926:	f000 fecd 	bl	4066c4 <__aeabi_fsub>
  40592a:	4629      	mov	r1, r5
  40592c:	f000 ffd4 	bl	4068d8 <__aeabi_fmul>
  405930:	4921      	ldr	r1, [pc, #132]	; (4059b8 <__kernel_sinf+0xe4>)
  405932:	f000 fec9 	bl	4066c8 <__addsf3>
  405936:	4681      	mov	r9, r0
  405938:	f1b8 0f00 	cmp.w	r8, #0
  40593c:	d022      	beq.n	405984 <__kernel_sinf+0xb0>
  40593e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  405942:	4638      	mov	r0, r7
  405944:	f000 ffc8 	bl	4068d8 <__aeabi_fmul>
  405948:	4649      	mov	r1, r9
  40594a:	4680      	mov	r8, r0
  40594c:	4630      	mov	r0, r6
  40594e:	f000 ffc3 	bl	4068d8 <__aeabi_fmul>
  405952:	4601      	mov	r1, r0
  405954:	4640      	mov	r0, r8
  405956:	f000 feb5 	bl	4066c4 <__aeabi_fsub>
  40595a:	4629      	mov	r1, r5
  40595c:	f000 ffbc 	bl	4068d8 <__aeabi_fmul>
  405960:	4639      	mov	r1, r7
  405962:	f000 feaf 	bl	4066c4 <__aeabi_fsub>
  405966:	4915      	ldr	r1, [pc, #84]	; (4059bc <__kernel_sinf+0xe8>)
  405968:	4605      	mov	r5, r0
  40596a:	4630      	mov	r0, r6
  40596c:	f000 ffb4 	bl	4068d8 <__aeabi_fmul>
  405970:	4601      	mov	r1, r0
  405972:	4628      	mov	r0, r5
  405974:	f000 fea8 	bl	4066c8 <__addsf3>
  405978:	4601      	mov	r1, r0
  40597a:	4620      	mov	r0, r4
  40597c:	f000 fea2 	bl	4066c4 <__aeabi_fsub>
  405980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405984:	4601      	mov	r1, r0
  405986:	4628      	mov	r0, r5
  405988:	f000 ffa6 	bl	4068d8 <__aeabi_fmul>
  40598c:	490b      	ldr	r1, [pc, #44]	; (4059bc <__kernel_sinf+0xe8>)
  40598e:	f000 fe99 	bl	4066c4 <__aeabi_fsub>
  405992:	4631      	mov	r1, r6
  405994:	f000 ffa0 	bl	4068d8 <__aeabi_fmul>
  405998:	4621      	mov	r1, r4
  40599a:	f000 fe95 	bl	4066c8 <__addsf3>
  40599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4059a2:	4620      	mov	r0, r4
  4059a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4059a8:	2f2ec9d3 	.word	0x2f2ec9d3
  4059ac:	32d72f34 	.word	0x32d72f34
  4059b0:	3638ef1b 	.word	0x3638ef1b
  4059b4:	39500d01 	.word	0x39500d01
  4059b8:	3c088889 	.word	0x3c088889
  4059bc:	3e2aaaab 	.word	0x3e2aaaab

004059c0 <matherr>:
  4059c0:	2000      	movs	r0, #0
  4059c2:	4770      	bx	lr

004059c4 <nan>:
  4059c4:	2000      	movs	r0, #0
  4059c6:	4901      	ldr	r1, [pc, #4]	; (4059cc <nan+0x8>)
  4059c8:	4770      	bx	lr
  4059ca:	bf00      	nop
  4059cc:	7ff80000 	.word	0x7ff80000

004059d0 <atanf>:
  4059d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059d4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  4059d8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  4059dc:	4604      	mov	r4, r0
  4059de:	4606      	mov	r6, r0
  4059e0:	db08      	blt.n	4059f4 <atanf+0x24>
  4059e2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  4059e6:	dc6f      	bgt.n	405ac8 <atanf+0xf8>
  4059e8:	2800      	cmp	r0, #0
  4059ea:	f340 80a0 	ble.w	405b2e <atanf+0x15e>
  4059ee:	486f      	ldr	r0, [pc, #444]	; (405bac <atanf+0x1dc>)
  4059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4059f4:	4b6e      	ldr	r3, [pc, #440]	; (405bb0 <atanf+0x1e0>)
  4059f6:	429d      	cmp	r5, r3
  4059f8:	dc77      	bgt.n	405aea <atanf+0x11a>
  4059fa:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  4059fe:	db68      	blt.n	405ad2 <atanf+0x102>
  405a00:	f04f 37ff 	mov.w	r7, #4294967295
  405a04:	4621      	mov	r1, r4
  405a06:	4620      	mov	r0, r4
  405a08:	f000 ff66 	bl	4068d8 <__aeabi_fmul>
  405a0c:	4601      	mov	r1, r0
  405a0e:	4680      	mov	r8, r0
  405a10:	f000 ff62 	bl	4068d8 <__aeabi_fmul>
  405a14:	4967      	ldr	r1, [pc, #412]	; (405bb4 <atanf+0x1e4>)
  405a16:	4605      	mov	r5, r0
  405a18:	f000 ff5e 	bl	4068d8 <__aeabi_fmul>
  405a1c:	4966      	ldr	r1, [pc, #408]	; (405bb8 <atanf+0x1e8>)
  405a1e:	f000 fe53 	bl	4066c8 <__addsf3>
  405a22:	4629      	mov	r1, r5
  405a24:	f000 ff58 	bl	4068d8 <__aeabi_fmul>
  405a28:	4964      	ldr	r1, [pc, #400]	; (405bbc <atanf+0x1ec>)
  405a2a:	f000 fe4d 	bl	4066c8 <__addsf3>
  405a2e:	4629      	mov	r1, r5
  405a30:	f000 ff52 	bl	4068d8 <__aeabi_fmul>
  405a34:	4962      	ldr	r1, [pc, #392]	; (405bc0 <atanf+0x1f0>)
  405a36:	f000 fe47 	bl	4066c8 <__addsf3>
  405a3a:	4629      	mov	r1, r5
  405a3c:	f000 ff4c 	bl	4068d8 <__aeabi_fmul>
  405a40:	4960      	ldr	r1, [pc, #384]	; (405bc4 <atanf+0x1f4>)
  405a42:	f000 fe41 	bl	4066c8 <__addsf3>
  405a46:	4629      	mov	r1, r5
  405a48:	f000 ff46 	bl	4068d8 <__aeabi_fmul>
  405a4c:	495e      	ldr	r1, [pc, #376]	; (405bc8 <atanf+0x1f8>)
  405a4e:	f000 fe3b 	bl	4066c8 <__addsf3>
  405a52:	4641      	mov	r1, r8
  405a54:	f000 ff40 	bl	4068d8 <__aeabi_fmul>
  405a58:	495c      	ldr	r1, [pc, #368]	; (405bcc <atanf+0x1fc>)
  405a5a:	4680      	mov	r8, r0
  405a5c:	4628      	mov	r0, r5
  405a5e:	f000 ff3b 	bl	4068d8 <__aeabi_fmul>
  405a62:	495b      	ldr	r1, [pc, #364]	; (405bd0 <atanf+0x200>)
  405a64:	f000 fe2e 	bl	4066c4 <__aeabi_fsub>
  405a68:	4629      	mov	r1, r5
  405a6a:	f000 ff35 	bl	4068d8 <__aeabi_fmul>
  405a6e:	4959      	ldr	r1, [pc, #356]	; (405bd4 <atanf+0x204>)
  405a70:	f000 fe28 	bl	4066c4 <__aeabi_fsub>
  405a74:	4629      	mov	r1, r5
  405a76:	f000 ff2f 	bl	4068d8 <__aeabi_fmul>
  405a7a:	4957      	ldr	r1, [pc, #348]	; (405bd8 <atanf+0x208>)
  405a7c:	f000 fe22 	bl	4066c4 <__aeabi_fsub>
  405a80:	4629      	mov	r1, r5
  405a82:	f000 ff29 	bl	4068d8 <__aeabi_fmul>
  405a86:	4955      	ldr	r1, [pc, #340]	; (405bdc <atanf+0x20c>)
  405a88:	f000 fe1c 	bl	4066c4 <__aeabi_fsub>
  405a8c:	4629      	mov	r1, r5
  405a8e:	f000 ff23 	bl	4068d8 <__aeabi_fmul>
  405a92:	1c7b      	adds	r3, r7, #1
  405a94:	4601      	mov	r1, r0
  405a96:	4640      	mov	r0, r8
  405a98:	d04c      	beq.n	405b34 <atanf+0x164>
  405a9a:	f000 fe15 	bl	4066c8 <__addsf3>
  405a9e:	4621      	mov	r1, r4
  405aa0:	f000 ff1a 	bl	4068d8 <__aeabi_fmul>
  405aa4:	4b4e      	ldr	r3, [pc, #312]	; (405be0 <atanf+0x210>)
  405aa6:	4d4f      	ldr	r5, [pc, #316]	; (405be4 <atanf+0x214>)
  405aa8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  405aac:	f000 fe0a 	bl	4066c4 <__aeabi_fsub>
  405ab0:	4621      	mov	r1, r4
  405ab2:	f000 fe07 	bl	4066c4 <__aeabi_fsub>
  405ab6:	4601      	mov	r1, r0
  405ab8:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  405abc:	f000 fe02 	bl	4066c4 <__aeabi_fsub>
  405ac0:	2e00      	cmp	r6, #0
  405ac2:	db30      	blt.n	405b26 <atanf+0x156>
  405ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ac8:	4601      	mov	r1, r0
  405aca:	f000 fdfd 	bl	4066c8 <__addsf3>
  405ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ad2:	4945      	ldr	r1, [pc, #276]	; (405be8 <atanf+0x218>)
  405ad4:	f000 fdf8 	bl	4066c8 <__addsf3>
  405ad8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405adc:	f001 f8b8 	bl	406c50 <__aeabi_fcmpgt>
  405ae0:	2800      	cmp	r0, #0
  405ae2:	d08d      	beq.n	405a00 <atanf+0x30>
  405ae4:	4620      	mov	r0, r4
  405ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aea:	f000 f887 	bl	405bfc <fabsf>
  405aee:	4b3f      	ldr	r3, [pc, #252]	; (405bec <atanf+0x21c>)
  405af0:	429d      	cmp	r5, r3
  405af2:	4604      	mov	r4, r0
  405af4:	dc29      	bgt.n	405b4a <atanf+0x17a>
  405af6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405afa:	429d      	cmp	r5, r3
  405afc:	dc44      	bgt.n	405b88 <atanf+0x1b8>
  405afe:	4601      	mov	r1, r0
  405b00:	f000 fde2 	bl	4066c8 <__addsf3>
  405b04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b08:	f000 fddc 	bl	4066c4 <__aeabi_fsub>
  405b0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405b10:	4605      	mov	r5, r0
  405b12:	4620      	mov	r0, r4
  405b14:	f000 fdd8 	bl	4066c8 <__addsf3>
  405b18:	4601      	mov	r1, r0
  405b1a:	4628      	mov	r0, r5
  405b1c:	f000 ff90 	bl	406a40 <__aeabi_fdiv>
  405b20:	2700      	movs	r7, #0
  405b22:	4604      	mov	r4, r0
  405b24:	e76e      	b.n	405a04 <atanf+0x34>
  405b26:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b2e:	4830      	ldr	r0, [pc, #192]	; (405bf0 <atanf+0x220>)
  405b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b34:	f000 fdc8 	bl	4066c8 <__addsf3>
  405b38:	4621      	mov	r1, r4
  405b3a:	f000 fecd 	bl	4068d8 <__aeabi_fmul>
  405b3e:	4601      	mov	r1, r0
  405b40:	4620      	mov	r0, r4
  405b42:	f000 fdbf 	bl	4066c4 <__aeabi_fsub>
  405b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b4a:	4b2a      	ldr	r3, [pc, #168]	; (405bf4 <atanf+0x224>)
  405b4c:	429d      	cmp	r5, r3
  405b4e:	dc14      	bgt.n	405b7a <atanf+0x1aa>
  405b50:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405b54:	f000 fdb6 	bl	4066c4 <__aeabi_fsub>
  405b58:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405b5c:	4605      	mov	r5, r0
  405b5e:	4620      	mov	r0, r4
  405b60:	f000 feba 	bl	4068d8 <__aeabi_fmul>
  405b64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b68:	f000 fdae 	bl	4066c8 <__addsf3>
  405b6c:	4601      	mov	r1, r0
  405b6e:	4628      	mov	r0, r5
  405b70:	f000 ff66 	bl	406a40 <__aeabi_fdiv>
  405b74:	2702      	movs	r7, #2
  405b76:	4604      	mov	r4, r0
  405b78:	e744      	b.n	405a04 <atanf+0x34>
  405b7a:	4601      	mov	r1, r0
  405b7c:	481e      	ldr	r0, [pc, #120]	; (405bf8 <atanf+0x228>)
  405b7e:	f000 ff5f 	bl	406a40 <__aeabi_fdiv>
  405b82:	2703      	movs	r7, #3
  405b84:	4604      	mov	r4, r0
  405b86:	e73d      	b.n	405a04 <atanf+0x34>
  405b88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b8c:	f000 fd9a 	bl	4066c4 <__aeabi_fsub>
  405b90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405b94:	4605      	mov	r5, r0
  405b96:	4620      	mov	r0, r4
  405b98:	f000 fd96 	bl	4066c8 <__addsf3>
  405b9c:	4601      	mov	r1, r0
  405b9e:	4628      	mov	r0, r5
  405ba0:	f000 ff4e 	bl	406a40 <__aeabi_fdiv>
  405ba4:	2701      	movs	r7, #1
  405ba6:	4604      	mov	r4, r0
  405ba8:	e72c      	b.n	405a04 <atanf+0x34>
  405baa:	bf00      	nop
  405bac:	3fc90fdb 	.word	0x3fc90fdb
  405bb0:	3edfffff 	.word	0x3edfffff
  405bb4:	3c8569d7 	.word	0x3c8569d7
  405bb8:	3d4bda59 	.word	0x3d4bda59
  405bbc:	3d886b35 	.word	0x3d886b35
  405bc0:	3dba2e6e 	.word	0x3dba2e6e
  405bc4:	3e124925 	.word	0x3e124925
  405bc8:	3eaaaaab 	.word	0x3eaaaaab
  405bcc:	bd15a221 	.word	0xbd15a221
  405bd0:	3d6ef16b 	.word	0x3d6ef16b
  405bd4:	3d9d8795 	.word	0x3d9d8795
  405bd8:	3de38e38 	.word	0x3de38e38
  405bdc:	3e4ccccd 	.word	0x3e4ccccd
  405be0:	0040c214 	.word	0x0040c214
  405be4:	0040c204 	.word	0x0040c204
  405be8:	7149f2ca 	.word	0x7149f2ca
  405bec:	3f97ffff 	.word	0x3f97ffff
  405bf0:	bfc90fdb 	.word	0xbfc90fdb
  405bf4:	401bffff 	.word	0x401bffff
  405bf8:	bf800000 	.word	0xbf800000

00405bfc <fabsf>:
  405bfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405c00:	4770      	bx	lr
  405c02:	bf00      	nop

00405c04 <floorf>:
  405c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c08:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405c0c:	0dfc      	lsrs	r4, r7, #23
  405c0e:	3c7f      	subs	r4, #127	; 0x7f
  405c10:	2c16      	cmp	r4, #22
  405c12:	4605      	mov	r5, r0
  405c14:	dc13      	bgt.n	405c3e <floorf+0x3a>
  405c16:	2c00      	cmp	r4, #0
  405c18:	4680      	mov	r8, r0
  405c1a:	db1b      	blt.n	405c54 <floorf+0x50>
  405c1c:	4f19      	ldr	r7, [pc, #100]	; (405c84 <floorf+0x80>)
  405c1e:	4127      	asrs	r7, r4
  405c20:	4238      	tst	r0, r7
  405c22:	d014      	beq.n	405c4e <floorf+0x4a>
  405c24:	4918      	ldr	r1, [pc, #96]	; (405c88 <floorf+0x84>)
  405c26:	f000 fd4f 	bl	4066c8 <__addsf3>
  405c2a:	2100      	movs	r1, #0
  405c2c:	f001 f810 	bl	406c50 <__aeabi_fcmpgt>
  405c30:	b168      	cbz	r0, 405c4e <floorf+0x4a>
  405c32:	2d00      	cmp	r5, #0
  405c34:	db1b      	blt.n	405c6e <floorf+0x6a>
  405c36:	ea28 0007 	bic.w	r0, r8, r7
  405c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c3e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  405c42:	d304      	bcc.n	405c4e <floorf+0x4a>
  405c44:	4601      	mov	r1, r0
  405c46:	f000 fd3f 	bl	4066c8 <__addsf3>
  405c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c4e:	4628      	mov	r0, r5
  405c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c54:	490c      	ldr	r1, [pc, #48]	; (405c88 <floorf+0x84>)
  405c56:	f000 fd37 	bl	4066c8 <__addsf3>
  405c5a:	2100      	movs	r1, #0
  405c5c:	f000 fff8 	bl	406c50 <__aeabi_fcmpgt>
  405c60:	2800      	cmp	r0, #0
  405c62:	d0f4      	beq.n	405c4e <floorf+0x4a>
  405c64:	2d00      	cmp	r5, #0
  405c66:	db08      	blt.n	405c7a <floorf+0x76>
  405c68:	2000      	movs	r0, #0
  405c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  405c72:	fa43 f404 	asr.w	r4, r3, r4
  405c76:	44a0      	add	r8, r4
  405c78:	e7dd      	b.n	405c36 <floorf+0x32>
  405c7a:	2f00      	cmp	r7, #0
  405c7c:	d0e7      	beq.n	405c4e <floorf+0x4a>
  405c7e:	4803      	ldr	r0, [pc, #12]	; (405c8c <floorf+0x88>)
  405c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c84:	007fffff 	.word	0x007fffff
  405c88:	7149f2ca 	.word	0x7149f2ca
  405c8c:	bf800000 	.word	0xbf800000

00405c90 <scalbnf>:
  405c90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405c94:	b538      	push	{r3, r4, r5, lr}
  405c96:	4603      	mov	r3, r0
  405c98:	d016      	beq.n	405cc8 <scalbnf+0x38>
  405c9a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  405c9e:	d20f      	bcs.n	405cc0 <scalbnf+0x30>
  405ca0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  405ca4:	460d      	mov	r5, r1
  405ca6:	d310      	bcc.n	405cca <scalbnf+0x3a>
  405ca8:	4604      	mov	r4, r0
  405caa:	0dd0      	lsrs	r0, r2, #23
  405cac:	4428      	add	r0, r5
  405cae:	28fe      	cmp	r0, #254	; 0xfe
  405cb0:	dc2e      	bgt.n	405d10 <scalbnf+0x80>
  405cb2:	2800      	cmp	r0, #0
  405cb4:	dd1d      	ble.n	405cf2 <scalbnf+0x62>
  405cb6:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405cba:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405cbe:	bd38      	pop	{r3, r4, r5, pc}
  405cc0:	4601      	mov	r1, r0
  405cc2:	f000 fd01 	bl	4066c8 <__addsf3>
  405cc6:	bd38      	pop	{r3, r4, r5, pc}
  405cc8:	bd38      	pop	{r3, r4, r5, pc}
  405cca:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  405cce:	f000 fe03 	bl	4068d8 <__aeabi_fmul>
  405cd2:	4a18      	ldr	r2, [pc, #96]	; (405d34 <scalbnf+0xa4>)
  405cd4:	4295      	cmp	r5, r2
  405cd6:	4603      	mov	r3, r0
  405cd8:	db07      	blt.n	405cea <scalbnf+0x5a>
  405cda:	4604      	mov	r4, r0
  405cdc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  405ce0:	3819      	subs	r0, #25
  405ce2:	e7e3      	b.n	405cac <scalbnf+0x1c>
  405ce4:	4814      	ldr	r0, [pc, #80]	; (405d38 <scalbnf+0xa8>)
  405ce6:	f000 f82b 	bl	405d40 <copysignf>
  405cea:	4913      	ldr	r1, [pc, #76]	; (405d38 <scalbnf+0xa8>)
  405cec:	f000 fdf4 	bl	4068d8 <__aeabi_fmul>
  405cf0:	bd38      	pop	{r3, r4, r5, pc}
  405cf2:	f110 0f16 	cmn.w	r0, #22
  405cf6:	da13      	bge.n	405d20 <scalbnf+0x90>
  405cf8:	f24c 3250 	movw	r2, #50000	; 0xc350
  405cfc:	4295      	cmp	r5, r2
  405cfe:	4619      	mov	r1, r3
  405d00:	ddf0      	ble.n	405ce4 <scalbnf+0x54>
  405d02:	480e      	ldr	r0, [pc, #56]	; (405d3c <scalbnf+0xac>)
  405d04:	f000 f81c 	bl	405d40 <copysignf>
  405d08:	490c      	ldr	r1, [pc, #48]	; (405d3c <scalbnf+0xac>)
  405d0a:	f000 fde5 	bl	4068d8 <__aeabi_fmul>
  405d0e:	bd38      	pop	{r3, r4, r5, pc}
  405d10:	4619      	mov	r1, r3
  405d12:	480a      	ldr	r0, [pc, #40]	; (405d3c <scalbnf+0xac>)
  405d14:	f000 f814 	bl	405d40 <copysignf>
  405d18:	4908      	ldr	r1, [pc, #32]	; (405d3c <scalbnf+0xac>)
  405d1a:	f000 fddd 	bl	4068d8 <__aeabi_fmul>
  405d1e:	bd38      	pop	{r3, r4, r5, pc}
  405d20:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405d24:	3019      	adds	r0, #25
  405d26:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405d2a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  405d2e:	f000 fdd3 	bl	4068d8 <__aeabi_fmul>
  405d32:	bd38      	pop	{r3, r4, r5, pc}
  405d34:	ffff3cb0 	.word	0xffff3cb0
  405d38:	0da24260 	.word	0x0da24260
  405d3c:	7149f2ca 	.word	0x7149f2ca

00405d40 <copysignf>:
  405d40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405d48:	4308      	orrs	r0, r1
  405d4a:	4770      	bx	lr

00405d4c <__aeabi_drsub>:
  405d4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405d50:	e002      	b.n	405d58 <__adddf3>
  405d52:	bf00      	nop

00405d54 <__aeabi_dsub>:
  405d54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405d58 <__adddf3>:
  405d58:	b530      	push	{r4, r5, lr}
  405d5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405d5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405d62:	ea94 0f05 	teq	r4, r5
  405d66:	bf08      	it	eq
  405d68:	ea90 0f02 	teqeq	r0, r2
  405d6c:	bf1f      	itttt	ne
  405d6e:	ea54 0c00 	orrsne.w	ip, r4, r0
  405d72:	ea55 0c02 	orrsne.w	ip, r5, r2
  405d76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405d7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405d7e:	f000 80e2 	beq.w	405f46 <__adddf3+0x1ee>
  405d82:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405d86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405d8a:	bfb8      	it	lt
  405d8c:	426d      	neglt	r5, r5
  405d8e:	dd0c      	ble.n	405daa <__adddf3+0x52>
  405d90:	442c      	add	r4, r5
  405d92:	ea80 0202 	eor.w	r2, r0, r2
  405d96:	ea81 0303 	eor.w	r3, r1, r3
  405d9a:	ea82 0000 	eor.w	r0, r2, r0
  405d9e:	ea83 0101 	eor.w	r1, r3, r1
  405da2:	ea80 0202 	eor.w	r2, r0, r2
  405da6:	ea81 0303 	eor.w	r3, r1, r3
  405daa:	2d36      	cmp	r5, #54	; 0x36
  405dac:	bf88      	it	hi
  405dae:	bd30      	pophi	{r4, r5, pc}
  405db0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405db4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405db8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405dbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405dc0:	d002      	beq.n	405dc8 <__adddf3+0x70>
  405dc2:	4240      	negs	r0, r0
  405dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405dc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405dcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405dd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405dd4:	d002      	beq.n	405ddc <__adddf3+0x84>
  405dd6:	4252      	negs	r2, r2
  405dd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405ddc:	ea94 0f05 	teq	r4, r5
  405de0:	f000 80a7 	beq.w	405f32 <__adddf3+0x1da>
  405de4:	f1a4 0401 	sub.w	r4, r4, #1
  405de8:	f1d5 0e20 	rsbs	lr, r5, #32
  405dec:	db0d      	blt.n	405e0a <__adddf3+0xb2>
  405dee:	fa02 fc0e 	lsl.w	ip, r2, lr
  405df2:	fa22 f205 	lsr.w	r2, r2, r5
  405df6:	1880      	adds	r0, r0, r2
  405df8:	f141 0100 	adc.w	r1, r1, #0
  405dfc:	fa03 f20e 	lsl.w	r2, r3, lr
  405e00:	1880      	adds	r0, r0, r2
  405e02:	fa43 f305 	asr.w	r3, r3, r5
  405e06:	4159      	adcs	r1, r3
  405e08:	e00e      	b.n	405e28 <__adddf3+0xd0>
  405e0a:	f1a5 0520 	sub.w	r5, r5, #32
  405e0e:	f10e 0e20 	add.w	lr, lr, #32
  405e12:	2a01      	cmp	r2, #1
  405e14:	fa03 fc0e 	lsl.w	ip, r3, lr
  405e18:	bf28      	it	cs
  405e1a:	f04c 0c02 	orrcs.w	ip, ip, #2
  405e1e:	fa43 f305 	asr.w	r3, r3, r5
  405e22:	18c0      	adds	r0, r0, r3
  405e24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405e2c:	d507      	bpl.n	405e3e <__adddf3+0xe6>
  405e2e:	f04f 0e00 	mov.w	lr, #0
  405e32:	f1dc 0c00 	rsbs	ip, ip, #0
  405e36:	eb7e 0000 	sbcs.w	r0, lr, r0
  405e3a:	eb6e 0101 	sbc.w	r1, lr, r1
  405e3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405e42:	d31b      	bcc.n	405e7c <__adddf3+0x124>
  405e44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405e48:	d30c      	bcc.n	405e64 <__adddf3+0x10c>
  405e4a:	0849      	lsrs	r1, r1, #1
  405e4c:	ea5f 0030 	movs.w	r0, r0, rrx
  405e50:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405e54:	f104 0401 	add.w	r4, r4, #1
  405e58:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405e5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405e60:	f080 809a 	bcs.w	405f98 <__adddf3+0x240>
  405e64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405e68:	bf08      	it	eq
  405e6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405e6e:	f150 0000 	adcs.w	r0, r0, #0
  405e72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405e76:	ea41 0105 	orr.w	r1, r1, r5
  405e7a:	bd30      	pop	{r4, r5, pc}
  405e7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405e80:	4140      	adcs	r0, r0
  405e82:	eb41 0101 	adc.w	r1, r1, r1
  405e86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405e8a:	f1a4 0401 	sub.w	r4, r4, #1
  405e8e:	d1e9      	bne.n	405e64 <__adddf3+0x10c>
  405e90:	f091 0f00 	teq	r1, #0
  405e94:	bf04      	itt	eq
  405e96:	4601      	moveq	r1, r0
  405e98:	2000      	moveq	r0, #0
  405e9a:	fab1 f381 	clz	r3, r1
  405e9e:	bf08      	it	eq
  405ea0:	3320      	addeq	r3, #32
  405ea2:	f1a3 030b 	sub.w	r3, r3, #11
  405ea6:	f1b3 0220 	subs.w	r2, r3, #32
  405eaa:	da0c      	bge.n	405ec6 <__adddf3+0x16e>
  405eac:	320c      	adds	r2, #12
  405eae:	dd08      	ble.n	405ec2 <__adddf3+0x16a>
  405eb0:	f102 0c14 	add.w	ip, r2, #20
  405eb4:	f1c2 020c 	rsb	r2, r2, #12
  405eb8:	fa01 f00c 	lsl.w	r0, r1, ip
  405ebc:	fa21 f102 	lsr.w	r1, r1, r2
  405ec0:	e00c      	b.n	405edc <__adddf3+0x184>
  405ec2:	f102 0214 	add.w	r2, r2, #20
  405ec6:	bfd8      	it	le
  405ec8:	f1c2 0c20 	rsble	ip, r2, #32
  405ecc:	fa01 f102 	lsl.w	r1, r1, r2
  405ed0:	fa20 fc0c 	lsr.w	ip, r0, ip
  405ed4:	bfdc      	itt	le
  405ed6:	ea41 010c 	orrle.w	r1, r1, ip
  405eda:	4090      	lslle	r0, r2
  405edc:	1ae4      	subs	r4, r4, r3
  405ede:	bfa2      	ittt	ge
  405ee0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405ee4:	4329      	orrge	r1, r5
  405ee6:	bd30      	popge	{r4, r5, pc}
  405ee8:	ea6f 0404 	mvn.w	r4, r4
  405eec:	3c1f      	subs	r4, #31
  405eee:	da1c      	bge.n	405f2a <__adddf3+0x1d2>
  405ef0:	340c      	adds	r4, #12
  405ef2:	dc0e      	bgt.n	405f12 <__adddf3+0x1ba>
  405ef4:	f104 0414 	add.w	r4, r4, #20
  405ef8:	f1c4 0220 	rsb	r2, r4, #32
  405efc:	fa20 f004 	lsr.w	r0, r0, r4
  405f00:	fa01 f302 	lsl.w	r3, r1, r2
  405f04:	ea40 0003 	orr.w	r0, r0, r3
  405f08:	fa21 f304 	lsr.w	r3, r1, r4
  405f0c:	ea45 0103 	orr.w	r1, r5, r3
  405f10:	bd30      	pop	{r4, r5, pc}
  405f12:	f1c4 040c 	rsb	r4, r4, #12
  405f16:	f1c4 0220 	rsb	r2, r4, #32
  405f1a:	fa20 f002 	lsr.w	r0, r0, r2
  405f1e:	fa01 f304 	lsl.w	r3, r1, r4
  405f22:	ea40 0003 	orr.w	r0, r0, r3
  405f26:	4629      	mov	r1, r5
  405f28:	bd30      	pop	{r4, r5, pc}
  405f2a:	fa21 f004 	lsr.w	r0, r1, r4
  405f2e:	4629      	mov	r1, r5
  405f30:	bd30      	pop	{r4, r5, pc}
  405f32:	f094 0f00 	teq	r4, #0
  405f36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405f3a:	bf06      	itte	eq
  405f3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405f40:	3401      	addeq	r4, #1
  405f42:	3d01      	subne	r5, #1
  405f44:	e74e      	b.n	405de4 <__adddf3+0x8c>
  405f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405f4a:	bf18      	it	ne
  405f4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405f50:	d029      	beq.n	405fa6 <__adddf3+0x24e>
  405f52:	ea94 0f05 	teq	r4, r5
  405f56:	bf08      	it	eq
  405f58:	ea90 0f02 	teqeq	r0, r2
  405f5c:	d005      	beq.n	405f6a <__adddf3+0x212>
  405f5e:	ea54 0c00 	orrs.w	ip, r4, r0
  405f62:	bf04      	itt	eq
  405f64:	4619      	moveq	r1, r3
  405f66:	4610      	moveq	r0, r2
  405f68:	bd30      	pop	{r4, r5, pc}
  405f6a:	ea91 0f03 	teq	r1, r3
  405f6e:	bf1e      	ittt	ne
  405f70:	2100      	movne	r1, #0
  405f72:	2000      	movne	r0, #0
  405f74:	bd30      	popne	{r4, r5, pc}
  405f76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405f7a:	d105      	bne.n	405f88 <__adddf3+0x230>
  405f7c:	0040      	lsls	r0, r0, #1
  405f7e:	4149      	adcs	r1, r1
  405f80:	bf28      	it	cs
  405f82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405f86:	bd30      	pop	{r4, r5, pc}
  405f88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405f8c:	bf3c      	itt	cc
  405f8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405f92:	bd30      	popcc	{r4, r5, pc}
  405f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405f98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405f9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405fa0:	f04f 0000 	mov.w	r0, #0
  405fa4:	bd30      	pop	{r4, r5, pc}
  405fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405faa:	bf1a      	itte	ne
  405fac:	4619      	movne	r1, r3
  405fae:	4610      	movne	r0, r2
  405fb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405fb4:	bf1c      	itt	ne
  405fb6:	460b      	movne	r3, r1
  405fb8:	4602      	movne	r2, r0
  405fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405fbe:	bf06      	itte	eq
  405fc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405fc4:	ea91 0f03 	teqeq	r1, r3
  405fc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405fcc:	bd30      	pop	{r4, r5, pc}
  405fce:	bf00      	nop

00405fd0 <__aeabi_ui2d>:
  405fd0:	f090 0f00 	teq	r0, #0
  405fd4:	bf04      	itt	eq
  405fd6:	2100      	moveq	r1, #0
  405fd8:	4770      	bxeq	lr
  405fda:	b530      	push	{r4, r5, lr}
  405fdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405fe0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405fe4:	f04f 0500 	mov.w	r5, #0
  405fe8:	f04f 0100 	mov.w	r1, #0
  405fec:	e750      	b.n	405e90 <__adddf3+0x138>
  405fee:	bf00      	nop

00405ff0 <__aeabi_i2d>:
  405ff0:	f090 0f00 	teq	r0, #0
  405ff4:	bf04      	itt	eq
  405ff6:	2100      	moveq	r1, #0
  405ff8:	4770      	bxeq	lr
  405ffa:	b530      	push	{r4, r5, lr}
  405ffc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406000:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406004:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406008:	bf48      	it	mi
  40600a:	4240      	negmi	r0, r0
  40600c:	f04f 0100 	mov.w	r1, #0
  406010:	e73e      	b.n	405e90 <__adddf3+0x138>
  406012:	bf00      	nop

00406014 <__aeabi_f2d>:
  406014:	0042      	lsls	r2, r0, #1
  406016:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40601a:	ea4f 0131 	mov.w	r1, r1, rrx
  40601e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406022:	bf1f      	itttt	ne
  406024:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406028:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40602c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406030:	4770      	bxne	lr
  406032:	f092 0f00 	teq	r2, #0
  406036:	bf14      	ite	ne
  406038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40603c:	4770      	bxeq	lr
  40603e:	b530      	push	{r4, r5, lr}
  406040:	f44f 7460 	mov.w	r4, #896	; 0x380
  406044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40604c:	e720      	b.n	405e90 <__adddf3+0x138>
  40604e:	bf00      	nop

00406050 <__aeabi_ul2d>:
  406050:	ea50 0201 	orrs.w	r2, r0, r1
  406054:	bf08      	it	eq
  406056:	4770      	bxeq	lr
  406058:	b530      	push	{r4, r5, lr}
  40605a:	f04f 0500 	mov.w	r5, #0
  40605e:	e00a      	b.n	406076 <__aeabi_l2d+0x16>

00406060 <__aeabi_l2d>:
  406060:	ea50 0201 	orrs.w	r2, r0, r1
  406064:	bf08      	it	eq
  406066:	4770      	bxeq	lr
  406068:	b530      	push	{r4, r5, lr}
  40606a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40606e:	d502      	bpl.n	406076 <__aeabi_l2d+0x16>
  406070:	4240      	negs	r0, r0
  406072:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406076:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40607a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40607e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406082:	f43f aedc 	beq.w	405e3e <__adddf3+0xe6>
  406086:	f04f 0203 	mov.w	r2, #3
  40608a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40608e:	bf18      	it	ne
  406090:	3203      	addne	r2, #3
  406092:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406096:	bf18      	it	ne
  406098:	3203      	addne	r2, #3
  40609a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40609e:	f1c2 0320 	rsb	r3, r2, #32
  4060a2:	fa00 fc03 	lsl.w	ip, r0, r3
  4060a6:	fa20 f002 	lsr.w	r0, r0, r2
  4060aa:	fa01 fe03 	lsl.w	lr, r1, r3
  4060ae:	ea40 000e 	orr.w	r0, r0, lr
  4060b2:	fa21 f102 	lsr.w	r1, r1, r2
  4060b6:	4414      	add	r4, r2
  4060b8:	e6c1      	b.n	405e3e <__adddf3+0xe6>
  4060ba:	bf00      	nop

004060bc <__aeabi_dmul>:
  4060bc:	b570      	push	{r4, r5, r6, lr}
  4060be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4060c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4060c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4060ca:	bf1d      	ittte	ne
  4060cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4060d0:	ea94 0f0c 	teqne	r4, ip
  4060d4:	ea95 0f0c 	teqne	r5, ip
  4060d8:	f000 f8de 	bleq	406298 <__aeabi_dmul+0x1dc>
  4060dc:	442c      	add	r4, r5
  4060de:	ea81 0603 	eor.w	r6, r1, r3
  4060e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4060e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4060ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4060ee:	bf18      	it	ne
  4060f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4060f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4060f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4060fc:	d038      	beq.n	406170 <__aeabi_dmul+0xb4>
  4060fe:	fba0 ce02 	umull	ip, lr, r0, r2
  406102:	f04f 0500 	mov.w	r5, #0
  406106:	fbe1 e502 	umlal	lr, r5, r1, r2
  40610a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40610e:	fbe0 e503 	umlal	lr, r5, r0, r3
  406112:	f04f 0600 	mov.w	r6, #0
  406116:	fbe1 5603 	umlal	r5, r6, r1, r3
  40611a:	f09c 0f00 	teq	ip, #0
  40611e:	bf18      	it	ne
  406120:	f04e 0e01 	orrne.w	lr, lr, #1
  406124:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406128:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40612c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406130:	d204      	bcs.n	40613c <__aeabi_dmul+0x80>
  406132:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406136:	416d      	adcs	r5, r5
  406138:	eb46 0606 	adc.w	r6, r6, r6
  40613c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406140:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406144:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406148:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40614c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406150:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406154:	bf88      	it	hi
  406156:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40615a:	d81e      	bhi.n	40619a <__aeabi_dmul+0xde>
  40615c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406160:	bf08      	it	eq
  406162:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406166:	f150 0000 	adcs.w	r0, r0, #0
  40616a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40616e:	bd70      	pop	{r4, r5, r6, pc}
  406170:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406174:	ea46 0101 	orr.w	r1, r6, r1
  406178:	ea40 0002 	orr.w	r0, r0, r2
  40617c:	ea81 0103 	eor.w	r1, r1, r3
  406180:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406184:	bfc2      	ittt	gt
  406186:	ebd4 050c 	rsbsgt	r5, r4, ip
  40618a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40618e:	bd70      	popgt	{r4, r5, r6, pc}
  406190:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406194:	f04f 0e00 	mov.w	lr, #0
  406198:	3c01      	subs	r4, #1
  40619a:	f300 80ab 	bgt.w	4062f4 <__aeabi_dmul+0x238>
  40619e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4061a2:	bfde      	ittt	le
  4061a4:	2000      	movle	r0, #0
  4061a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4061aa:	bd70      	pople	{r4, r5, r6, pc}
  4061ac:	f1c4 0400 	rsb	r4, r4, #0
  4061b0:	3c20      	subs	r4, #32
  4061b2:	da35      	bge.n	406220 <__aeabi_dmul+0x164>
  4061b4:	340c      	adds	r4, #12
  4061b6:	dc1b      	bgt.n	4061f0 <__aeabi_dmul+0x134>
  4061b8:	f104 0414 	add.w	r4, r4, #20
  4061bc:	f1c4 0520 	rsb	r5, r4, #32
  4061c0:	fa00 f305 	lsl.w	r3, r0, r5
  4061c4:	fa20 f004 	lsr.w	r0, r0, r4
  4061c8:	fa01 f205 	lsl.w	r2, r1, r5
  4061cc:	ea40 0002 	orr.w	r0, r0, r2
  4061d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4061d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4061d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4061dc:	fa21 f604 	lsr.w	r6, r1, r4
  4061e0:	eb42 0106 	adc.w	r1, r2, r6
  4061e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4061e8:	bf08      	it	eq
  4061ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4061ee:	bd70      	pop	{r4, r5, r6, pc}
  4061f0:	f1c4 040c 	rsb	r4, r4, #12
  4061f4:	f1c4 0520 	rsb	r5, r4, #32
  4061f8:	fa00 f304 	lsl.w	r3, r0, r4
  4061fc:	fa20 f005 	lsr.w	r0, r0, r5
  406200:	fa01 f204 	lsl.w	r2, r1, r4
  406204:	ea40 0002 	orr.w	r0, r0, r2
  406208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40620c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406210:	f141 0100 	adc.w	r1, r1, #0
  406214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406218:	bf08      	it	eq
  40621a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40621e:	bd70      	pop	{r4, r5, r6, pc}
  406220:	f1c4 0520 	rsb	r5, r4, #32
  406224:	fa00 f205 	lsl.w	r2, r0, r5
  406228:	ea4e 0e02 	orr.w	lr, lr, r2
  40622c:	fa20 f304 	lsr.w	r3, r0, r4
  406230:	fa01 f205 	lsl.w	r2, r1, r5
  406234:	ea43 0302 	orr.w	r3, r3, r2
  406238:	fa21 f004 	lsr.w	r0, r1, r4
  40623c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406240:	fa21 f204 	lsr.w	r2, r1, r4
  406244:	ea20 0002 	bic.w	r0, r0, r2
  406248:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40624c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406250:	bf08      	it	eq
  406252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406256:	bd70      	pop	{r4, r5, r6, pc}
  406258:	f094 0f00 	teq	r4, #0
  40625c:	d10f      	bne.n	40627e <__aeabi_dmul+0x1c2>
  40625e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406262:	0040      	lsls	r0, r0, #1
  406264:	eb41 0101 	adc.w	r1, r1, r1
  406268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40626c:	bf08      	it	eq
  40626e:	3c01      	subeq	r4, #1
  406270:	d0f7      	beq.n	406262 <__aeabi_dmul+0x1a6>
  406272:	ea41 0106 	orr.w	r1, r1, r6
  406276:	f095 0f00 	teq	r5, #0
  40627a:	bf18      	it	ne
  40627c:	4770      	bxne	lr
  40627e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406282:	0052      	lsls	r2, r2, #1
  406284:	eb43 0303 	adc.w	r3, r3, r3
  406288:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40628c:	bf08      	it	eq
  40628e:	3d01      	subeq	r5, #1
  406290:	d0f7      	beq.n	406282 <__aeabi_dmul+0x1c6>
  406292:	ea43 0306 	orr.w	r3, r3, r6
  406296:	4770      	bx	lr
  406298:	ea94 0f0c 	teq	r4, ip
  40629c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4062a0:	bf18      	it	ne
  4062a2:	ea95 0f0c 	teqne	r5, ip
  4062a6:	d00c      	beq.n	4062c2 <__aeabi_dmul+0x206>
  4062a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4062ac:	bf18      	it	ne
  4062ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4062b2:	d1d1      	bne.n	406258 <__aeabi_dmul+0x19c>
  4062b4:	ea81 0103 	eor.w	r1, r1, r3
  4062b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062bc:	f04f 0000 	mov.w	r0, #0
  4062c0:	bd70      	pop	{r4, r5, r6, pc}
  4062c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4062c6:	bf06      	itte	eq
  4062c8:	4610      	moveq	r0, r2
  4062ca:	4619      	moveq	r1, r3
  4062cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4062d0:	d019      	beq.n	406306 <__aeabi_dmul+0x24a>
  4062d2:	ea94 0f0c 	teq	r4, ip
  4062d6:	d102      	bne.n	4062de <__aeabi_dmul+0x222>
  4062d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4062dc:	d113      	bne.n	406306 <__aeabi_dmul+0x24a>
  4062de:	ea95 0f0c 	teq	r5, ip
  4062e2:	d105      	bne.n	4062f0 <__aeabi_dmul+0x234>
  4062e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4062e8:	bf1c      	itt	ne
  4062ea:	4610      	movne	r0, r2
  4062ec:	4619      	movne	r1, r3
  4062ee:	d10a      	bne.n	406306 <__aeabi_dmul+0x24a>
  4062f0:	ea81 0103 	eor.w	r1, r1, r3
  4062f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4062fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406300:	f04f 0000 	mov.w	r0, #0
  406304:	bd70      	pop	{r4, r5, r6, pc}
  406306:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40630a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40630e:	bd70      	pop	{r4, r5, r6, pc}

00406310 <__aeabi_ddiv>:
  406310:	b570      	push	{r4, r5, r6, lr}
  406312:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406316:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40631a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40631e:	bf1d      	ittte	ne
  406320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406324:	ea94 0f0c 	teqne	r4, ip
  406328:	ea95 0f0c 	teqne	r5, ip
  40632c:	f000 f8a7 	bleq	40647e <__aeabi_ddiv+0x16e>
  406330:	eba4 0405 	sub.w	r4, r4, r5
  406334:	ea81 0e03 	eor.w	lr, r1, r3
  406338:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40633c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406340:	f000 8088 	beq.w	406454 <__aeabi_ddiv+0x144>
  406344:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406348:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40634c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406350:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406354:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406358:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40635c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406360:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406364:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406368:	429d      	cmp	r5, r3
  40636a:	bf08      	it	eq
  40636c:	4296      	cmpeq	r6, r2
  40636e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406372:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406376:	d202      	bcs.n	40637e <__aeabi_ddiv+0x6e>
  406378:	085b      	lsrs	r3, r3, #1
  40637a:	ea4f 0232 	mov.w	r2, r2, rrx
  40637e:	1ab6      	subs	r6, r6, r2
  406380:	eb65 0503 	sbc.w	r5, r5, r3
  406384:	085b      	lsrs	r3, r3, #1
  406386:	ea4f 0232 	mov.w	r2, r2, rrx
  40638a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40638e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  406392:	ebb6 0e02 	subs.w	lr, r6, r2
  406396:	eb75 0e03 	sbcs.w	lr, r5, r3
  40639a:	bf22      	ittt	cs
  40639c:	1ab6      	subcs	r6, r6, r2
  40639e:	4675      	movcs	r5, lr
  4063a0:	ea40 000c 	orrcs.w	r0, r0, ip
  4063a4:	085b      	lsrs	r3, r3, #1
  4063a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4063aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4063ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063b2:	bf22      	ittt	cs
  4063b4:	1ab6      	subcs	r6, r6, r2
  4063b6:	4675      	movcs	r5, lr
  4063b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4063bc:	085b      	lsrs	r3, r3, #1
  4063be:	ea4f 0232 	mov.w	r2, r2, rrx
  4063c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4063c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063ca:	bf22      	ittt	cs
  4063cc:	1ab6      	subcs	r6, r6, r2
  4063ce:	4675      	movcs	r5, lr
  4063d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4063d4:	085b      	lsrs	r3, r3, #1
  4063d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4063da:	ebb6 0e02 	subs.w	lr, r6, r2
  4063de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063e2:	bf22      	ittt	cs
  4063e4:	1ab6      	subcs	r6, r6, r2
  4063e6:	4675      	movcs	r5, lr
  4063e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4063ec:	ea55 0e06 	orrs.w	lr, r5, r6
  4063f0:	d018      	beq.n	406424 <__aeabi_ddiv+0x114>
  4063f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4063f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4063fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4063fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406402:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406406:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40640a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40640e:	d1c0      	bne.n	406392 <__aeabi_ddiv+0x82>
  406410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406414:	d10b      	bne.n	40642e <__aeabi_ddiv+0x11e>
  406416:	ea41 0100 	orr.w	r1, r1, r0
  40641a:	f04f 0000 	mov.w	r0, #0
  40641e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406422:	e7b6      	b.n	406392 <__aeabi_ddiv+0x82>
  406424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406428:	bf04      	itt	eq
  40642a:	4301      	orreq	r1, r0
  40642c:	2000      	moveq	r0, #0
  40642e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406432:	bf88      	it	hi
  406434:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406438:	f63f aeaf 	bhi.w	40619a <__aeabi_dmul+0xde>
  40643c:	ebb5 0c03 	subs.w	ip, r5, r3
  406440:	bf04      	itt	eq
  406442:	ebb6 0c02 	subseq.w	ip, r6, r2
  406446:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40644a:	f150 0000 	adcs.w	r0, r0, #0
  40644e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406452:	bd70      	pop	{r4, r5, r6, pc}
  406454:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406458:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40645c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406460:	bfc2      	ittt	gt
  406462:	ebd4 050c 	rsbsgt	r5, r4, ip
  406466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40646a:	bd70      	popgt	{r4, r5, r6, pc}
  40646c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406470:	f04f 0e00 	mov.w	lr, #0
  406474:	3c01      	subs	r4, #1
  406476:	e690      	b.n	40619a <__aeabi_dmul+0xde>
  406478:	ea45 0e06 	orr.w	lr, r5, r6
  40647c:	e68d      	b.n	40619a <__aeabi_dmul+0xde>
  40647e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406482:	ea94 0f0c 	teq	r4, ip
  406486:	bf08      	it	eq
  406488:	ea95 0f0c 	teqeq	r5, ip
  40648c:	f43f af3b 	beq.w	406306 <__aeabi_dmul+0x24a>
  406490:	ea94 0f0c 	teq	r4, ip
  406494:	d10a      	bne.n	4064ac <__aeabi_ddiv+0x19c>
  406496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40649a:	f47f af34 	bne.w	406306 <__aeabi_dmul+0x24a>
  40649e:	ea95 0f0c 	teq	r5, ip
  4064a2:	f47f af25 	bne.w	4062f0 <__aeabi_dmul+0x234>
  4064a6:	4610      	mov	r0, r2
  4064a8:	4619      	mov	r1, r3
  4064aa:	e72c      	b.n	406306 <__aeabi_dmul+0x24a>
  4064ac:	ea95 0f0c 	teq	r5, ip
  4064b0:	d106      	bne.n	4064c0 <__aeabi_ddiv+0x1b0>
  4064b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4064b6:	f43f aefd 	beq.w	4062b4 <__aeabi_dmul+0x1f8>
  4064ba:	4610      	mov	r0, r2
  4064bc:	4619      	mov	r1, r3
  4064be:	e722      	b.n	406306 <__aeabi_dmul+0x24a>
  4064c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064c4:	bf18      	it	ne
  4064c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4064ca:	f47f aec5 	bne.w	406258 <__aeabi_dmul+0x19c>
  4064ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4064d2:	f47f af0d 	bne.w	4062f0 <__aeabi_dmul+0x234>
  4064d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4064da:	f47f aeeb 	bne.w	4062b4 <__aeabi_dmul+0x1f8>
  4064de:	e712      	b.n	406306 <__aeabi_dmul+0x24a>

004064e0 <__gedf2>:
  4064e0:	f04f 3cff 	mov.w	ip, #4294967295
  4064e4:	e006      	b.n	4064f4 <__cmpdf2+0x4>
  4064e6:	bf00      	nop

004064e8 <__ledf2>:
  4064e8:	f04f 0c01 	mov.w	ip, #1
  4064ec:	e002      	b.n	4064f4 <__cmpdf2+0x4>
  4064ee:	bf00      	nop

004064f0 <__cmpdf2>:
  4064f0:	f04f 0c01 	mov.w	ip, #1
  4064f4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4064f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4064fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406500:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406504:	bf18      	it	ne
  406506:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40650a:	d01b      	beq.n	406544 <__cmpdf2+0x54>
  40650c:	b001      	add	sp, #4
  40650e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406512:	bf0c      	ite	eq
  406514:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406518:	ea91 0f03 	teqne	r1, r3
  40651c:	bf02      	ittt	eq
  40651e:	ea90 0f02 	teqeq	r0, r2
  406522:	2000      	moveq	r0, #0
  406524:	4770      	bxeq	lr
  406526:	f110 0f00 	cmn.w	r0, #0
  40652a:	ea91 0f03 	teq	r1, r3
  40652e:	bf58      	it	pl
  406530:	4299      	cmppl	r1, r3
  406532:	bf08      	it	eq
  406534:	4290      	cmpeq	r0, r2
  406536:	bf2c      	ite	cs
  406538:	17d8      	asrcs	r0, r3, #31
  40653a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40653e:	f040 0001 	orr.w	r0, r0, #1
  406542:	4770      	bx	lr
  406544:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40654c:	d102      	bne.n	406554 <__cmpdf2+0x64>
  40654e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406552:	d107      	bne.n	406564 <__cmpdf2+0x74>
  406554:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40655c:	d1d6      	bne.n	40650c <__cmpdf2+0x1c>
  40655e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406562:	d0d3      	beq.n	40650c <__cmpdf2+0x1c>
  406564:	f85d 0b04 	ldr.w	r0, [sp], #4
  406568:	4770      	bx	lr
  40656a:	bf00      	nop

0040656c <__aeabi_cdrcmple>:
  40656c:	4684      	mov	ip, r0
  40656e:	4610      	mov	r0, r2
  406570:	4662      	mov	r2, ip
  406572:	468c      	mov	ip, r1
  406574:	4619      	mov	r1, r3
  406576:	4663      	mov	r3, ip
  406578:	e000      	b.n	40657c <__aeabi_cdcmpeq>
  40657a:	bf00      	nop

0040657c <__aeabi_cdcmpeq>:
  40657c:	b501      	push	{r0, lr}
  40657e:	f7ff ffb7 	bl	4064f0 <__cmpdf2>
  406582:	2800      	cmp	r0, #0
  406584:	bf48      	it	mi
  406586:	f110 0f00 	cmnmi.w	r0, #0
  40658a:	bd01      	pop	{r0, pc}

0040658c <__aeabi_dcmpeq>:
  40658c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406590:	f7ff fff4 	bl	40657c <__aeabi_cdcmpeq>
  406594:	bf0c      	ite	eq
  406596:	2001      	moveq	r0, #1
  406598:	2000      	movne	r0, #0
  40659a:	f85d fb08 	ldr.w	pc, [sp], #8
  40659e:	bf00      	nop

004065a0 <__aeabi_dcmplt>:
  4065a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065a4:	f7ff ffea 	bl	40657c <__aeabi_cdcmpeq>
  4065a8:	bf34      	ite	cc
  4065aa:	2001      	movcc	r0, #1
  4065ac:	2000      	movcs	r0, #0
  4065ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4065b2:	bf00      	nop

004065b4 <__aeabi_dcmple>:
  4065b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065b8:	f7ff ffe0 	bl	40657c <__aeabi_cdcmpeq>
  4065bc:	bf94      	ite	ls
  4065be:	2001      	movls	r0, #1
  4065c0:	2000      	movhi	r0, #0
  4065c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4065c6:	bf00      	nop

004065c8 <__aeabi_dcmpge>:
  4065c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065cc:	f7ff ffce 	bl	40656c <__aeabi_cdrcmple>
  4065d0:	bf94      	ite	ls
  4065d2:	2001      	movls	r0, #1
  4065d4:	2000      	movhi	r0, #0
  4065d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4065da:	bf00      	nop

004065dc <__aeabi_dcmpgt>:
  4065dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065e0:	f7ff ffc4 	bl	40656c <__aeabi_cdrcmple>
  4065e4:	bf34      	ite	cc
  4065e6:	2001      	movcc	r0, #1
  4065e8:	2000      	movcs	r0, #0
  4065ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4065ee:	bf00      	nop

004065f0 <__aeabi_dcmpun>:
  4065f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4065f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4065f8:	d102      	bne.n	406600 <__aeabi_dcmpun+0x10>
  4065fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4065fe:	d10a      	bne.n	406616 <__aeabi_dcmpun+0x26>
  406600:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406608:	d102      	bne.n	406610 <__aeabi_dcmpun+0x20>
  40660a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40660e:	d102      	bne.n	406616 <__aeabi_dcmpun+0x26>
  406610:	f04f 0000 	mov.w	r0, #0
  406614:	4770      	bx	lr
  406616:	f04f 0001 	mov.w	r0, #1
  40661a:	4770      	bx	lr

0040661c <__aeabi_d2f>:
  40661c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406620:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  406624:	bf24      	itt	cs
  406626:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40662a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40662e:	d90d      	bls.n	40664c <__aeabi_d2f+0x30>
  406630:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406634:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  406638:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40663c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  406640:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  406644:	bf08      	it	eq
  406646:	f020 0001 	biceq.w	r0, r0, #1
  40664a:	4770      	bx	lr
  40664c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406650:	d121      	bne.n	406696 <__aeabi_d2f+0x7a>
  406652:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  406656:	bfbc      	itt	lt
  406658:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40665c:	4770      	bxlt	lr
  40665e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406662:	ea4f 5252 	mov.w	r2, r2, lsr #21
  406666:	f1c2 0218 	rsb	r2, r2, #24
  40666a:	f1c2 0c20 	rsb	ip, r2, #32
  40666e:	fa10 f30c 	lsls.w	r3, r0, ip
  406672:	fa20 f002 	lsr.w	r0, r0, r2
  406676:	bf18      	it	ne
  406678:	f040 0001 	orrne.w	r0, r0, #1
  40667c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406680:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  406684:	fa03 fc0c 	lsl.w	ip, r3, ip
  406688:	ea40 000c 	orr.w	r0, r0, ip
  40668c:	fa23 f302 	lsr.w	r3, r3, r2
  406690:	ea4f 0343 	mov.w	r3, r3, lsl #1
  406694:	e7cc      	b.n	406630 <__aeabi_d2f+0x14>
  406696:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40669a:	d107      	bne.n	4066ac <__aeabi_d2f+0x90>
  40669c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4066a0:	bf1e      	ittt	ne
  4066a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4066a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4066aa:	4770      	bxne	lr
  4066ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4066b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4066b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4066b8:	4770      	bx	lr
  4066ba:	bf00      	nop

004066bc <__aeabi_frsub>:
  4066bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4066c0:	e002      	b.n	4066c8 <__addsf3>
  4066c2:	bf00      	nop

004066c4 <__aeabi_fsub>:
  4066c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004066c8 <__addsf3>:
  4066c8:	0042      	lsls	r2, r0, #1
  4066ca:	bf1f      	itttt	ne
  4066cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4066d0:	ea92 0f03 	teqne	r2, r3
  4066d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4066d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4066dc:	d06a      	beq.n	4067b4 <__addsf3+0xec>
  4066de:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4066e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4066e6:	bfc1      	itttt	gt
  4066e8:	18d2      	addgt	r2, r2, r3
  4066ea:	4041      	eorgt	r1, r0
  4066ec:	4048      	eorgt	r0, r1
  4066ee:	4041      	eorgt	r1, r0
  4066f0:	bfb8      	it	lt
  4066f2:	425b      	neglt	r3, r3
  4066f4:	2b19      	cmp	r3, #25
  4066f6:	bf88      	it	hi
  4066f8:	4770      	bxhi	lr
  4066fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4066fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  406706:	bf18      	it	ne
  406708:	4240      	negne	r0, r0
  40670a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40670e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  406712:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  406716:	bf18      	it	ne
  406718:	4249      	negne	r1, r1
  40671a:	ea92 0f03 	teq	r2, r3
  40671e:	d03f      	beq.n	4067a0 <__addsf3+0xd8>
  406720:	f1a2 0201 	sub.w	r2, r2, #1
  406724:	fa41 fc03 	asr.w	ip, r1, r3
  406728:	eb10 000c 	adds.w	r0, r0, ip
  40672c:	f1c3 0320 	rsb	r3, r3, #32
  406730:	fa01 f103 	lsl.w	r1, r1, r3
  406734:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406738:	d502      	bpl.n	406740 <__addsf3+0x78>
  40673a:	4249      	negs	r1, r1
  40673c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  406740:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  406744:	d313      	bcc.n	40676e <__addsf3+0xa6>
  406746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40674a:	d306      	bcc.n	40675a <__addsf3+0x92>
  40674c:	0840      	lsrs	r0, r0, #1
  40674e:	ea4f 0131 	mov.w	r1, r1, rrx
  406752:	f102 0201 	add.w	r2, r2, #1
  406756:	2afe      	cmp	r2, #254	; 0xfe
  406758:	d251      	bcs.n	4067fe <__addsf3+0x136>
  40675a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40675e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406762:	bf08      	it	eq
  406764:	f020 0001 	biceq.w	r0, r0, #1
  406768:	ea40 0003 	orr.w	r0, r0, r3
  40676c:	4770      	bx	lr
  40676e:	0049      	lsls	r1, r1, #1
  406770:	eb40 0000 	adc.w	r0, r0, r0
  406774:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  406778:	f1a2 0201 	sub.w	r2, r2, #1
  40677c:	d1ed      	bne.n	40675a <__addsf3+0x92>
  40677e:	fab0 fc80 	clz	ip, r0
  406782:	f1ac 0c08 	sub.w	ip, ip, #8
  406786:	ebb2 020c 	subs.w	r2, r2, ip
  40678a:	fa00 f00c 	lsl.w	r0, r0, ip
  40678e:	bfaa      	itet	ge
  406790:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406794:	4252      	neglt	r2, r2
  406796:	4318      	orrge	r0, r3
  406798:	bfbc      	itt	lt
  40679a:	40d0      	lsrlt	r0, r2
  40679c:	4318      	orrlt	r0, r3
  40679e:	4770      	bx	lr
  4067a0:	f092 0f00 	teq	r2, #0
  4067a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4067a8:	bf06      	itte	eq
  4067aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4067ae:	3201      	addeq	r2, #1
  4067b0:	3b01      	subne	r3, #1
  4067b2:	e7b5      	b.n	406720 <__addsf3+0x58>
  4067b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4067b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4067bc:	bf18      	it	ne
  4067be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4067c2:	d021      	beq.n	406808 <__addsf3+0x140>
  4067c4:	ea92 0f03 	teq	r2, r3
  4067c8:	d004      	beq.n	4067d4 <__addsf3+0x10c>
  4067ca:	f092 0f00 	teq	r2, #0
  4067ce:	bf08      	it	eq
  4067d0:	4608      	moveq	r0, r1
  4067d2:	4770      	bx	lr
  4067d4:	ea90 0f01 	teq	r0, r1
  4067d8:	bf1c      	itt	ne
  4067da:	2000      	movne	r0, #0
  4067dc:	4770      	bxne	lr
  4067de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4067e2:	d104      	bne.n	4067ee <__addsf3+0x126>
  4067e4:	0040      	lsls	r0, r0, #1
  4067e6:	bf28      	it	cs
  4067e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4067ec:	4770      	bx	lr
  4067ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4067f2:	bf3c      	itt	cc
  4067f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4067f8:	4770      	bxcc	lr
  4067fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4067fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  406802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406806:	4770      	bx	lr
  406808:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40680c:	bf16      	itet	ne
  40680e:	4608      	movne	r0, r1
  406810:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406814:	4601      	movne	r1, r0
  406816:	0242      	lsls	r2, r0, #9
  406818:	bf06      	itte	eq
  40681a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40681e:	ea90 0f01 	teqeq	r0, r1
  406822:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  406826:	4770      	bx	lr

00406828 <__aeabi_ui2f>:
  406828:	f04f 0300 	mov.w	r3, #0
  40682c:	e004      	b.n	406838 <__aeabi_i2f+0x8>
  40682e:	bf00      	nop

00406830 <__aeabi_i2f>:
  406830:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406834:	bf48      	it	mi
  406836:	4240      	negmi	r0, r0
  406838:	ea5f 0c00 	movs.w	ip, r0
  40683c:	bf08      	it	eq
  40683e:	4770      	bxeq	lr
  406840:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406844:	4601      	mov	r1, r0
  406846:	f04f 0000 	mov.w	r0, #0
  40684a:	e01c      	b.n	406886 <__aeabi_l2f+0x2a>

0040684c <__aeabi_ul2f>:
  40684c:	ea50 0201 	orrs.w	r2, r0, r1
  406850:	bf08      	it	eq
  406852:	4770      	bxeq	lr
  406854:	f04f 0300 	mov.w	r3, #0
  406858:	e00a      	b.n	406870 <__aeabi_l2f+0x14>
  40685a:	bf00      	nop

0040685c <__aeabi_l2f>:
  40685c:	ea50 0201 	orrs.w	r2, r0, r1
  406860:	bf08      	it	eq
  406862:	4770      	bxeq	lr
  406864:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406868:	d502      	bpl.n	406870 <__aeabi_l2f+0x14>
  40686a:	4240      	negs	r0, r0
  40686c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406870:	ea5f 0c01 	movs.w	ip, r1
  406874:	bf02      	ittt	eq
  406876:	4684      	moveq	ip, r0
  406878:	4601      	moveq	r1, r0
  40687a:	2000      	moveq	r0, #0
  40687c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  406880:	bf08      	it	eq
  406882:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  406886:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40688a:	fabc f28c 	clz	r2, ip
  40688e:	3a08      	subs	r2, #8
  406890:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406894:	db10      	blt.n	4068b8 <__aeabi_l2f+0x5c>
  406896:	fa01 fc02 	lsl.w	ip, r1, r2
  40689a:	4463      	add	r3, ip
  40689c:	fa00 fc02 	lsl.w	ip, r0, r2
  4068a0:	f1c2 0220 	rsb	r2, r2, #32
  4068a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4068a8:	fa20 f202 	lsr.w	r2, r0, r2
  4068ac:	eb43 0002 	adc.w	r0, r3, r2
  4068b0:	bf08      	it	eq
  4068b2:	f020 0001 	biceq.w	r0, r0, #1
  4068b6:	4770      	bx	lr
  4068b8:	f102 0220 	add.w	r2, r2, #32
  4068bc:	fa01 fc02 	lsl.w	ip, r1, r2
  4068c0:	f1c2 0220 	rsb	r2, r2, #32
  4068c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4068c8:	fa21 f202 	lsr.w	r2, r1, r2
  4068cc:	eb43 0002 	adc.w	r0, r3, r2
  4068d0:	bf08      	it	eq
  4068d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4068d6:	4770      	bx	lr

004068d8 <__aeabi_fmul>:
  4068d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4068dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4068e0:	bf1e      	ittt	ne
  4068e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4068e6:	ea92 0f0c 	teqne	r2, ip
  4068ea:	ea93 0f0c 	teqne	r3, ip
  4068ee:	d06f      	beq.n	4069d0 <__aeabi_fmul+0xf8>
  4068f0:	441a      	add	r2, r3
  4068f2:	ea80 0c01 	eor.w	ip, r0, r1
  4068f6:	0240      	lsls	r0, r0, #9
  4068f8:	bf18      	it	ne
  4068fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4068fe:	d01e      	beq.n	40693e <__aeabi_fmul+0x66>
  406900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406904:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406908:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40690c:	fba0 3101 	umull	r3, r1, r0, r1
  406910:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406914:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406918:	bf3e      	ittt	cc
  40691a:	0049      	lslcc	r1, r1, #1
  40691c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406920:	005b      	lslcc	r3, r3, #1
  406922:	ea40 0001 	orr.w	r0, r0, r1
  406926:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40692a:	2afd      	cmp	r2, #253	; 0xfd
  40692c:	d81d      	bhi.n	40696a <__aeabi_fmul+0x92>
  40692e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406932:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406936:	bf08      	it	eq
  406938:	f020 0001 	biceq.w	r0, r0, #1
  40693c:	4770      	bx	lr
  40693e:	f090 0f00 	teq	r0, #0
  406942:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406946:	bf08      	it	eq
  406948:	0249      	lsleq	r1, r1, #9
  40694a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40694e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406952:	3a7f      	subs	r2, #127	; 0x7f
  406954:	bfc2      	ittt	gt
  406956:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40695a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40695e:	4770      	bxgt	lr
  406960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406964:	f04f 0300 	mov.w	r3, #0
  406968:	3a01      	subs	r2, #1
  40696a:	dc5d      	bgt.n	406a28 <__aeabi_fmul+0x150>
  40696c:	f112 0f19 	cmn.w	r2, #25
  406970:	bfdc      	itt	le
  406972:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  406976:	4770      	bxle	lr
  406978:	f1c2 0200 	rsb	r2, r2, #0
  40697c:	0041      	lsls	r1, r0, #1
  40697e:	fa21 f102 	lsr.w	r1, r1, r2
  406982:	f1c2 0220 	rsb	r2, r2, #32
  406986:	fa00 fc02 	lsl.w	ip, r0, r2
  40698a:	ea5f 0031 	movs.w	r0, r1, rrx
  40698e:	f140 0000 	adc.w	r0, r0, #0
  406992:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  406996:	bf08      	it	eq
  406998:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40699c:	4770      	bx	lr
  40699e:	f092 0f00 	teq	r2, #0
  4069a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4069a6:	bf02      	ittt	eq
  4069a8:	0040      	lsleq	r0, r0, #1
  4069aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4069ae:	3a01      	subeq	r2, #1
  4069b0:	d0f9      	beq.n	4069a6 <__aeabi_fmul+0xce>
  4069b2:	ea40 000c 	orr.w	r0, r0, ip
  4069b6:	f093 0f00 	teq	r3, #0
  4069ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4069be:	bf02      	ittt	eq
  4069c0:	0049      	lsleq	r1, r1, #1
  4069c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4069c6:	3b01      	subeq	r3, #1
  4069c8:	d0f9      	beq.n	4069be <__aeabi_fmul+0xe6>
  4069ca:	ea41 010c 	orr.w	r1, r1, ip
  4069ce:	e78f      	b.n	4068f0 <__aeabi_fmul+0x18>
  4069d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4069d4:	ea92 0f0c 	teq	r2, ip
  4069d8:	bf18      	it	ne
  4069da:	ea93 0f0c 	teqne	r3, ip
  4069de:	d00a      	beq.n	4069f6 <__aeabi_fmul+0x11e>
  4069e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4069e4:	bf18      	it	ne
  4069e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4069ea:	d1d8      	bne.n	40699e <__aeabi_fmul+0xc6>
  4069ec:	ea80 0001 	eor.w	r0, r0, r1
  4069f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4069f4:	4770      	bx	lr
  4069f6:	f090 0f00 	teq	r0, #0
  4069fa:	bf17      	itett	ne
  4069fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406a00:	4608      	moveq	r0, r1
  406a02:	f091 0f00 	teqne	r1, #0
  406a06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406a0a:	d014      	beq.n	406a36 <__aeabi_fmul+0x15e>
  406a0c:	ea92 0f0c 	teq	r2, ip
  406a10:	d101      	bne.n	406a16 <__aeabi_fmul+0x13e>
  406a12:	0242      	lsls	r2, r0, #9
  406a14:	d10f      	bne.n	406a36 <__aeabi_fmul+0x15e>
  406a16:	ea93 0f0c 	teq	r3, ip
  406a1a:	d103      	bne.n	406a24 <__aeabi_fmul+0x14c>
  406a1c:	024b      	lsls	r3, r1, #9
  406a1e:	bf18      	it	ne
  406a20:	4608      	movne	r0, r1
  406a22:	d108      	bne.n	406a36 <__aeabi_fmul+0x15e>
  406a24:	ea80 0001 	eor.w	r0, r0, r1
  406a28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406a34:	4770      	bx	lr
  406a36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406a3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406a3e:	4770      	bx	lr

00406a40 <__aeabi_fdiv>:
  406a40:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406a44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406a48:	bf1e      	ittt	ne
  406a4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406a4e:	ea92 0f0c 	teqne	r2, ip
  406a52:	ea93 0f0c 	teqne	r3, ip
  406a56:	d069      	beq.n	406b2c <__aeabi_fdiv+0xec>
  406a58:	eba2 0203 	sub.w	r2, r2, r3
  406a5c:	ea80 0c01 	eor.w	ip, r0, r1
  406a60:	0249      	lsls	r1, r1, #9
  406a62:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406a66:	d037      	beq.n	406ad8 <__aeabi_fdiv+0x98>
  406a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406a6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406a70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406a74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406a78:	428b      	cmp	r3, r1
  406a7a:	bf38      	it	cc
  406a7c:	005b      	lslcc	r3, r3, #1
  406a7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  406a82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  406a86:	428b      	cmp	r3, r1
  406a88:	bf24      	itt	cs
  406a8a:	1a5b      	subcs	r3, r3, r1
  406a8c:	ea40 000c 	orrcs.w	r0, r0, ip
  406a90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406a94:	bf24      	itt	cs
  406a96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  406a9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406a9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  406aa2:	bf24      	itt	cs
  406aa4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  406aa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406aac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  406ab0:	bf24      	itt	cs
  406ab2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  406ab6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406aba:	011b      	lsls	r3, r3, #4
  406abc:	bf18      	it	ne
  406abe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  406ac2:	d1e0      	bne.n	406a86 <__aeabi_fdiv+0x46>
  406ac4:	2afd      	cmp	r2, #253	; 0xfd
  406ac6:	f63f af50 	bhi.w	40696a <__aeabi_fmul+0x92>
  406aca:	428b      	cmp	r3, r1
  406acc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406ad0:	bf08      	it	eq
  406ad2:	f020 0001 	biceq.w	r0, r0, #1
  406ad6:	4770      	bx	lr
  406ad8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406adc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406ae0:	327f      	adds	r2, #127	; 0x7f
  406ae2:	bfc2      	ittt	gt
  406ae4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406ae8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406aec:	4770      	bxgt	lr
  406aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406af2:	f04f 0300 	mov.w	r3, #0
  406af6:	3a01      	subs	r2, #1
  406af8:	e737      	b.n	40696a <__aeabi_fmul+0x92>
  406afa:	f092 0f00 	teq	r2, #0
  406afe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406b02:	bf02      	ittt	eq
  406b04:	0040      	lsleq	r0, r0, #1
  406b06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406b0a:	3a01      	subeq	r2, #1
  406b0c:	d0f9      	beq.n	406b02 <__aeabi_fdiv+0xc2>
  406b0e:	ea40 000c 	orr.w	r0, r0, ip
  406b12:	f093 0f00 	teq	r3, #0
  406b16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406b1a:	bf02      	ittt	eq
  406b1c:	0049      	lsleq	r1, r1, #1
  406b1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406b22:	3b01      	subeq	r3, #1
  406b24:	d0f9      	beq.n	406b1a <__aeabi_fdiv+0xda>
  406b26:	ea41 010c 	orr.w	r1, r1, ip
  406b2a:	e795      	b.n	406a58 <__aeabi_fdiv+0x18>
  406b2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406b30:	ea92 0f0c 	teq	r2, ip
  406b34:	d108      	bne.n	406b48 <__aeabi_fdiv+0x108>
  406b36:	0242      	lsls	r2, r0, #9
  406b38:	f47f af7d 	bne.w	406a36 <__aeabi_fmul+0x15e>
  406b3c:	ea93 0f0c 	teq	r3, ip
  406b40:	f47f af70 	bne.w	406a24 <__aeabi_fmul+0x14c>
  406b44:	4608      	mov	r0, r1
  406b46:	e776      	b.n	406a36 <__aeabi_fmul+0x15e>
  406b48:	ea93 0f0c 	teq	r3, ip
  406b4c:	d104      	bne.n	406b58 <__aeabi_fdiv+0x118>
  406b4e:	024b      	lsls	r3, r1, #9
  406b50:	f43f af4c 	beq.w	4069ec <__aeabi_fmul+0x114>
  406b54:	4608      	mov	r0, r1
  406b56:	e76e      	b.n	406a36 <__aeabi_fmul+0x15e>
  406b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406b5c:	bf18      	it	ne
  406b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406b62:	d1ca      	bne.n	406afa <__aeabi_fdiv+0xba>
  406b64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406b68:	f47f af5c 	bne.w	406a24 <__aeabi_fmul+0x14c>
  406b6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406b70:	f47f af3c 	bne.w	4069ec <__aeabi_fmul+0x114>
  406b74:	e75f      	b.n	406a36 <__aeabi_fmul+0x15e>
  406b76:	bf00      	nop

00406b78 <__gesf2>:
  406b78:	f04f 3cff 	mov.w	ip, #4294967295
  406b7c:	e006      	b.n	406b8c <__cmpsf2+0x4>
  406b7e:	bf00      	nop

00406b80 <__lesf2>:
  406b80:	f04f 0c01 	mov.w	ip, #1
  406b84:	e002      	b.n	406b8c <__cmpsf2+0x4>
  406b86:	bf00      	nop

00406b88 <__cmpsf2>:
  406b88:	f04f 0c01 	mov.w	ip, #1
  406b8c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406b90:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406b9c:	bf18      	it	ne
  406b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406ba2:	d011      	beq.n	406bc8 <__cmpsf2+0x40>
  406ba4:	b001      	add	sp, #4
  406ba6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406baa:	bf18      	it	ne
  406bac:	ea90 0f01 	teqne	r0, r1
  406bb0:	bf58      	it	pl
  406bb2:	ebb2 0003 	subspl.w	r0, r2, r3
  406bb6:	bf88      	it	hi
  406bb8:	17c8      	asrhi	r0, r1, #31
  406bba:	bf38      	it	cc
  406bbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  406bc0:	bf18      	it	ne
  406bc2:	f040 0001 	orrne.w	r0, r0, #1
  406bc6:	4770      	bx	lr
  406bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406bcc:	d102      	bne.n	406bd4 <__cmpsf2+0x4c>
  406bce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406bd2:	d105      	bne.n	406be0 <__cmpsf2+0x58>
  406bd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406bd8:	d1e4      	bne.n	406ba4 <__cmpsf2+0x1c>
  406bda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406bde:	d0e1      	beq.n	406ba4 <__cmpsf2+0x1c>
  406be0:	f85d 0b04 	ldr.w	r0, [sp], #4
  406be4:	4770      	bx	lr
  406be6:	bf00      	nop

00406be8 <__aeabi_cfrcmple>:
  406be8:	4684      	mov	ip, r0
  406bea:	4608      	mov	r0, r1
  406bec:	4661      	mov	r1, ip
  406bee:	e7ff      	b.n	406bf0 <__aeabi_cfcmpeq>

00406bf0 <__aeabi_cfcmpeq>:
  406bf0:	b50f      	push	{r0, r1, r2, r3, lr}
  406bf2:	f7ff ffc9 	bl	406b88 <__cmpsf2>
  406bf6:	2800      	cmp	r0, #0
  406bf8:	bf48      	it	mi
  406bfa:	f110 0f00 	cmnmi.w	r0, #0
  406bfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406c00 <__aeabi_fcmpeq>:
  406c00:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c04:	f7ff fff4 	bl	406bf0 <__aeabi_cfcmpeq>
  406c08:	bf0c      	ite	eq
  406c0a:	2001      	moveq	r0, #1
  406c0c:	2000      	movne	r0, #0
  406c0e:	f85d fb08 	ldr.w	pc, [sp], #8
  406c12:	bf00      	nop

00406c14 <__aeabi_fcmplt>:
  406c14:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c18:	f7ff ffea 	bl	406bf0 <__aeabi_cfcmpeq>
  406c1c:	bf34      	ite	cc
  406c1e:	2001      	movcc	r0, #1
  406c20:	2000      	movcs	r0, #0
  406c22:	f85d fb08 	ldr.w	pc, [sp], #8
  406c26:	bf00      	nop

00406c28 <__aeabi_fcmple>:
  406c28:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c2c:	f7ff ffe0 	bl	406bf0 <__aeabi_cfcmpeq>
  406c30:	bf94      	ite	ls
  406c32:	2001      	movls	r0, #1
  406c34:	2000      	movhi	r0, #0
  406c36:	f85d fb08 	ldr.w	pc, [sp], #8
  406c3a:	bf00      	nop

00406c3c <__aeabi_fcmpge>:
  406c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c40:	f7ff ffd2 	bl	406be8 <__aeabi_cfrcmple>
  406c44:	bf94      	ite	ls
  406c46:	2001      	movls	r0, #1
  406c48:	2000      	movhi	r0, #0
  406c4a:	f85d fb08 	ldr.w	pc, [sp], #8
  406c4e:	bf00      	nop

00406c50 <__aeabi_fcmpgt>:
  406c50:	f84d ed08 	str.w	lr, [sp, #-8]!
  406c54:	f7ff ffc8 	bl	406be8 <__aeabi_cfrcmple>
  406c58:	bf34      	ite	cc
  406c5a:	2001      	movcc	r0, #1
  406c5c:	2000      	movcs	r0, #0
  406c5e:	f85d fb08 	ldr.w	pc, [sp], #8
  406c62:	bf00      	nop

00406c64 <__aeabi_fcmpun>:
  406c64:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406c68:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406c6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406c70:	d102      	bne.n	406c78 <__aeabi_fcmpun+0x14>
  406c72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406c76:	d108      	bne.n	406c8a <__aeabi_fcmpun+0x26>
  406c78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406c7c:	d102      	bne.n	406c84 <__aeabi_fcmpun+0x20>
  406c7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406c82:	d102      	bne.n	406c8a <__aeabi_fcmpun+0x26>
  406c84:	f04f 0000 	mov.w	r0, #0
  406c88:	4770      	bx	lr
  406c8a:	f04f 0001 	mov.w	r0, #1
  406c8e:	4770      	bx	lr

00406c90 <__aeabi_f2iz>:
  406c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406c94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406c98:	d30f      	bcc.n	406cba <__aeabi_f2iz+0x2a>
  406c9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406c9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406ca2:	d90d      	bls.n	406cc0 <__aeabi_f2iz+0x30>
  406ca4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406ca8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406cac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406cb0:	fa23 f002 	lsr.w	r0, r3, r2
  406cb4:	bf18      	it	ne
  406cb6:	4240      	negne	r0, r0
  406cb8:	4770      	bx	lr
  406cba:	f04f 0000 	mov.w	r0, #0
  406cbe:	4770      	bx	lr
  406cc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406cc4:	d101      	bne.n	406cca <__aeabi_f2iz+0x3a>
  406cc6:	0242      	lsls	r2, r0, #9
  406cc8:	d105      	bne.n	406cd6 <__aeabi_f2iz+0x46>
  406cca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  406cce:	bf08      	it	eq
  406cd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406cd4:	4770      	bx	lr
  406cd6:	f04f 0000 	mov.w	r0, #0
  406cda:	4770      	bx	lr

00406cdc <__errno>:
  406cdc:	4b01      	ldr	r3, [pc, #4]	; (406ce4 <__errno+0x8>)
  406cde:	6818      	ldr	r0, [r3, #0]
  406ce0:	4770      	bx	lr
  406ce2:	bf00      	nop
  406ce4:	20400018 	.word	0x20400018

00406ce8 <__libc_init_array>:
  406ce8:	b570      	push	{r4, r5, r6, lr}
  406cea:	4e0f      	ldr	r6, [pc, #60]	; (406d28 <__libc_init_array+0x40>)
  406cec:	4d0f      	ldr	r5, [pc, #60]	; (406d2c <__libc_init_array+0x44>)
  406cee:	1b76      	subs	r6, r6, r5
  406cf0:	10b6      	asrs	r6, r6, #2
  406cf2:	bf18      	it	ne
  406cf4:	2400      	movne	r4, #0
  406cf6:	d005      	beq.n	406d04 <__libc_init_array+0x1c>
  406cf8:	3401      	adds	r4, #1
  406cfa:	f855 3b04 	ldr.w	r3, [r5], #4
  406cfe:	4798      	blx	r3
  406d00:	42a6      	cmp	r6, r4
  406d02:	d1f9      	bne.n	406cf8 <__libc_init_array+0x10>
  406d04:	4e0a      	ldr	r6, [pc, #40]	; (406d30 <__libc_init_array+0x48>)
  406d06:	4d0b      	ldr	r5, [pc, #44]	; (406d34 <__libc_init_array+0x4c>)
  406d08:	1b76      	subs	r6, r6, r5
  406d0a:	f005 fbd1 	bl	40c4b0 <_init>
  406d0e:	10b6      	asrs	r6, r6, #2
  406d10:	bf18      	it	ne
  406d12:	2400      	movne	r4, #0
  406d14:	d006      	beq.n	406d24 <__libc_init_array+0x3c>
  406d16:	3401      	adds	r4, #1
  406d18:	f855 3b04 	ldr.w	r3, [r5], #4
  406d1c:	4798      	blx	r3
  406d1e:	42a6      	cmp	r6, r4
  406d20:	d1f9      	bne.n	406d16 <__libc_init_array+0x2e>
  406d22:	bd70      	pop	{r4, r5, r6, pc}
  406d24:	bd70      	pop	{r4, r5, r6, pc}
  406d26:	bf00      	nop
  406d28:	0040c4bc 	.word	0x0040c4bc
  406d2c:	0040c4bc 	.word	0x0040c4bc
  406d30:	0040c4c4 	.word	0x0040c4c4
  406d34:	0040c4bc 	.word	0x0040c4bc

00406d38 <malloc>:
  406d38:	4b02      	ldr	r3, [pc, #8]	; (406d44 <malloc+0xc>)
  406d3a:	4601      	mov	r1, r0
  406d3c:	6818      	ldr	r0, [r3, #0]
  406d3e:	f000 b80b 	b.w	406d58 <_malloc_r>
  406d42:	bf00      	nop
  406d44:	20400018 	.word	0x20400018

00406d48 <free>:
  406d48:	4b02      	ldr	r3, [pc, #8]	; (406d54 <free+0xc>)
  406d4a:	4601      	mov	r1, r0
  406d4c:	6818      	ldr	r0, [r3, #0]
  406d4e:	f003 ba1f 	b.w	40a190 <_free_r>
  406d52:	bf00      	nop
  406d54:	20400018 	.word	0x20400018

00406d58 <_malloc_r>:
  406d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d5c:	f101 060b 	add.w	r6, r1, #11
  406d60:	2e16      	cmp	r6, #22
  406d62:	b083      	sub	sp, #12
  406d64:	4605      	mov	r5, r0
  406d66:	f240 809e 	bls.w	406ea6 <_malloc_r+0x14e>
  406d6a:	f036 0607 	bics.w	r6, r6, #7
  406d6e:	f100 80bd 	bmi.w	406eec <_malloc_r+0x194>
  406d72:	42b1      	cmp	r1, r6
  406d74:	f200 80ba 	bhi.w	406eec <_malloc_r+0x194>
  406d78:	f000 fb86 	bl	407488 <__malloc_lock>
  406d7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406d80:	f0c0 8293 	bcc.w	4072aa <_malloc_r+0x552>
  406d84:	0a73      	lsrs	r3, r6, #9
  406d86:	f000 80b8 	beq.w	406efa <_malloc_r+0x1a2>
  406d8a:	2b04      	cmp	r3, #4
  406d8c:	f200 8179 	bhi.w	407082 <_malloc_r+0x32a>
  406d90:	09b3      	lsrs	r3, r6, #6
  406d92:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406d96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406d9a:	00c3      	lsls	r3, r0, #3
  406d9c:	4fbf      	ldr	r7, [pc, #764]	; (40709c <_malloc_r+0x344>)
  406d9e:	443b      	add	r3, r7
  406da0:	f1a3 0108 	sub.w	r1, r3, #8
  406da4:	685c      	ldr	r4, [r3, #4]
  406da6:	42a1      	cmp	r1, r4
  406da8:	d106      	bne.n	406db8 <_malloc_r+0x60>
  406daa:	e00c      	b.n	406dc6 <_malloc_r+0x6e>
  406dac:	2a00      	cmp	r2, #0
  406dae:	f280 80aa 	bge.w	406f06 <_malloc_r+0x1ae>
  406db2:	68e4      	ldr	r4, [r4, #12]
  406db4:	42a1      	cmp	r1, r4
  406db6:	d006      	beq.n	406dc6 <_malloc_r+0x6e>
  406db8:	6863      	ldr	r3, [r4, #4]
  406dba:	f023 0303 	bic.w	r3, r3, #3
  406dbe:	1b9a      	subs	r2, r3, r6
  406dc0:	2a0f      	cmp	r2, #15
  406dc2:	ddf3      	ble.n	406dac <_malloc_r+0x54>
  406dc4:	4670      	mov	r0, lr
  406dc6:	693c      	ldr	r4, [r7, #16]
  406dc8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4070b0 <_malloc_r+0x358>
  406dcc:	4574      	cmp	r4, lr
  406dce:	f000 81ab 	beq.w	407128 <_malloc_r+0x3d0>
  406dd2:	6863      	ldr	r3, [r4, #4]
  406dd4:	f023 0303 	bic.w	r3, r3, #3
  406dd8:	1b9a      	subs	r2, r3, r6
  406dda:	2a0f      	cmp	r2, #15
  406ddc:	f300 8190 	bgt.w	407100 <_malloc_r+0x3a8>
  406de0:	2a00      	cmp	r2, #0
  406de2:	f8c7 e014 	str.w	lr, [r7, #20]
  406de6:	f8c7 e010 	str.w	lr, [r7, #16]
  406dea:	f280 809d 	bge.w	406f28 <_malloc_r+0x1d0>
  406dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406df2:	f080 8161 	bcs.w	4070b8 <_malloc_r+0x360>
  406df6:	08db      	lsrs	r3, r3, #3
  406df8:	f103 0c01 	add.w	ip, r3, #1
  406dfc:	1099      	asrs	r1, r3, #2
  406dfe:	687a      	ldr	r2, [r7, #4]
  406e00:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406e04:	f8c4 8008 	str.w	r8, [r4, #8]
  406e08:	2301      	movs	r3, #1
  406e0a:	408b      	lsls	r3, r1
  406e0c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406e10:	4313      	orrs	r3, r2
  406e12:	3908      	subs	r1, #8
  406e14:	60e1      	str	r1, [r4, #12]
  406e16:	607b      	str	r3, [r7, #4]
  406e18:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406e1c:	f8c8 400c 	str.w	r4, [r8, #12]
  406e20:	1082      	asrs	r2, r0, #2
  406e22:	2401      	movs	r4, #1
  406e24:	4094      	lsls	r4, r2
  406e26:	429c      	cmp	r4, r3
  406e28:	f200 808b 	bhi.w	406f42 <_malloc_r+0x1ea>
  406e2c:	421c      	tst	r4, r3
  406e2e:	d106      	bne.n	406e3e <_malloc_r+0xe6>
  406e30:	f020 0003 	bic.w	r0, r0, #3
  406e34:	0064      	lsls	r4, r4, #1
  406e36:	421c      	tst	r4, r3
  406e38:	f100 0004 	add.w	r0, r0, #4
  406e3c:	d0fa      	beq.n	406e34 <_malloc_r+0xdc>
  406e3e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406e42:	46cc      	mov	ip, r9
  406e44:	4680      	mov	r8, r0
  406e46:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406e4a:	459c      	cmp	ip, r3
  406e4c:	d107      	bne.n	406e5e <_malloc_r+0x106>
  406e4e:	e16d      	b.n	40712c <_malloc_r+0x3d4>
  406e50:	2a00      	cmp	r2, #0
  406e52:	f280 817b 	bge.w	40714c <_malloc_r+0x3f4>
  406e56:	68db      	ldr	r3, [r3, #12]
  406e58:	459c      	cmp	ip, r3
  406e5a:	f000 8167 	beq.w	40712c <_malloc_r+0x3d4>
  406e5e:	6859      	ldr	r1, [r3, #4]
  406e60:	f021 0103 	bic.w	r1, r1, #3
  406e64:	1b8a      	subs	r2, r1, r6
  406e66:	2a0f      	cmp	r2, #15
  406e68:	ddf2      	ble.n	406e50 <_malloc_r+0xf8>
  406e6a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406e6e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406e72:	9300      	str	r3, [sp, #0]
  406e74:	199c      	adds	r4, r3, r6
  406e76:	4628      	mov	r0, r5
  406e78:	f046 0601 	orr.w	r6, r6, #1
  406e7c:	f042 0501 	orr.w	r5, r2, #1
  406e80:	605e      	str	r6, [r3, #4]
  406e82:	f8c8 c00c 	str.w	ip, [r8, #12]
  406e86:	f8cc 8008 	str.w	r8, [ip, #8]
  406e8a:	617c      	str	r4, [r7, #20]
  406e8c:	613c      	str	r4, [r7, #16]
  406e8e:	f8c4 e00c 	str.w	lr, [r4, #12]
  406e92:	f8c4 e008 	str.w	lr, [r4, #8]
  406e96:	6065      	str	r5, [r4, #4]
  406e98:	505a      	str	r2, [r3, r1]
  406e9a:	f000 fafb 	bl	407494 <__malloc_unlock>
  406e9e:	9b00      	ldr	r3, [sp, #0]
  406ea0:	f103 0408 	add.w	r4, r3, #8
  406ea4:	e01e      	b.n	406ee4 <_malloc_r+0x18c>
  406ea6:	2910      	cmp	r1, #16
  406ea8:	d820      	bhi.n	406eec <_malloc_r+0x194>
  406eaa:	f000 faed 	bl	407488 <__malloc_lock>
  406eae:	2610      	movs	r6, #16
  406eb0:	2318      	movs	r3, #24
  406eb2:	2002      	movs	r0, #2
  406eb4:	4f79      	ldr	r7, [pc, #484]	; (40709c <_malloc_r+0x344>)
  406eb6:	443b      	add	r3, r7
  406eb8:	f1a3 0208 	sub.w	r2, r3, #8
  406ebc:	685c      	ldr	r4, [r3, #4]
  406ebe:	4294      	cmp	r4, r2
  406ec0:	f000 813d 	beq.w	40713e <_malloc_r+0x3e6>
  406ec4:	6863      	ldr	r3, [r4, #4]
  406ec6:	68e1      	ldr	r1, [r4, #12]
  406ec8:	68a6      	ldr	r6, [r4, #8]
  406eca:	f023 0303 	bic.w	r3, r3, #3
  406ece:	4423      	add	r3, r4
  406ed0:	4628      	mov	r0, r5
  406ed2:	685a      	ldr	r2, [r3, #4]
  406ed4:	60f1      	str	r1, [r6, #12]
  406ed6:	f042 0201 	orr.w	r2, r2, #1
  406eda:	608e      	str	r6, [r1, #8]
  406edc:	605a      	str	r2, [r3, #4]
  406ede:	f000 fad9 	bl	407494 <__malloc_unlock>
  406ee2:	3408      	adds	r4, #8
  406ee4:	4620      	mov	r0, r4
  406ee6:	b003      	add	sp, #12
  406ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eec:	2400      	movs	r4, #0
  406eee:	230c      	movs	r3, #12
  406ef0:	4620      	mov	r0, r4
  406ef2:	602b      	str	r3, [r5, #0]
  406ef4:	b003      	add	sp, #12
  406ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406efa:	2040      	movs	r0, #64	; 0x40
  406efc:	f44f 7300 	mov.w	r3, #512	; 0x200
  406f00:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406f04:	e74a      	b.n	406d9c <_malloc_r+0x44>
  406f06:	4423      	add	r3, r4
  406f08:	68e1      	ldr	r1, [r4, #12]
  406f0a:	685a      	ldr	r2, [r3, #4]
  406f0c:	68a6      	ldr	r6, [r4, #8]
  406f0e:	f042 0201 	orr.w	r2, r2, #1
  406f12:	60f1      	str	r1, [r6, #12]
  406f14:	4628      	mov	r0, r5
  406f16:	608e      	str	r6, [r1, #8]
  406f18:	605a      	str	r2, [r3, #4]
  406f1a:	f000 fabb 	bl	407494 <__malloc_unlock>
  406f1e:	3408      	adds	r4, #8
  406f20:	4620      	mov	r0, r4
  406f22:	b003      	add	sp, #12
  406f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f28:	4423      	add	r3, r4
  406f2a:	4628      	mov	r0, r5
  406f2c:	685a      	ldr	r2, [r3, #4]
  406f2e:	f042 0201 	orr.w	r2, r2, #1
  406f32:	605a      	str	r2, [r3, #4]
  406f34:	f000 faae 	bl	407494 <__malloc_unlock>
  406f38:	3408      	adds	r4, #8
  406f3a:	4620      	mov	r0, r4
  406f3c:	b003      	add	sp, #12
  406f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f42:	68bc      	ldr	r4, [r7, #8]
  406f44:	6863      	ldr	r3, [r4, #4]
  406f46:	f023 0803 	bic.w	r8, r3, #3
  406f4a:	45b0      	cmp	r8, r6
  406f4c:	d304      	bcc.n	406f58 <_malloc_r+0x200>
  406f4e:	eba8 0306 	sub.w	r3, r8, r6
  406f52:	2b0f      	cmp	r3, #15
  406f54:	f300 8085 	bgt.w	407062 <_malloc_r+0x30a>
  406f58:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4070b4 <_malloc_r+0x35c>
  406f5c:	4b50      	ldr	r3, [pc, #320]	; (4070a0 <_malloc_r+0x348>)
  406f5e:	f8d9 2000 	ldr.w	r2, [r9]
  406f62:	681b      	ldr	r3, [r3, #0]
  406f64:	3201      	adds	r2, #1
  406f66:	4433      	add	r3, r6
  406f68:	eb04 0a08 	add.w	sl, r4, r8
  406f6c:	f000 8155 	beq.w	40721a <_malloc_r+0x4c2>
  406f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406f74:	330f      	adds	r3, #15
  406f76:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406f7a:	f02b 0b0f 	bic.w	fp, fp, #15
  406f7e:	4659      	mov	r1, fp
  406f80:	4628      	mov	r0, r5
  406f82:	f000 faf7 	bl	407574 <_sbrk_r>
  406f86:	1c41      	adds	r1, r0, #1
  406f88:	4602      	mov	r2, r0
  406f8a:	f000 80fc 	beq.w	407186 <_malloc_r+0x42e>
  406f8e:	4582      	cmp	sl, r0
  406f90:	f200 80f7 	bhi.w	407182 <_malloc_r+0x42a>
  406f94:	4b43      	ldr	r3, [pc, #268]	; (4070a4 <_malloc_r+0x34c>)
  406f96:	6819      	ldr	r1, [r3, #0]
  406f98:	4459      	add	r1, fp
  406f9a:	6019      	str	r1, [r3, #0]
  406f9c:	f000 814d 	beq.w	40723a <_malloc_r+0x4e2>
  406fa0:	f8d9 0000 	ldr.w	r0, [r9]
  406fa4:	3001      	adds	r0, #1
  406fa6:	bf1b      	ittet	ne
  406fa8:	eba2 0a0a 	subne.w	sl, r2, sl
  406fac:	4451      	addne	r1, sl
  406fae:	f8c9 2000 	streq.w	r2, [r9]
  406fb2:	6019      	strne	r1, [r3, #0]
  406fb4:	f012 0107 	ands.w	r1, r2, #7
  406fb8:	f000 8115 	beq.w	4071e6 <_malloc_r+0x48e>
  406fbc:	f1c1 0008 	rsb	r0, r1, #8
  406fc0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406fc4:	4402      	add	r2, r0
  406fc6:	3108      	adds	r1, #8
  406fc8:	eb02 090b 	add.w	r9, r2, fp
  406fcc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406fd0:	eba1 0909 	sub.w	r9, r1, r9
  406fd4:	4649      	mov	r1, r9
  406fd6:	4628      	mov	r0, r5
  406fd8:	9301      	str	r3, [sp, #4]
  406fda:	9200      	str	r2, [sp, #0]
  406fdc:	f000 faca 	bl	407574 <_sbrk_r>
  406fe0:	1c43      	adds	r3, r0, #1
  406fe2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406fe6:	f000 8143 	beq.w	407270 <_malloc_r+0x518>
  406fea:	1a80      	subs	r0, r0, r2
  406fec:	4448      	add	r0, r9
  406fee:	f040 0001 	orr.w	r0, r0, #1
  406ff2:	6819      	ldr	r1, [r3, #0]
  406ff4:	60ba      	str	r2, [r7, #8]
  406ff6:	4449      	add	r1, r9
  406ff8:	42bc      	cmp	r4, r7
  406ffa:	6050      	str	r0, [r2, #4]
  406ffc:	6019      	str	r1, [r3, #0]
  406ffe:	d017      	beq.n	407030 <_malloc_r+0x2d8>
  407000:	f1b8 0f0f 	cmp.w	r8, #15
  407004:	f240 80fb 	bls.w	4071fe <_malloc_r+0x4a6>
  407008:	6860      	ldr	r0, [r4, #4]
  40700a:	f1a8 020c 	sub.w	r2, r8, #12
  40700e:	f022 0207 	bic.w	r2, r2, #7
  407012:	eb04 0e02 	add.w	lr, r4, r2
  407016:	f000 0001 	and.w	r0, r0, #1
  40701a:	f04f 0c05 	mov.w	ip, #5
  40701e:	4310      	orrs	r0, r2
  407020:	2a0f      	cmp	r2, #15
  407022:	6060      	str	r0, [r4, #4]
  407024:	f8ce c004 	str.w	ip, [lr, #4]
  407028:	f8ce c008 	str.w	ip, [lr, #8]
  40702c:	f200 8117 	bhi.w	40725e <_malloc_r+0x506>
  407030:	4b1d      	ldr	r3, [pc, #116]	; (4070a8 <_malloc_r+0x350>)
  407032:	68bc      	ldr	r4, [r7, #8]
  407034:	681a      	ldr	r2, [r3, #0]
  407036:	4291      	cmp	r1, r2
  407038:	bf88      	it	hi
  40703a:	6019      	strhi	r1, [r3, #0]
  40703c:	4b1b      	ldr	r3, [pc, #108]	; (4070ac <_malloc_r+0x354>)
  40703e:	681a      	ldr	r2, [r3, #0]
  407040:	4291      	cmp	r1, r2
  407042:	6862      	ldr	r2, [r4, #4]
  407044:	bf88      	it	hi
  407046:	6019      	strhi	r1, [r3, #0]
  407048:	f022 0203 	bic.w	r2, r2, #3
  40704c:	4296      	cmp	r6, r2
  40704e:	eba2 0306 	sub.w	r3, r2, r6
  407052:	d801      	bhi.n	407058 <_malloc_r+0x300>
  407054:	2b0f      	cmp	r3, #15
  407056:	dc04      	bgt.n	407062 <_malloc_r+0x30a>
  407058:	4628      	mov	r0, r5
  40705a:	f000 fa1b 	bl	407494 <__malloc_unlock>
  40705e:	2400      	movs	r4, #0
  407060:	e740      	b.n	406ee4 <_malloc_r+0x18c>
  407062:	19a2      	adds	r2, r4, r6
  407064:	f043 0301 	orr.w	r3, r3, #1
  407068:	f046 0601 	orr.w	r6, r6, #1
  40706c:	6066      	str	r6, [r4, #4]
  40706e:	4628      	mov	r0, r5
  407070:	60ba      	str	r2, [r7, #8]
  407072:	6053      	str	r3, [r2, #4]
  407074:	f000 fa0e 	bl	407494 <__malloc_unlock>
  407078:	3408      	adds	r4, #8
  40707a:	4620      	mov	r0, r4
  40707c:	b003      	add	sp, #12
  40707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407082:	2b14      	cmp	r3, #20
  407084:	d971      	bls.n	40716a <_malloc_r+0x412>
  407086:	2b54      	cmp	r3, #84	; 0x54
  407088:	f200 80a3 	bhi.w	4071d2 <_malloc_r+0x47a>
  40708c:	0b33      	lsrs	r3, r6, #12
  40708e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407092:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407096:	00c3      	lsls	r3, r0, #3
  407098:	e680      	b.n	406d9c <_malloc_r+0x44>
  40709a:	bf00      	nop
  40709c:	20400448 	.word	0x20400448
  4070a0:	20400dd0 	.word	0x20400dd0
  4070a4:	20400da0 	.word	0x20400da0
  4070a8:	20400dc8 	.word	0x20400dc8
  4070ac:	20400dcc 	.word	0x20400dcc
  4070b0:	20400450 	.word	0x20400450
  4070b4:	20400850 	.word	0x20400850
  4070b8:	0a5a      	lsrs	r2, r3, #9
  4070ba:	2a04      	cmp	r2, #4
  4070bc:	d95b      	bls.n	407176 <_malloc_r+0x41e>
  4070be:	2a14      	cmp	r2, #20
  4070c0:	f200 80ae 	bhi.w	407220 <_malloc_r+0x4c8>
  4070c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4070c8:	00c9      	lsls	r1, r1, #3
  4070ca:	325b      	adds	r2, #91	; 0x5b
  4070cc:	eb07 0c01 	add.w	ip, r7, r1
  4070d0:	5879      	ldr	r1, [r7, r1]
  4070d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4070d6:	458c      	cmp	ip, r1
  4070d8:	f000 8088 	beq.w	4071ec <_malloc_r+0x494>
  4070dc:	684a      	ldr	r2, [r1, #4]
  4070de:	f022 0203 	bic.w	r2, r2, #3
  4070e2:	4293      	cmp	r3, r2
  4070e4:	d273      	bcs.n	4071ce <_malloc_r+0x476>
  4070e6:	6889      	ldr	r1, [r1, #8]
  4070e8:	458c      	cmp	ip, r1
  4070ea:	d1f7      	bne.n	4070dc <_malloc_r+0x384>
  4070ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4070f0:	687b      	ldr	r3, [r7, #4]
  4070f2:	60e2      	str	r2, [r4, #12]
  4070f4:	f8c4 c008 	str.w	ip, [r4, #8]
  4070f8:	6094      	str	r4, [r2, #8]
  4070fa:	f8cc 400c 	str.w	r4, [ip, #12]
  4070fe:	e68f      	b.n	406e20 <_malloc_r+0xc8>
  407100:	19a1      	adds	r1, r4, r6
  407102:	f046 0c01 	orr.w	ip, r6, #1
  407106:	f042 0601 	orr.w	r6, r2, #1
  40710a:	f8c4 c004 	str.w	ip, [r4, #4]
  40710e:	4628      	mov	r0, r5
  407110:	6179      	str	r1, [r7, #20]
  407112:	6139      	str	r1, [r7, #16]
  407114:	f8c1 e00c 	str.w	lr, [r1, #12]
  407118:	f8c1 e008 	str.w	lr, [r1, #8]
  40711c:	604e      	str	r6, [r1, #4]
  40711e:	50e2      	str	r2, [r4, r3]
  407120:	f000 f9b8 	bl	407494 <__malloc_unlock>
  407124:	3408      	adds	r4, #8
  407126:	e6dd      	b.n	406ee4 <_malloc_r+0x18c>
  407128:	687b      	ldr	r3, [r7, #4]
  40712a:	e679      	b.n	406e20 <_malloc_r+0xc8>
  40712c:	f108 0801 	add.w	r8, r8, #1
  407130:	f018 0f03 	tst.w	r8, #3
  407134:	f10c 0c08 	add.w	ip, ip, #8
  407138:	f47f ae85 	bne.w	406e46 <_malloc_r+0xee>
  40713c:	e02d      	b.n	40719a <_malloc_r+0x442>
  40713e:	68dc      	ldr	r4, [r3, #12]
  407140:	42a3      	cmp	r3, r4
  407142:	bf08      	it	eq
  407144:	3002      	addeq	r0, #2
  407146:	f43f ae3e 	beq.w	406dc6 <_malloc_r+0x6e>
  40714a:	e6bb      	b.n	406ec4 <_malloc_r+0x16c>
  40714c:	4419      	add	r1, r3
  40714e:	461c      	mov	r4, r3
  407150:	684a      	ldr	r2, [r1, #4]
  407152:	68db      	ldr	r3, [r3, #12]
  407154:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407158:	f042 0201 	orr.w	r2, r2, #1
  40715c:	604a      	str	r2, [r1, #4]
  40715e:	4628      	mov	r0, r5
  407160:	60f3      	str	r3, [r6, #12]
  407162:	609e      	str	r6, [r3, #8]
  407164:	f000 f996 	bl	407494 <__malloc_unlock>
  407168:	e6bc      	b.n	406ee4 <_malloc_r+0x18c>
  40716a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40716e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407172:	00c3      	lsls	r3, r0, #3
  407174:	e612      	b.n	406d9c <_malloc_r+0x44>
  407176:	099a      	lsrs	r2, r3, #6
  407178:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40717c:	00c9      	lsls	r1, r1, #3
  40717e:	3238      	adds	r2, #56	; 0x38
  407180:	e7a4      	b.n	4070cc <_malloc_r+0x374>
  407182:	42bc      	cmp	r4, r7
  407184:	d054      	beq.n	407230 <_malloc_r+0x4d8>
  407186:	68bc      	ldr	r4, [r7, #8]
  407188:	6862      	ldr	r2, [r4, #4]
  40718a:	f022 0203 	bic.w	r2, r2, #3
  40718e:	e75d      	b.n	40704c <_malloc_r+0x2f4>
  407190:	f859 3908 	ldr.w	r3, [r9], #-8
  407194:	4599      	cmp	r9, r3
  407196:	f040 8086 	bne.w	4072a6 <_malloc_r+0x54e>
  40719a:	f010 0f03 	tst.w	r0, #3
  40719e:	f100 30ff 	add.w	r0, r0, #4294967295
  4071a2:	d1f5      	bne.n	407190 <_malloc_r+0x438>
  4071a4:	687b      	ldr	r3, [r7, #4]
  4071a6:	ea23 0304 	bic.w	r3, r3, r4
  4071aa:	607b      	str	r3, [r7, #4]
  4071ac:	0064      	lsls	r4, r4, #1
  4071ae:	429c      	cmp	r4, r3
  4071b0:	f63f aec7 	bhi.w	406f42 <_malloc_r+0x1ea>
  4071b4:	2c00      	cmp	r4, #0
  4071b6:	f43f aec4 	beq.w	406f42 <_malloc_r+0x1ea>
  4071ba:	421c      	tst	r4, r3
  4071bc:	4640      	mov	r0, r8
  4071be:	f47f ae3e 	bne.w	406e3e <_malloc_r+0xe6>
  4071c2:	0064      	lsls	r4, r4, #1
  4071c4:	421c      	tst	r4, r3
  4071c6:	f100 0004 	add.w	r0, r0, #4
  4071ca:	d0fa      	beq.n	4071c2 <_malloc_r+0x46a>
  4071cc:	e637      	b.n	406e3e <_malloc_r+0xe6>
  4071ce:	468c      	mov	ip, r1
  4071d0:	e78c      	b.n	4070ec <_malloc_r+0x394>
  4071d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4071d6:	d815      	bhi.n	407204 <_malloc_r+0x4ac>
  4071d8:	0bf3      	lsrs	r3, r6, #15
  4071da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4071de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4071e2:	00c3      	lsls	r3, r0, #3
  4071e4:	e5da      	b.n	406d9c <_malloc_r+0x44>
  4071e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4071ea:	e6ed      	b.n	406fc8 <_malloc_r+0x270>
  4071ec:	687b      	ldr	r3, [r7, #4]
  4071ee:	1092      	asrs	r2, r2, #2
  4071f0:	2101      	movs	r1, #1
  4071f2:	fa01 f202 	lsl.w	r2, r1, r2
  4071f6:	4313      	orrs	r3, r2
  4071f8:	607b      	str	r3, [r7, #4]
  4071fa:	4662      	mov	r2, ip
  4071fc:	e779      	b.n	4070f2 <_malloc_r+0x39a>
  4071fe:	2301      	movs	r3, #1
  407200:	6053      	str	r3, [r2, #4]
  407202:	e729      	b.n	407058 <_malloc_r+0x300>
  407204:	f240 5254 	movw	r2, #1364	; 0x554
  407208:	4293      	cmp	r3, r2
  40720a:	d822      	bhi.n	407252 <_malloc_r+0x4fa>
  40720c:	0cb3      	lsrs	r3, r6, #18
  40720e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407212:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407216:	00c3      	lsls	r3, r0, #3
  407218:	e5c0      	b.n	406d9c <_malloc_r+0x44>
  40721a:	f103 0b10 	add.w	fp, r3, #16
  40721e:	e6ae      	b.n	406f7e <_malloc_r+0x226>
  407220:	2a54      	cmp	r2, #84	; 0x54
  407222:	d829      	bhi.n	407278 <_malloc_r+0x520>
  407224:	0b1a      	lsrs	r2, r3, #12
  407226:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40722a:	00c9      	lsls	r1, r1, #3
  40722c:	326e      	adds	r2, #110	; 0x6e
  40722e:	e74d      	b.n	4070cc <_malloc_r+0x374>
  407230:	4b20      	ldr	r3, [pc, #128]	; (4072b4 <_malloc_r+0x55c>)
  407232:	6819      	ldr	r1, [r3, #0]
  407234:	4459      	add	r1, fp
  407236:	6019      	str	r1, [r3, #0]
  407238:	e6b2      	b.n	406fa0 <_malloc_r+0x248>
  40723a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40723e:	2800      	cmp	r0, #0
  407240:	f47f aeae 	bne.w	406fa0 <_malloc_r+0x248>
  407244:	eb08 030b 	add.w	r3, r8, fp
  407248:	68ba      	ldr	r2, [r7, #8]
  40724a:	f043 0301 	orr.w	r3, r3, #1
  40724e:	6053      	str	r3, [r2, #4]
  407250:	e6ee      	b.n	407030 <_malloc_r+0x2d8>
  407252:	207f      	movs	r0, #127	; 0x7f
  407254:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407258:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40725c:	e59e      	b.n	406d9c <_malloc_r+0x44>
  40725e:	f104 0108 	add.w	r1, r4, #8
  407262:	4628      	mov	r0, r5
  407264:	9300      	str	r3, [sp, #0]
  407266:	f002 ff93 	bl	40a190 <_free_r>
  40726a:	9b00      	ldr	r3, [sp, #0]
  40726c:	6819      	ldr	r1, [r3, #0]
  40726e:	e6df      	b.n	407030 <_malloc_r+0x2d8>
  407270:	2001      	movs	r0, #1
  407272:	f04f 0900 	mov.w	r9, #0
  407276:	e6bc      	b.n	406ff2 <_malloc_r+0x29a>
  407278:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40727c:	d805      	bhi.n	40728a <_malloc_r+0x532>
  40727e:	0bda      	lsrs	r2, r3, #15
  407280:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407284:	00c9      	lsls	r1, r1, #3
  407286:	3277      	adds	r2, #119	; 0x77
  407288:	e720      	b.n	4070cc <_malloc_r+0x374>
  40728a:	f240 5154 	movw	r1, #1364	; 0x554
  40728e:	428a      	cmp	r2, r1
  407290:	d805      	bhi.n	40729e <_malloc_r+0x546>
  407292:	0c9a      	lsrs	r2, r3, #18
  407294:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407298:	00c9      	lsls	r1, r1, #3
  40729a:	327c      	adds	r2, #124	; 0x7c
  40729c:	e716      	b.n	4070cc <_malloc_r+0x374>
  40729e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4072a2:	227e      	movs	r2, #126	; 0x7e
  4072a4:	e712      	b.n	4070cc <_malloc_r+0x374>
  4072a6:	687b      	ldr	r3, [r7, #4]
  4072a8:	e780      	b.n	4071ac <_malloc_r+0x454>
  4072aa:	08f0      	lsrs	r0, r6, #3
  4072ac:	f106 0308 	add.w	r3, r6, #8
  4072b0:	e600      	b.n	406eb4 <_malloc_r+0x15c>
  4072b2:	bf00      	nop
  4072b4:	20400da0 	.word	0x20400da0

004072b8 <memcpy>:
  4072b8:	4684      	mov	ip, r0
  4072ba:	ea41 0300 	orr.w	r3, r1, r0
  4072be:	f013 0303 	ands.w	r3, r3, #3
  4072c2:	d16d      	bne.n	4073a0 <memcpy+0xe8>
  4072c4:	3a40      	subs	r2, #64	; 0x40
  4072c6:	d341      	bcc.n	40734c <memcpy+0x94>
  4072c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072cc:	f840 3b04 	str.w	r3, [r0], #4
  4072d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072d4:	f840 3b04 	str.w	r3, [r0], #4
  4072d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072dc:	f840 3b04 	str.w	r3, [r0], #4
  4072e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072e4:	f840 3b04 	str.w	r3, [r0], #4
  4072e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072ec:	f840 3b04 	str.w	r3, [r0], #4
  4072f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072f4:	f840 3b04 	str.w	r3, [r0], #4
  4072f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072fc:	f840 3b04 	str.w	r3, [r0], #4
  407300:	f851 3b04 	ldr.w	r3, [r1], #4
  407304:	f840 3b04 	str.w	r3, [r0], #4
  407308:	f851 3b04 	ldr.w	r3, [r1], #4
  40730c:	f840 3b04 	str.w	r3, [r0], #4
  407310:	f851 3b04 	ldr.w	r3, [r1], #4
  407314:	f840 3b04 	str.w	r3, [r0], #4
  407318:	f851 3b04 	ldr.w	r3, [r1], #4
  40731c:	f840 3b04 	str.w	r3, [r0], #4
  407320:	f851 3b04 	ldr.w	r3, [r1], #4
  407324:	f840 3b04 	str.w	r3, [r0], #4
  407328:	f851 3b04 	ldr.w	r3, [r1], #4
  40732c:	f840 3b04 	str.w	r3, [r0], #4
  407330:	f851 3b04 	ldr.w	r3, [r1], #4
  407334:	f840 3b04 	str.w	r3, [r0], #4
  407338:	f851 3b04 	ldr.w	r3, [r1], #4
  40733c:	f840 3b04 	str.w	r3, [r0], #4
  407340:	f851 3b04 	ldr.w	r3, [r1], #4
  407344:	f840 3b04 	str.w	r3, [r0], #4
  407348:	3a40      	subs	r2, #64	; 0x40
  40734a:	d2bd      	bcs.n	4072c8 <memcpy+0x10>
  40734c:	3230      	adds	r2, #48	; 0x30
  40734e:	d311      	bcc.n	407374 <memcpy+0xbc>
  407350:	f851 3b04 	ldr.w	r3, [r1], #4
  407354:	f840 3b04 	str.w	r3, [r0], #4
  407358:	f851 3b04 	ldr.w	r3, [r1], #4
  40735c:	f840 3b04 	str.w	r3, [r0], #4
  407360:	f851 3b04 	ldr.w	r3, [r1], #4
  407364:	f840 3b04 	str.w	r3, [r0], #4
  407368:	f851 3b04 	ldr.w	r3, [r1], #4
  40736c:	f840 3b04 	str.w	r3, [r0], #4
  407370:	3a10      	subs	r2, #16
  407372:	d2ed      	bcs.n	407350 <memcpy+0x98>
  407374:	320c      	adds	r2, #12
  407376:	d305      	bcc.n	407384 <memcpy+0xcc>
  407378:	f851 3b04 	ldr.w	r3, [r1], #4
  40737c:	f840 3b04 	str.w	r3, [r0], #4
  407380:	3a04      	subs	r2, #4
  407382:	d2f9      	bcs.n	407378 <memcpy+0xc0>
  407384:	3204      	adds	r2, #4
  407386:	d008      	beq.n	40739a <memcpy+0xe2>
  407388:	07d2      	lsls	r2, r2, #31
  40738a:	bf1c      	itt	ne
  40738c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407390:	f800 3b01 	strbne.w	r3, [r0], #1
  407394:	d301      	bcc.n	40739a <memcpy+0xe2>
  407396:	880b      	ldrh	r3, [r1, #0]
  407398:	8003      	strh	r3, [r0, #0]
  40739a:	4660      	mov	r0, ip
  40739c:	4770      	bx	lr
  40739e:	bf00      	nop
  4073a0:	2a08      	cmp	r2, #8
  4073a2:	d313      	bcc.n	4073cc <memcpy+0x114>
  4073a4:	078b      	lsls	r3, r1, #30
  4073a6:	d08d      	beq.n	4072c4 <memcpy+0xc>
  4073a8:	f010 0303 	ands.w	r3, r0, #3
  4073ac:	d08a      	beq.n	4072c4 <memcpy+0xc>
  4073ae:	f1c3 0304 	rsb	r3, r3, #4
  4073b2:	1ad2      	subs	r2, r2, r3
  4073b4:	07db      	lsls	r3, r3, #31
  4073b6:	bf1c      	itt	ne
  4073b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4073bc:	f800 3b01 	strbne.w	r3, [r0], #1
  4073c0:	d380      	bcc.n	4072c4 <memcpy+0xc>
  4073c2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4073c6:	f820 3b02 	strh.w	r3, [r0], #2
  4073ca:	e77b      	b.n	4072c4 <memcpy+0xc>
  4073cc:	3a04      	subs	r2, #4
  4073ce:	d3d9      	bcc.n	407384 <memcpy+0xcc>
  4073d0:	3a01      	subs	r2, #1
  4073d2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4073d6:	f800 3b01 	strb.w	r3, [r0], #1
  4073da:	d2f9      	bcs.n	4073d0 <memcpy+0x118>
  4073dc:	780b      	ldrb	r3, [r1, #0]
  4073de:	7003      	strb	r3, [r0, #0]
  4073e0:	784b      	ldrb	r3, [r1, #1]
  4073e2:	7043      	strb	r3, [r0, #1]
  4073e4:	788b      	ldrb	r3, [r1, #2]
  4073e6:	7083      	strb	r3, [r0, #2]
  4073e8:	4660      	mov	r0, ip
  4073ea:	4770      	bx	lr

004073ec <memset>:
  4073ec:	b470      	push	{r4, r5, r6}
  4073ee:	0786      	lsls	r6, r0, #30
  4073f0:	d046      	beq.n	407480 <memset+0x94>
  4073f2:	1e54      	subs	r4, r2, #1
  4073f4:	2a00      	cmp	r2, #0
  4073f6:	d041      	beq.n	40747c <memset+0x90>
  4073f8:	b2ca      	uxtb	r2, r1
  4073fa:	4603      	mov	r3, r0
  4073fc:	e002      	b.n	407404 <memset+0x18>
  4073fe:	f114 34ff 	adds.w	r4, r4, #4294967295
  407402:	d33b      	bcc.n	40747c <memset+0x90>
  407404:	f803 2b01 	strb.w	r2, [r3], #1
  407408:	079d      	lsls	r5, r3, #30
  40740a:	d1f8      	bne.n	4073fe <memset+0x12>
  40740c:	2c03      	cmp	r4, #3
  40740e:	d92e      	bls.n	40746e <memset+0x82>
  407410:	b2cd      	uxtb	r5, r1
  407412:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407416:	2c0f      	cmp	r4, #15
  407418:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40741c:	d919      	bls.n	407452 <memset+0x66>
  40741e:	f103 0210 	add.w	r2, r3, #16
  407422:	4626      	mov	r6, r4
  407424:	3e10      	subs	r6, #16
  407426:	2e0f      	cmp	r6, #15
  407428:	f842 5c10 	str.w	r5, [r2, #-16]
  40742c:	f842 5c0c 	str.w	r5, [r2, #-12]
  407430:	f842 5c08 	str.w	r5, [r2, #-8]
  407434:	f842 5c04 	str.w	r5, [r2, #-4]
  407438:	f102 0210 	add.w	r2, r2, #16
  40743c:	d8f2      	bhi.n	407424 <memset+0x38>
  40743e:	f1a4 0210 	sub.w	r2, r4, #16
  407442:	f022 020f 	bic.w	r2, r2, #15
  407446:	f004 040f 	and.w	r4, r4, #15
  40744a:	3210      	adds	r2, #16
  40744c:	2c03      	cmp	r4, #3
  40744e:	4413      	add	r3, r2
  407450:	d90d      	bls.n	40746e <memset+0x82>
  407452:	461e      	mov	r6, r3
  407454:	4622      	mov	r2, r4
  407456:	3a04      	subs	r2, #4
  407458:	2a03      	cmp	r2, #3
  40745a:	f846 5b04 	str.w	r5, [r6], #4
  40745e:	d8fa      	bhi.n	407456 <memset+0x6a>
  407460:	1f22      	subs	r2, r4, #4
  407462:	f022 0203 	bic.w	r2, r2, #3
  407466:	3204      	adds	r2, #4
  407468:	4413      	add	r3, r2
  40746a:	f004 0403 	and.w	r4, r4, #3
  40746e:	b12c      	cbz	r4, 40747c <memset+0x90>
  407470:	b2c9      	uxtb	r1, r1
  407472:	441c      	add	r4, r3
  407474:	f803 1b01 	strb.w	r1, [r3], #1
  407478:	429c      	cmp	r4, r3
  40747a:	d1fb      	bne.n	407474 <memset+0x88>
  40747c:	bc70      	pop	{r4, r5, r6}
  40747e:	4770      	bx	lr
  407480:	4614      	mov	r4, r2
  407482:	4603      	mov	r3, r0
  407484:	e7c2      	b.n	40740c <memset+0x20>
  407486:	bf00      	nop

00407488 <__malloc_lock>:
  407488:	4801      	ldr	r0, [pc, #4]	; (407490 <__malloc_lock+0x8>)
  40748a:	f003 b91b 	b.w	40a6c4 <__retarget_lock_acquire_recursive>
  40748e:	bf00      	nop
  407490:	20400e38 	.word	0x20400e38

00407494 <__malloc_unlock>:
  407494:	4801      	ldr	r0, [pc, #4]	; (40749c <__malloc_unlock+0x8>)
  407496:	f003 b917 	b.w	40a6c8 <__retarget_lock_release_recursive>
  40749a:	bf00      	nop
  40749c:	20400e38 	.word	0x20400e38

004074a0 <printf>:
  4074a0:	b40f      	push	{r0, r1, r2, r3}
  4074a2:	b500      	push	{lr}
  4074a4:	4907      	ldr	r1, [pc, #28]	; (4074c4 <printf+0x24>)
  4074a6:	b083      	sub	sp, #12
  4074a8:	ab04      	add	r3, sp, #16
  4074aa:	6808      	ldr	r0, [r1, #0]
  4074ac:	f853 2b04 	ldr.w	r2, [r3], #4
  4074b0:	6881      	ldr	r1, [r0, #8]
  4074b2:	9301      	str	r3, [sp, #4]
  4074b4:	f000 f9b2 	bl	40781c <_vfprintf_r>
  4074b8:	b003      	add	sp, #12
  4074ba:	f85d eb04 	ldr.w	lr, [sp], #4
  4074be:	b004      	add	sp, #16
  4074c0:	4770      	bx	lr
  4074c2:	bf00      	nop
  4074c4:	20400018 	.word	0x20400018

004074c8 <_puts_r>:
  4074c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074ca:	4605      	mov	r5, r0
  4074cc:	b089      	sub	sp, #36	; 0x24
  4074ce:	4608      	mov	r0, r1
  4074d0:	460c      	mov	r4, r1
  4074d2:	f000 f935 	bl	407740 <strlen>
  4074d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4074d8:	4f21      	ldr	r7, [pc, #132]	; (407560 <_puts_r+0x98>)
  4074da:	9404      	str	r4, [sp, #16]
  4074dc:	2601      	movs	r6, #1
  4074de:	1c44      	adds	r4, r0, #1
  4074e0:	a904      	add	r1, sp, #16
  4074e2:	2202      	movs	r2, #2
  4074e4:	9403      	str	r4, [sp, #12]
  4074e6:	9005      	str	r0, [sp, #20]
  4074e8:	68ac      	ldr	r4, [r5, #8]
  4074ea:	9706      	str	r7, [sp, #24]
  4074ec:	9607      	str	r6, [sp, #28]
  4074ee:	9101      	str	r1, [sp, #4]
  4074f0:	9202      	str	r2, [sp, #8]
  4074f2:	b353      	cbz	r3, 40754a <_puts_r+0x82>
  4074f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4074f6:	f013 0f01 	tst.w	r3, #1
  4074fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074fe:	b29a      	uxth	r2, r3
  407500:	d101      	bne.n	407506 <_puts_r+0x3e>
  407502:	0590      	lsls	r0, r2, #22
  407504:	d525      	bpl.n	407552 <_puts_r+0x8a>
  407506:	0491      	lsls	r1, r2, #18
  407508:	d406      	bmi.n	407518 <_puts_r+0x50>
  40750a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40750c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  407514:	81a3      	strh	r3, [r4, #12]
  407516:	6662      	str	r2, [r4, #100]	; 0x64
  407518:	4628      	mov	r0, r5
  40751a:	aa01      	add	r2, sp, #4
  40751c:	4621      	mov	r1, r4
  40751e:	f002 ff1d 	bl	40a35c <__sfvwrite_r>
  407522:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407524:	2800      	cmp	r0, #0
  407526:	bf0c      	ite	eq
  407528:	250a      	moveq	r5, #10
  40752a:	f04f 35ff 	movne.w	r5, #4294967295
  40752e:	07da      	lsls	r2, r3, #31
  407530:	d402      	bmi.n	407538 <_puts_r+0x70>
  407532:	89a3      	ldrh	r3, [r4, #12]
  407534:	059b      	lsls	r3, r3, #22
  407536:	d502      	bpl.n	40753e <_puts_r+0x76>
  407538:	4628      	mov	r0, r5
  40753a:	b009      	add	sp, #36	; 0x24
  40753c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40753e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407540:	f003 f8c2 	bl	40a6c8 <__retarget_lock_release_recursive>
  407544:	4628      	mov	r0, r5
  407546:	b009      	add	sp, #36	; 0x24
  407548:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40754a:	4628      	mov	r0, r5
  40754c:	f002 fd7e 	bl	40a04c <__sinit>
  407550:	e7d0      	b.n	4074f4 <_puts_r+0x2c>
  407552:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407554:	f003 f8b6 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  407558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40755c:	b29a      	uxth	r2, r3
  40755e:	e7d2      	b.n	407506 <_puts_r+0x3e>
  407560:	0040c228 	.word	0x0040c228

00407564 <puts>:
  407564:	4b02      	ldr	r3, [pc, #8]	; (407570 <puts+0xc>)
  407566:	4601      	mov	r1, r0
  407568:	6818      	ldr	r0, [r3, #0]
  40756a:	f7ff bfad 	b.w	4074c8 <_puts_r>
  40756e:	bf00      	nop
  407570:	20400018 	.word	0x20400018

00407574 <_sbrk_r>:
  407574:	b538      	push	{r3, r4, r5, lr}
  407576:	4c07      	ldr	r4, [pc, #28]	; (407594 <_sbrk_r+0x20>)
  407578:	2300      	movs	r3, #0
  40757a:	4605      	mov	r5, r0
  40757c:	4608      	mov	r0, r1
  40757e:	6023      	str	r3, [r4, #0]
  407580:	f7fa fc52 	bl	401e28 <_sbrk>
  407584:	1c43      	adds	r3, r0, #1
  407586:	d000      	beq.n	40758a <_sbrk_r+0x16>
  407588:	bd38      	pop	{r3, r4, r5, pc}
  40758a:	6823      	ldr	r3, [r4, #0]
  40758c:	2b00      	cmp	r3, #0
  40758e:	d0fb      	beq.n	407588 <_sbrk_r+0x14>
  407590:	602b      	str	r3, [r5, #0]
  407592:	bd38      	pop	{r3, r4, r5, pc}
  407594:	20400e4c 	.word	0x20400e4c

00407598 <setbuf>:
  407598:	2900      	cmp	r1, #0
  40759a:	bf0c      	ite	eq
  40759c:	2202      	moveq	r2, #2
  40759e:	2200      	movne	r2, #0
  4075a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4075a4:	f000 b800 	b.w	4075a8 <setvbuf>

004075a8 <setvbuf>:
  4075a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4075ac:	4c61      	ldr	r4, [pc, #388]	; (407734 <setvbuf+0x18c>)
  4075ae:	6825      	ldr	r5, [r4, #0]
  4075b0:	b083      	sub	sp, #12
  4075b2:	4604      	mov	r4, r0
  4075b4:	460f      	mov	r7, r1
  4075b6:	4690      	mov	r8, r2
  4075b8:	461e      	mov	r6, r3
  4075ba:	b115      	cbz	r5, 4075c2 <setvbuf+0x1a>
  4075bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4075be:	2b00      	cmp	r3, #0
  4075c0:	d064      	beq.n	40768c <setvbuf+0xe4>
  4075c2:	f1b8 0f02 	cmp.w	r8, #2
  4075c6:	d006      	beq.n	4075d6 <setvbuf+0x2e>
  4075c8:	f1b8 0f01 	cmp.w	r8, #1
  4075cc:	f200 809f 	bhi.w	40770e <setvbuf+0x166>
  4075d0:	2e00      	cmp	r6, #0
  4075d2:	f2c0 809c 	blt.w	40770e <setvbuf+0x166>
  4075d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4075d8:	07d8      	lsls	r0, r3, #31
  4075da:	d534      	bpl.n	407646 <setvbuf+0x9e>
  4075dc:	4621      	mov	r1, r4
  4075de:	4628      	mov	r0, r5
  4075e0:	f002 fcdc 	bl	409f9c <_fflush_r>
  4075e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4075e6:	b141      	cbz	r1, 4075fa <setvbuf+0x52>
  4075e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4075ec:	4299      	cmp	r1, r3
  4075ee:	d002      	beq.n	4075f6 <setvbuf+0x4e>
  4075f0:	4628      	mov	r0, r5
  4075f2:	f002 fdcd 	bl	40a190 <_free_r>
  4075f6:	2300      	movs	r3, #0
  4075f8:	6323      	str	r3, [r4, #48]	; 0x30
  4075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075fe:	2200      	movs	r2, #0
  407600:	61a2      	str	r2, [r4, #24]
  407602:	6062      	str	r2, [r4, #4]
  407604:	061a      	lsls	r2, r3, #24
  407606:	d43a      	bmi.n	40767e <setvbuf+0xd6>
  407608:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40760c:	f023 0303 	bic.w	r3, r3, #3
  407610:	f1b8 0f02 	cmp.w	r8, #2
  407614:	81a3      	strh	r3, [r4, #12]
  407616:	d01d      	beq.n	407654 <setvbuf+0xac>
  407618:	ab01      	add	r3, sp, #4
  40761a:	466a      	mov	r2, sp
  40761c:	4621      	mov	r1, r4
  40761e:	4628      	mov	r0, r5
  407620:	f003 f854 	bl	40a6cc <__swhatbuf_r>
  407624:	89a3      	ldrh	r3, [r4, #12]
  407626:	4318      	orrs	r0, r3
  407628:	81a0      	strh	r0, [r4, #12]
  40762a:	2e00      	cmp	r6, #0
  40762c:	d132      	bne.n	407694 <setvbuf+0xec>
  40762e:	9e00      	ldr	r6, [sp, #0]
  407630:	4630      	mov	r0, r6
  407632:	f7ff fb81 	bl	406d38 <malloc>
  407636:	4607      	mov	r7, r0
  407638:	2800      	cmp	r0, #0
  40763a:	d06b      	beq.n	407714 <setvbuf+0x16c>
  40763c:	89a3      	ldrh	r3, [r4, #12]
  40763e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407642:	81a3      	strh	r3, [r4, #12]
  407644:	e028      	b.n	407698 <setvbuf+0xf0>
  407646:	89a3      	ldrh	r3, [r4, #12]
  407648:	0599      	lsls	r1, r3, #22
  40764a:	d4c7      	bmi.n	4075dc <setvbuf+0x34>
  40764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40764e:	f003 f839 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  407652:	e7c3      	b.n	4075dc <setvbuf+0x34>
  407654:	2500      	movs	r5, #0
  407656:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407658:	2600      	movs	r6, #0
  40765a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40765e:	f043 0302 	orr.w	r3, r3, #2
  407662:	2001      	movs	r0, #1
  407664:	60a6      	str	r6, [r4, #8]
  407666:	07ce      	lsls	r6, r1, #31
  407668:	81a3      	strh	r3, [r4, #12]
  40766a:	6022      	str	r2, [r4, #0]
  40766c:	6122      	str	r2, [r4, #16]
  40766e:	6160      	str	r0, [r4, #20]
  407670:	d401      	bmi.n	407676 <setvbuf+0xce>
  407672:	0598      	lsls	r0, r3, #22
  407674:	d53e      	bpl.n	4076f4 <setvbuf+0x14c>
  407676:	4628      	mov	r0, r5
  407678:	b003      	add	sp, #12
  40767a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40767e:	6921      	ldr	r1, [r4, #16]
  407680:	4628      	mov	r0, r5
  407682:	f002 fd85 	bl	40a190 <_free_r>
  407686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40768a:	e7bd      	b.n	407608 <setvbuf+0x60>
  40768c:	4628      	mov	r0, r5
  40768e:	f002 fcdd 	bl	40a04c <__sinit>
  407692:	e796      	b.n	4075c2 <setvbuf+0x1a>
  407694:	2f00      	cmp	r7, #0
  407696:	d0cb      	beq.n	407630 <setvbuf+0x88>
  407698:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40769a:	2b00      	cmp	r3, #0
  40769c:	d033      	beq.n	407706 <setvbuf+0x15e>
  40769e:	9b00      	ldr	r3, [sp, #0]
  4076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4076a4:	6027      	str	r7, [r4, #0]
  4076a6:	429e      	cmp	r6, r3
  4076a8:	bf1c      	itt	ne
  4076aa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4076ae:	81a2      	strhne	r2, [r4, #12]
  4076b0:	f1b8 0f01 	cmp.w	r8, #1
  4076b4:	bf04      	itt	eq
  4076b6:	f042 0201 	orreq.w	r2, r2, #1
  4076ba:	81a2      	strheq	r2, [r4, #12]
  4076bc:	b292      	uxth	r2, r2
  4076be:	f012 0308 	ands.w	r3, r2, #8
  4076c2:	6127      	str	r7, [r4, #16]
  4076c4:	6166      	str	r6, [r4, #20]
  4076c6:	d00e      	beq.n	4076e6 <setvbuf+0x13e>
  4076c8:	07d1      	lsls	r1, r2, #31
  4076ca:	d51a      	bpl.n	407702 <setvbuf+0x15a>
  4076cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4076ce:	4276      	negs	r6, r6
  4076d0:	2300      	movs	r3, #0
  4076d2:	f015 0501 	ands.w	r5, r5, #1
  4076d6:	61a6      	str	r6, [r4, #24]
  4076d8:	60a3      	str	r3, [r4, #8]
  4076da:	d009      	beq.n	4076f0 <setvbuf+0x148>
  4076dc:	2500      	movs	r5, #0
  4076de:	4628      	mov	r0, r5
  4076e0:	b003      	add	sp, #12
  4076e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4076e6:	60a3      	str	r3, [r4, #8]
  4076e8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4076ea:	f015 0501 	ands.w	r5, r5, #1
  4076ee:	d1f5      	bne.n	4076dc <setvbuf+0x134>
  4076f0:	0593      	lsls	r3, r2, #22
  4076f2:	d4c0      	bmi.n	407676 <setvbuf+0xce>
  4076f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4076f6:	f002 ffe7 	bl	40a6c8 <__retarget_lock_release_recursive>
  4076fa:	4628      	mov	r0, r5
  4076fc:	b003      	add	sp, #12
  4076fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407702:	60a6      	str	r6, [r4, #8]
  407704:	e7f0      	b.n	4076e8 <setvbuf+0x140>
  407706:	4628      	mov	r0, r5
  407708:	f002 fca0 	bl	40a04c <__sinit>
  40770c:	e7c7      	b.n	40769e <setvbuf+0xf6>
  40770e:	f04f 35ff 	mov.w	r5, #4294967295
  407712:	e7b0      	b.n	407676 <setvbuf+0xce>
  407714:	f8dd 9000 	ldr.w	r9, [sp]
  407718:	45b1      	cmp	r9, r6
  40771a:	d004      	beq.n	407726 <setvbuf+0x17e>
  40771c:	4648      	mov	r0, r9
  40771e:	f7ff fb0b 	bl	406d38 <malloc>
  407722:	4607      	mov	r7, r0
  407724:	b920      	cbnz	r0, 407730 <setvbuf+0x188>
  407726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40772a:	f04f 35ff 	mov.w	r5, #4294967295
  40772e:	e792      	b.n	407656 <setvbuf+0xae>
  407730:	464e      	mov	r6, r9
  407732:	e783      	b.n	40763c <setvbuf+0x94>
  407734:	20400018 	.word	0x20400018
	...

00407740 <strlen>:
  407740:	f890 f000 	pld	[r0]
  407744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407748:	f020 0107 	bic.w	r1, r0, #7
  40774c:	f06f 0c00 	mvn.w	ip, #0
  407750:	f010 0407 	ands.w	r4, r0, #7
  407754:	f891 f020 	pld	[r1, #32]
  407758:	f040 8049 	bne.w	4077ee <strlen+0xae>
  40775c:	f04f 0400 	mov.w	r4, #0
  407760:	f06f 0007 	mvn.w	r0, #7
  407764:	e9d1 2300 	ldrd	r2, r3, [r1]
  407768:	f891 f040 	pld	[r1, #64]	; 0x40
  40776c:	f100 0008 	add.w	r0, r0, #8
  407770:	fa82 f24c 	uadd8	r2, r2, ip
  407774:	faa4 f28c 	sel	r2, r4, ip
  407778:	fa83 f34c 	uadd8	r3, r3, ip
  40777c:	faa2 f38c 	sel	r3, r2, ip
  407780:	bb4b      	cbnz	r3, 4077d6 <strlen+0x96>
  407782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407786:	fa82 f24c 	uadd8	r2, r2, ip
  40778a:	f100 0008 	add.w	r0, r0, #8
  40778e:	faa4 f28c 	sel	r2, r4, ip
  407792:	fa83 f34c 	uadd8	r3, r3, ip
  407796:	faa2 f38c 	sel	r3, r2, ip
  40779a:	b9e3      	cbnz	r3, 4077d6 <strlen+0x96>
  40779c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4077a0:	fa82 f24c 	uadd8	r2, r2, ip
  4077a4:	f100 0008 	add.w	r0, r0, #8
  4077a8:	faa4 f28c 	sel	r2, r4, ip
  4077ac:	fa83 f34c 	uadd8	r3, r3, ip
  4077b0:	faa2 f38c 	sel	r3, r2, ip
  4077b4:	b97b      	cbnz	r3, 4077d6 <strlen+0x96>
  4077b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4077ba:	f101 0120 	add.w	r1, r1, #32
  4077be:	fa82 f24c 	uadd8	r2, r2, ip
  4077c2:	f100 0008 	add.w	r0, r0, #8
  4077c6:	faa4 f28c 	sel	r2, r4, ip
  4077ca:	fa83 f34c 	uadd8	r3, r3, ip
  4077ce:	faa2 f38c 	sel	r3, r2, ip
  4077d2:	2b00      	cmp	r3, #0
  4077d4:	d0c6      	beq.n	407764 <strlen+0x24>
  4077d6:	2a00      	cmp	r2, #0
  4077d8:	bf04      	itt	eq
  4077da:	3004      	addeq	r0, #4
  4077dc:	461a      	moveq	r2, r3
  4077de:	ba12      	rev	r2, r2
  4077e0:	fab2 f282 	clz	r2, r2
  4077e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4077e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4077ec:	4770      	bx	lr
  4077ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4077f2:	f004 0503 	and.w	r5, r4, #3
  4077f6:	f1c4 0000 	rsb	r0, r4, #0
  4077fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4077fe:	f014 0f04 	tst.w	r4, #4
  407802:	f891 f040 	pld	[r1, #64]	; 0x40
  407806:	fa0c f505 	lsl.w	r5, ip, r5
  40780a:	ea62 0205 	orn	r2, r2, r5
  40780e:	bf1c      	itt	ne
  407810:	ea63 0305 	ornne	r3, r3, r5
  407814:	4662      	movne	r2, ip
  407816:	f04f 0400 	mov.w	r4, #0
  40781a:	e7a9      	b.n	407770 <strlen+0x30>

0040781c <_vfprintf_r>:
  40781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407820:	b0c1      	sub	sp, #260	; 0x104
  407822:	461d      	mov	r5, r3
  407824:	468a      	mov	sl, r1
  407826:	4691      	mov	r9, r2
  407828:	4604      	mov	r4, r0
  40782a:	9008      	str	r0, [sp, #32]
  40782c:	f002 ff38 	bl	40a6a0 <_localeconv_r>
  407830:	6803      	ldr	r3, [r0, #0]
  407832:	9315      	str	r3, [sp, #84]	; 0x54
  407834:	4618      	mov	r0, r3
  407836:	f7ff ff83 	bl	407740 <strlen>
  40783a:	950e      	str	r5, [sp, #56]	; 0x38
  40783c:	9014      	str	r0, [sp, #80]	; 0x50
  40783e:	b11c      	cbz	r4, 407848 <_vfprintf_r+0x2c>
  407840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407842:	2b00      	cmp	r3, #0
  407844:	f000 825f 	beq.w	407d06 <_vfprintf_r+0x4ea>
  407848:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40784c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407850:	f013 0f01 	tst.w	r3, #1
  407854:	b293      	uxth	r3, r2
  407856:	d102      	bne.n	40785e <_vfprintf_r+0x42>
  407858:	0599      	lsls	r1, r3, #22
  40785a:	f140 8275 	bpl.w	407d48 <_vfprintf_r+0x52c>
  40785e:	049f      	lsls	r7, r3, #18
  407860:	d40a      	bmi.n	407878 <_vfprintf_r+0x5c>
  407862:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  407866:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40786a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40786e:	f8aa 300c 	strh.w	r3, [sl, #12]
  407872:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  407876:	b29b      	uxth	r3, r3
  407878:	071e      	lsls	r6, r3, #28
  40787a:	f140 8223 	bpl.w	407cc4 <_vfprintf_r+0x4a8>
  40787e:	f8da 2010 	ldr.w	r2, [sl, #16]
  407882:	2a00      	cmp	r2, #0
  407884:	f000 821e 	beq.w	407cc4 <_vfprintf_r+0x4a8>
  407888:	f003 021a 	and.w	r2, r3, #26
  40788c:	2a0a      	cmp	r2, #10
  40788e:	f000 823e 	beq.w	407d0e <_vfprintf_r+0x4f2>
  407892:	2300      	movs	r3, #0
  407894:	4618      	mov	r0, r3
  407896:	9311      	str	r3, [sp, #68]	; 0x44
  407898:	9313      	str	r3, [sp, #76]	; 0x4c
  40789a:	9312      	str	r3, [sp, #72]	; 0x48
  40789c:	9325      	str	r3, [sp, #148]	; 0x94
  40789e:	9324      	str	r3, [sp, #144]	; 0x90
  4078a0:	9318      	str	r3, [sp, #96]	; 0x60
  4078a2:	9319      	str	r3, [sp, #100]	; 0x64
  4078a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4078a6:	ab30      	add	r3, sp, #192	; 0xc0
  4078a8:	9323      	str	r3, [sp, #140]	; 0x8c
  4078aa:	4698      	mov	r8, r3
  4078ac:	9016      	str	r0, [sp, #88]	; 0x58
  4078ae:	9017      	str	r0, [sp, #92]	; 0x5c
  4078b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4078b4:	f899 3000 	ldrb.w	r3, [r9]
  4078b8:	464c      	mov	r4, r9
  4078ba:	b1eb      	cbz	r3, 4078f8 <_vfprintf_r+0xdc>
  4078bc:	2b25      	cmp	r3, #37	; 0x25
  4078be:	d102      	bne.n	4078c6 <_vfprintf_r+0xaa>
  4078c0:	e01a      	b.n	4078f8 <_vfprintf_r+0xdc>
  4078c2:	2b25      	cmp	r3, #37	; 0x25
  4078c4:	d003      	beq.n	4078ce <_vfprintf_r+0xb2>
  4078c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4078ca:	2b00      	cmp	r3, #0
  4078cc:	d1f9      	bne.n	4078c2 <_vfprintf_r+0xa6>
  4078ce:	eba4 0509 	sub.w	r5, r4, r9
  4078d2:	b18d      	cbz	r5, 4078f8 <_vfprintf_r+0xdc>
  4078d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4078d8:	f8c8 9000 	str.w	r9, [r8]
  4078dc:	3301      	adds	r3, #1
  4078de:	442a      	add	r2, r5
  4078e0:	2b07      	cmp	r3, #7
  4078e2:	f8c8 5004 	str.w	r5, [r8, #4]
  4078e6:	9225      	str	r2, [sp, #148]	; 0x94
  4078e8:	9324      	str	r3, [sp, #144]	; 0x90
  4078ea:	f300 8201 	bgt.w	407cf0 <_vfprintf_r+0x4d4>
  4078ee:	f108 0808 	add.w	r8, r8, #8
  4078f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4078f4:	442b      	add	r3, r5
  4078f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4078f8:	7823      	ldrb	r3, [r4, #0]
  4078fa:	2b00      	cmp	r3, #0
  4078fc:	f000 83f0 	beq.w	4080e0 <_vfprintf_r+0x8c4>
  407900:	2300      	movs	r3, #0
  407902:	461a      	mov	r2, r3
  407904:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407908:	4619      	mov	r1, r3
  40790a:	930c      	str	r3, [sp, #48]	; 0x30
  40790c:	469b      	mov	fp, r3
  40790e:	7866      	ldrb	r6, [r4, #1]
  407910:	f04f 33ff 	mov.w	r3, #4294967295
  407914:	f104 0901 	add.w	r9, r4, #1
  407918:	9309      	str	r3, [sp, #36]	; 0x24
  40791a:	f109 0901 	add.w	r9, r9, #1
  40791e:	f1a6 0320 	sub.w	r3, r6, #32
  407922:	2b58      	cmp	r3, #88	; 0x58
  407924:	f200 83bf 	bhi.w	4080a6 <_vfprintf_r+0x88a>
  407928:	e8df f013 	tbh	[pc, r3, lsl #1]
  40792c:	03bd02e0 	.word	0x03bd02e0
  407930:	034f03bd 	.word	0x034f03bd
  407934:	03bd03bd 	.word	0x03bd03bd
  407938:	03bd03bd 	.word	0x03bd03bd
  40793c:	03bd03bd 	.word	0x03bd03bd
  407940:	03080354 	.word	0x03080354
  407944:	021a03bd 	.word	0x021a03bd
  407948:	03bd02e8 	.word	0x03bd02e8
  40794c:	033a0303 	.word	0x033a0303
  407950:	033a033a 	.word	0x033a033a
  407954:	033a033a 	.word	0x033a033a
  407958:	033a033a 	.word	0x033a033a
  40795c:	033a033a 	.word	0x033a033a
  407960:	03bd03bd 	.word	0x03bd03bd
  407964:	03bd03bd 	.word	0x03bd03bd
  407968:	03bd03bd 	.word	0x03bd03bd
  40796c:	03bd03bd 	.word	0x03bd03bd
  407970:	03bd03bd 	.word	0x03bd03bd
  407974:	03620349 	.word	0x03620349
  407978:	036203bd 	.word	0x036203bd
  40797c:	03bd03bd 	.word	0x03bd03bd
  407980:	03bd03bd 	.word	0x03bd03bd
  407984:	03bd03a2 	.word	0x03bd03a2
  407988:	006f03bd 	.word	0x006f03bd
  40798c:	03bd03bd 	.word	0x03bd03bd
  407990:	03bd03bd 	.word	0x03bd03bd
  407994:	005903bd 	.word	0x005903bd
  407998:	03bd03bd 	.word	0x03bd03bd
  40799c:	03bd031e 	.word	0x03bd031e
  4079a0:	03bd03bd 	.word	0x03bd03bd
  4079a4:	03bd03bd 	.word	0x03bd03bd
  4079a8:	03bd03bd 	.word	0x03bd03bd
  4079ac:	03bd03bd 	.word	0x03bd03bd
  4079b0:	032403bd 	.word	0x032403bd
  4079b4:	03620273 	.word	0x03620273
  4079b8:	03620362 	.word	0x03620362
  4079bc:	027302b7 	.word	0x027302b7
  4079c0:	03bd03bd 	.word	0x03bd03bd
  4079c4:	03bd02bc 	.word	0x03bd02bc
  4079c8:	007102c9 	.word	0x007102c9
  4079cc:	0247030d 	.word	0x0247030d
  4079d0:	025203bd 	.word	0x025203bd
  4079d4:	005b03bd 	.word	0x005b03bd
  4079d8:	03bd03bd 	.word	0x03bd03bd
  4079dc:	021f      	.short	0x021f
  4079de:	f04b 0b10 	orr.w	fp, fp, #16
  4079e2:	f01b 0f20 	tst.w	fp, #32
  4079e6:	f040 8353 	bne.w	408090 <_vfprintf_r+0x874>
  4079ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4079ec:	f01b 0f10 	tst.w	fp, #16
  4079f0:	4613      	mov	r3, r2
  4079f2:	f040 85b4 	bne.w	40855e <_vfprintf_r+0xd42>
  4079f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4079fa:	f000 85b0 	beq.w	40855e <_vfprintf_r+0xd42>
  4079fe:	8814      	ldrh	r4, [r2, #0]
  407a00:	3204      	adds	r2, #4
  407a02:	2500      	movs	r5, #0
  407a04:	2301      	movs	r3, #1
  407a06:	920e      	str	r2, [sp, #56]	; 0x38
  407a08:	e014      	b.n	407a34 <_vfprintf_r+0x218>
  407a0a:	f04b 0b10 	orr.w	fp, fp, #16
  407a0e:	f01b 0320 	ands.w	r3, fp, #32
  407a12:	f040 8332 	bne.w	40807a <_vfprintf_r+0x85e>
  407a16:	f01b 0210 	ands.w	r2, fp, #16
  407a1a:	f040 8589 	bne.w	408530 <_vfprintf_r+0xd14>
  407a1e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407a22:	f000 8585 	beq.w	408530 <_vfprintf_r+0xd14>
  407a26:	990e      	ldr	r1, [sp, #56]	; 0x38
  407a28:	4613      	mov	r3, r2
  407a2a:	460a      	mov	r2, r1
  407a2c:	3204      	adds	r2, #4
  407a2e:	880c      	ldrh	r4, [r1, #0]
  407a30:	920e      	str	r2, [sp, #56]	; 0x38
  407a32:	2500      	movs	r5, #0
  407a34:	f04f 0a00 	mov.w	sl, #0
  407a38:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
  407a3e:	1c4a      	adds	r2, r1, #1
  407a40:	f000 820b 	beq.w	407e5a <_vfprintf_r+0x63e>
  407a44:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407a48:	9206      	str	r2, [sp, #24]
  407a4a:	ea54 0205 	orrs.w	r2, r4, r5
  407a4e:	f040 820a 	bne.w	407e66 <_vfprintf_r+0x64a>
  407a52:	2900      	cmp	r1, #0
  407a54:	f040 846f 	bne.w	408336 <_vfprintf_r+0xb1a>
  407a58:	2b00      	cmp	r3, #0
  407a5a:	f040 852d 	bne.w	4084b8 <_vfprintf_r+0xc9c>
  407a5e:	f01b 0301 	ands.w	r3, fp, #1
  407a62:	930d      	str	r3, [sp, #52]	; 0x34
  407a64:	f000 8668 	beq.w	408738 <_vfprintf_r+0xf1c>
  407a68:	af40      	add	r7, sp, #256	; 0x100
  407a6a:	2330      	movs	r3, #48	; 0x30
  407a6c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  407a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407a74:	4293      	cmp	r3, r2
  407a76:	bfb8      	it	lt
  407a78:	4613      	movlt	r3, r2
  407a7a:	9307      	str	r3, [sp, #28]
  407a7c:	2300      	movs	r3, #0
  407a7e:	9310      	str	r3, [sp, #64]	; 0x40
  407a80:	f1ba 0f00 	cmp.w	sl, #0
  407a84:	d002      	beq.n	407a8c <_vfprintf_r+0x270>
  407a86:	9b07      	ldr	r3, [sp, #28]
  407a88:	3301      	adds	r3, #1
  407a8a:	9307      	str	r3, [sp, #28]
  407a8c:	9b06      	ldr	r3, [sp, #24]
  407a8e:	f013 0302 	ands.w	r3, r3, #2
  407a92:	930f      	str	r3, [sp, #60]	; 0x3c
  407a94:	d002      	beq.n	407a9c <_vfprintf_r+0x280>
  407a96:	9b07      	ldr	r3, [sp, #28]
  407a98:	3302      	adds	r3, #2
  407a9a:	9307      	str	r3, [sp, #28]
  407a9c:	9b06      	ldr	r3, [sp, #24]
  407a9e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  407aa2:	f040 831b 	bne.w	4080dc <_vfprintf_r+0x8c0>
  407aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407aa8:	9a07      	ldr	r2, [sp, #28]
  407aaa:	eba3 0b02 	sub.w	fp, r3, r2
  407aae:	f1bb 0f00 	cmp.w	fp, #0
  407ab2:	f340 8313 	ble.w	4080dc <_vfprintf_r+0x8c0>
  407ab6:	f1bb 0f10 	cmp.w	fp, #16
  407aba:	9925      	ldr	r1, [sp, #148]	; 0x94
  407abc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407abe:	dd28      	ble.n	407b12 <_vfprintf_r+0x2f6>
  407ac0:	4643      	mov	r3, r8
  407ac2:	2410      	movs	r4, #16
  407ac4:	46a8      	mov	r8, r5
  407ac6:	f8dd a020 	ldr.w	sl, [sp, #32]
  407aca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407acc:	e006      	b.n	407adc <_vfprintf_r+0x2c0>
  407ace:	f1ab 0b10 	sub.w	fp, fp, #16
  407ad2:	f1bb 0f10 	cmp.w	fp, #16
  407ad6:	f103 0308 	add.w	r3, r3, #8
  407ada:	dd18      	ble.n	407b0e <_vfprintf_r+0x2f2>
  407adc:	3201      	adds	r2, #1
  407ade:	48b9      	ldr	r0, [pc, #740]	; (407dc4 <_vfprintf_r+0x5a8>)
  407ae0:	9224      	str	r2, [sp, #144]	; 0x90
  407ae2:	3110      	adds	r1, #16
  407ae4:	2a07      	cmp	r2, #7
  407ae6:	9125      	str	r1, [sp, #148]	; 0x94
  407ae8:	e883 0011 	stmia.w	r3, {r0, r4}
  407aec:	ddef      	ble.n	407ace <_vfprintf_r+0x2b2>
  407aee:	aa23      	add	r2, sp, #140	; 0x8c
  407af0:	4629      	mov	r1, r5
  407af2:	4650      	mov	r0, sl
  407af4:	f003 fc3c 	bl	40b370 <__sprint_r>
  407af8:	2800      	cmp	r0, #0
  407afa:	f040 836a 	bne.w	4081d2 <_vfprintf_r+0x9b6>
  407afe:	f1ab 0b10 	sub.w	fp, fp, #16
  407b02:	f1bb 0f10 	cmp.w	fp, #16
  407b06:	9925      	ldr	r1, [sp, #148]	; 0x94
  407b08:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b0a:	ab30      	add	r3, sp, #192	; 0xc0
  407b0c:	dce6      	bgt.n	407adc <_vfprintf_r+0x2c0>
  407b0e:	4645      	mov	r5, r8
  407b10:	4698      	mov	r8, r3
  407b12:	3201      	adds	r2, #1
  407b14:	4bab      	ldr	r3, [pc, #684]	; (407dc4 <_vfprintf_r+0x5a8>)
  407b16:	9224      	str	r2, [sp, #144]	; 0x90
  407b18:	eb0b 0401 	add.w	r4, fp, r1
  407b1c:	2a07      	cmp	r2, #7
  407b1e:	9425      	str	r4, [sp, #148]	; 0x94
  407b20:	e888 0808 	stmia.w	r8, {r3, fp}
  407b24:	f300 84cd 	bgt.w	4084c2 <_vfprintf_r+0xca6>
  407b28:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407b2c:	f108 0808 	add.w	r8, r8, #8
  407b30:	f1ba 0f00 	cmp.w	sl, #0
  407b34:	d00e      	beq.n	407b54 <_vfprintf_r+0x338>
  407b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b38:	3301      	adds	r3, #1
  407b3a:	3401      	adds	r4, #1
  407b3c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407b40:	2201      	movs	r2, #1
  407b42:	2b07      	cmp	r3, #7
  407b44:	9425      	str	r4, [sp, #148]	; 0x94
  407b46:	9324      	str	r3, [sp, #144]	; 0x90
  407b48:	e888 0006 	stmia.w	r8, {r1, r2}
  407b4c:	f300 840a 	bgt.w	408364 <_vfprintf_r+0xb48>
  407b50:	f108 0808 	add.w	r8, r8, #8
  407b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407b56:	b16b      	cbz	r3, 407b74 <_vfprintf_r+0x358>
  407b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b5a:	3301      	adds	r3, #1
  407b5c:	3402      	adds	r4, #2
  407b5e:	a91c      	add	r1, sp, #112	; 0x70
  407b60:	2202      	movs	r2, #2
  407b62:	2b07      	cmp	r3, #7
  407b64:	9425      	str	r4, [sp, #148]	; 0x94
  407b66:	9324      	str	r3, [sp, #144]	; 0x90
  407b68:	e888 0006 	stmia.w	r8, {r1, r2}
  407b6c:	f300 8406 	bgt.w	40837c <_vfprintf_r+0xb60>
  407b70:	f108 0808 	add.w	r8, r8, #8
  407b74:	2d80      	cmp	r5, #128	; 0x80
  407b76:	f000 832e 	beq.w	4081d6 <_vfprintf_r+0x9ba>
  407b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407b7e:	eba3 0a02 	sub.w	sl, r3, r2
  407b82:	f1ba 0f00 	cmp.w	sl, #0
  407b86:	dd3b      	ble.n	407c00 <_vfprintf_r+0x3e4>
  407b88:	f1ba 0f10 	cmp.w	sl, #16
  407b8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b8e:	4d8e      	ldr	r5, [pc, #568]	; (407dc8 <_vfprintf_r+0x5ac>)
  407b90:	dd2b      	ble.n	407bea <_vfprintf_r+0x3ce>
  407b92:	4642      	mov	r2, r8
  407b94:	4621      	mov	r1, r4
  407b96:	46b0      	mov	r8, r6
  407b98:	f04f 0b10 	mov.w	fp, #16
  407b9c:	462e      	mov	r6, r5
  407b9e:	9c08      	ldr	r4, [sp, #32]
  407ba0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407ba2:	e006      	b.n	407bb2 <_vfprintf_r+0x396>
  407ba4:	f1aa 0a10 	sub.w	sl, sl, #16
  407ba8:	f1ba 0f10 	cmp.w	sl, #16
  407bac:	f102 0208 	add.w	r2, r2, #8
  407bb0:	dd17      	ble.n	407be2 <_vfprintf_r+0x3c6>
  407bb2:	3301      	adds	r3, #1
  407bb4:	3110      	adds	r1, #16
  407bb6:	2b07      	cmp	r3, #7
  407bb8:	9125      	str	r1, [sp, #148]	; 0x94
  407bba:	9324      	str	r3, [sp, #144]	; 0x90
  407bbc:	e882 0840 	stmia.w	r2, {r6, fp}
  407bc0:	ddf0      	ble.n	407ba4 <_vfprintf_r+0x388>
  407bc2:	aa23      	add	r2, sp, #140	; 0x8c
  407bc4:	4629      	mov	r1, r5
  407bc6:	4620      	mov	r0, r4
  407bc8:	f003 fbd2 	bl	40b370 <__sprint_r>
  407bcc:	2800      	cmp	r0, #0
  407bce:	f040 8300 	bne.w	4081d2 <_vfprintf_r+0x9b6>
  407bd2:	f1aa 0a10 	sub.w	sl, sl, #16
  407bd6:	f1ba 0f10 	cmp.w	sl, #16
  407bda:	9925      	ldr	r1, [sp, #148]	; 0x94
  407bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bde:	aa30      	add	r2, sp, #192	; 0xc0
  407be0:	dce7      	bgt.n	407bb2 <_vfprintf_r+0x396>
  407be2:	4635      	mov	r5, r6
  407be4:	460c      	mov	r4, r1
  407be6:	4646      	mov	r6, r8
  407be8:	4690      	mov	r8, r2
  407bea:	3301      	adds	r3, #1
  407bec:	4454      	add	r4, sl
  407bee:	2b07      	cmp	r3, #7
  407bf0:	9425      	str	r4, [sp, #148]	; 0x94
  407bf2:	9324      	str	r3, [sp, #144]	; 0x90
  407bf4:	e888 0420 	stmia.w	r8, {r5, sl}
  407bf8:	f300 83a9 	bgt.w	40834e <_vfprintf_r+0xb32>
  407bfc:	f108 0808 	add.w	r8, r8, #8
  407c00:	9b06      	ldr	r3, [sp, #24]
  407c02:	05db      	lsls	r3, r3, #23
  407c04:	f100 8285 	bmi.w	408112 <_vfprintf_r+0x8f6>
  407c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c0a:	990d      	ldr	r1, [sp, #52]	; 0x34
  407c0c:	f8c8 7000 	str.w	r7, [r8]
  407c10:	3301      	adds	r3, #1
  407c12:	440c      	add	r4, r1
  407c14:	2b07      	cmp	r3, #7
  407c16:	9425      	str	r4, [sp, #148]	; 0x94
  407c18:	f8c8 1004 	str.w	r1, [r8, #4]
  407c1c:	9324      	str	r3, [sp, #144]	; 0x90
  407c1e:	f300 8375 	bgt.w	40830c <_vfprintf_r+0xaf0>
  407c22:	f108 0808 	add.w	r8, r8, #8
  407c26:	9b06      	ldr	r3, [sp, #24]
  407c28:	0759      	lsls	r1, r3, #29
  407c2a:	d53b      	bpl.n	407ca4 <_vfprintf_r+0x488>
  407c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407c2e:	9a07      	ldr	r2, [sp, #28]
  407c30:	1a9d      	subs	r5, r3, r2
  407c32:	2d00      	cmp	r5, #0
  407c34:	dd36      	ble.n	407ca4 <_vfprintf_r+0x488>
  407c36:	2d10      	cmp	r5, #16
  407c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c3a:	dd21      	ble.n	407c80 <_vfprintf_r+0x464>
  407c3c:	2610      	movs	r6, #16
  407c3e:	9f08      	ldr	r7, [sp, #32]
  407c40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407c44:	e004      	b.n	407c50 <_vfprintf_r+0x434>
  407c46:	3d10      	subs	r5, #16
  407c48:	2d10      	cmp	r5, #16
  407c4a:	f108 0808 	add.w	r8, r8, #8
  407c4e:	dd17      	ble.n	407c80 <_vfprintf_r+0x464>
  407c50:	3301      	adds	r3, #1
  407c52:	4a5c      	ldr	r2, [pc, #368]	; (407dc4 <_vfprintf_r+0x5a8>)
  407c54:	9324      	str	r3, [sp, #144]	; 0x90
  407c56:	3410      	adds	r4, #16
  407c58:	2b07      	cmp	r3, #7
  407c5a:	9425      	str	r4, [sp, #148]	; 0x94
  407c5c:	e888 0044 	stmia.w	r8, {r2, r6}
  407c60:	ddf1      	ble.n	407c46 <_vfprintf_r+0x42a>
  407c62:	aa23      	add	r2, sp, #140	; 0x8c
  407c64:	4651      	mov	r1, sl
  407c66:	4638      	mov	r0, r7
  407c68:	f003 fb82 	bl	40b370 <__sprint_r>
  407c6c:	2800      	cmp	r0, #0
  407c6e:	f040 823f 	bne.w	4080f0 <_vfprintf_r+0x8d4>
  407c72:	3d10      	subs	r5, #16
  407c74:	2d10      	cmp	r5, #16
  407c76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407c78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407c7e:	dce7      	bgt.n	407c50 <_vfprintf_r+0x434>
  407c80:	3301      	adds	r3, #1
  407c82:	4a50      	ldr	r2, [pc, #320]	; (407dc4 <_vfprintf_r+0x5a8>)
  407c84:	9324      	str	r3, [sp, #144]	; 0x90
  407c86:	442c      	add	r4, r5
  407c88:	2b07      	cmp	r3, #7
  407c8a:	9425      	str	r4, [sp, #148]	; 0x94
  407c8c:	e888 0024 	stmia.w	r8, {r2, r5}
  407c90:	dd08      	ble.n	407ca4 <_vfprintf_r+0x488>
  407c92:	aa23      	add	r2, sp, #140	; 0x8c
  407c94:	990a      	ldr	r1, [sp, #40]	; 0x28
  407c96:	9808      	ldr	r0, [sp, #32]
  407c98:	f003 fb6a 	bl	40b370 <__sprint_r>
  407c9c:	2800      	cmp	r0, #0
  407c9e:	f040 8347 	bne.w	408330 <_vfprintf_r+0xb14>
  407ca2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407ca8:	9907      	ldr	r1, [sp, #28]
  407caa:	428a      	cmp	r2, r1
  407cac:	bfac      	ite	ge
  407cae:	189b      	addge	r3, r3, r2
  407cb0:	185b      	addlt	r3, r3, r1
  407cb2:	930b      	str	r3, [sp, #44]	; 0x2c
  407cb4:	2c00      	cmp	r4, #0
  407cb6:	f040 8333 	bne.w	408320 <_vfprintf_r+0xb04>
  407cba:	2300      	movs	r3, #0
  407cbc:	9324      	str	r3, [sp, #144]	; 0x90
  407cbe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407cc2:	e5f7      	b.n	4078b4 <_vfprintf_r+0x98>
  407cc4:	4651      	mov	r1, sl
  407cc6:	9808      	ldr	r0, [sp, #32]
  407cc8:	f001 f896 	bl	408df8 <__swsetup_r>
  407ccc:	2800      	cmp	r0, #0
  407cce:	d038      	beq.n	407d42 <_vfprintf_r+0x526>
  407cd0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  407cd4:	07dd      	lsls	r5, r3, #31
  407cd6:	d404      	bmi.n	407ce2 <_vfprintf_r+0x4c6>
  407cd8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407cdc:	059c      	lsls	r4, r3, #22
  407cde:	f140 85ca 	bpl.w	408876 <_vfprintf_r+0x105a>
  407ce2:	f04f 33ff 	mov.w	r3, #4294967295
  407ce6:	930b      	str	r3, [sp, #44]	; 0x2c
  407ce8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407cea:	b041      	add	sp, #260	; 0x104
  407cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cf0:	aa23      	add	r2, sp, #140	; 0x8c
  407cf2:	990a      	ldr	r1, [sp, #40]	; 0x28
  407cf4:	9808      	ldr	r0, [sp, #32]
  407cf6:	f003 fb3b 	bl	40b370 <__sprint_r>
  407cfa:	2800      	cmp	r0, #0
  407cfc:	f040 8318 	bne.w	408330 <_vfprintf_r+0xb14>
  407d00:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407d04:	e5f5      	b.n	4078f2 <_vfprintf_r+0xd6>
  407d06:	9808      	ldr	r0, [sp, #32]
  407d08:	f002 f9a0 	bl	40a04c <__sinit>
  407d0c:	e59c      	b.n	407848 <_vfprintf_r+0x2c>
  407d0e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  407d12:	2a00      	cmp	r2, #0
  407d14:	f6ff adbd 	blt.w	407892 <_vfprintf_r+0x76>
  407d18:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  407d1c:	07d0      	lsls	r0, r2, #31
  407d1e:	d405      	bmi.n	407d2c <_vfprintf_r+0x510>
  407d20:	0599      	lsls	r1, r3, #22
  407d22:	d403      	bmi.n	407d2c <_vfprintf_r+0x510>
  407d24:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407d28:	f002 fcce 	bl	40a6c8 <__retarget_lock_release_recursive>
  407d2c:	462b      	mov	r3, r5
  407d2e:	464a      	mov	r2, r9
  407d30:	4651      	mov	r1, sl
  407d32:	9808      	ldr	r0, [sp, #32]
  407d34:	f001 f81e 	bl	408d74 <__sbprintf>
  407d38:	900b      	str	r0, [sp, #44]	; 0x2c
  407d3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407d3c:	b041      	add	sp, #260	; 0x104
  407d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d42:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407d46:	e59f      	b.n	407888 <_vfprintf_r+0x6c>
  407d48:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407d4c:	f002 fcba 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  407d50:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407d54:	b293      	uxth	r3, r2
  407d56:	e582      	b.n	40785e <_vfprintf_r+0x42>
  407d58:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d5a:	930e      	str	r3, [sp, #56]	; 0x38
  407d5c:	4240      	negs	r0, r0
  407d5e:	900c      	str	r0, [sp, #48]	; 0x30
  407d60:	f04b 0b04 	orr.w	fp, fp, #4
  407d64:	f899 6000 	ldrb.w	r6, [r9]
  407d68:	e5d7      	b.n	40791a <_vfprintf_r+0xfe>
  407d6a:	2a00      	cmp	r2, #0
  407d6c:	f040 87df 	bne.w	408d2e <_vfprintf_r+0x1512>
  407d70:	4b16      	ldr	r3, [pc, #88]	; (407dcc <_vfprintf_r+0x5b0>)
  407d72:	9318      	str	r3, [sp, #96]	; 0x60
  407d74:	f01b 0f20 	tst.w	fp, #32
  407d78:	f040 84b9 	bne.w	4086ee <_vfprintf_r+0xed2>
  407d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407d7e:	f01b 0f10 	tst.w	fp, #16
  407d82:	4613      	mov	r3, r2
  407d84:	f040 83dc 	bne.w	408540 <_vfprintf_r+0xd24>
  407d88:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407d8c:	f000 83d8 	beq.w	408540 <_vfprintf_r+0xd24>
  407d90:	3304      	adds	r3, #4
  407d92:	8814      	ldrh	r4, [r2, #0]
  407d94:	930e      	str	r3, [sp, #56]	; 0x38
  407d96:	2500      	movs	r5, #0
  407d98:	f01b 0f01 	tst.w	fp, #1
  407d9c:	f000 8322 	beq.w	4083e4 <_vfprintf_r+0xbc8>
  407da0:	ea54 0305 	orrs.w	r3, r4, r5
  407da4:	f000 831e 	beq.w	4083e4 <_vfprintf_r+0xbc8>
  407da8:	2330      	movs	r3, #48	; 0x30
  407daa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407dae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407db2:	f04b 0b02 	orr.w	fp, fp, #2
  407db6:	2302      	movs	r3, #2
  407db8:	e63c      	b.n	407a34 <_vfprintf_r+0x218>
  407dba:	f04b 0b20 	orr.w	fp, fp, #32
  407dbe:	f899 6000 	ldrb.w	r6, [r9]
  407dc2:	e5aa      	b.n	40791a <_vfprintf_r+0xfe>
  407dc4:	0040c270 	.word	0x0040c270
  407dc8:	0040c280 	.word	0x0040c280
  407dcc:	0040c250 	.word	0x0040c250
  407dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407dd2:	6817      	ldr	r7, [r2, #0]
  407dd4:	2400      	movs	r4, #0
  407dd6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  407dda:	1d15      	adds	r5, r2, #4
  407ddc:	2f00      	cmp	r7, #0
  407dde:	f000 864e 	beq.w	408a7e <_vfprintf_r+0x1262>
  407de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407de4:	1c53      	adds	r3, r2, #1
  407de6:	f000 85cc 	beq.w	408982 <_vfprintf_r+0x1166>
  407dea:	4621      	mov	r1, r4
  407dec:	4638      	mov	r0, r7
  407dee:	f002 fce7 	bl	40a7c0 <memchr>
  407df2:	2800      	cmp	r0, #0
  407df4:	f000 8697 	beq.w	408b26 <_vfprintf_r+0x130a>
  407df8:	1bc3      	subs	r3, r0, r7
  407dfa:	930d      	str	r3, [sp, #52]	; 0x34
  407dfc:	9409      	str	r4, [sp, #36]	; 0x24
  407dfe:	950e      	str	r5, [sp, #56]	; 0x38
  407e00:	f8cd b018 	str.w	fp, [sp, #24]
  407e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407e08:	9307      	str	r3, [sp, #28]
  407e0a:	9410      	str	r4, [sp, #64]	; 0x40
  407e0c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407e10:	e636      	b.n	407a80 <_vfprintf_r+0x264>
  407e12:	2a00      	cmp	r2, #0
  407e14:	f040 8796 	bne.w	408d44 <_vfprintf_r+0x1528>
  407e18:	f01b 0f20 	tst.w	fp, #32
  407e1c:	f040 845a 	bne.w	4086d4 <_vfprintf_r+0xeb8>
  407e20:	f01b 0f10 	tst.w	fp, #16
  407e24:	f040 83a2 	bne.w	40856c <_vfprintf_r+0xd50>
  407e28:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407e2c:	f000 839e 	beq.w	40856c <_vfprintf_r+0xd50>
  407e30:	990e      	ldr	r1, [sp, #56]	; 0x38
  407e32:	f9b1 4000 	ldrsh.w	r4, [r1]
  407e36:	3104      	adds	r1, #4
  407e38:	17e5      	asrs	r5, r4, #31
  407e3a:	4622      	mov	r2, r4
  407e3c:	462b      	mov	r3, r5
  407e3e:	910e      	str	r1, [sp, #56]	; 0x38
  407e40:	2a00      	cmp	r2, #0
  407e42:	f173 0300 	sbcs.w	r3, r3, #0
  407e46:	f2c0 8487 	blt.w	408758 <_vfprintf_r+0xf3c>
  407e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  407e4c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407e50:	1c4a      	adds	r2, r1, #1
  407e52:	f04f 0301 	mov.w	r3, #1
  407e56:	f47f adf5 	bne.w	407a44 <_vfprintf_r+0x228>
  407e5a:	ea54 0205 	orrs.w	r2, r4, r5
  407e5e:	f000 826c 	beq.w	40833a <_vfprintf_r+0xb1e>
  407e62:	f8cd b018 	str.w	fp, [sp, #24]
  407e66:	2b01      	cmp	r3, #1
  407e68:	f000 8308 	beq.w	40847c <_vfprintf_r+0xc60>
  407e6c:	2b02      	cmp	r3, #2
  407e6e:	f040 8295 	bne.w	40839c <_vfprintf_r+0xb80>
  407e72:	9818      	ldr	r0, [sp, #96]	; 0x60
  407e74:	af30      	add	r7, sp, #192	; 0xc0
  407e76:	0923      	lsrs	r3, r4, #4
  407e78:	f004 010f 	and.w	r1, r4, #15
  407e7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407e80:	092a      	lsrs	r2, r5, #4
  407e82:	461c      	mov	r4, r3
  407e84:	4615      	mov	r5, r2
  407e86:	5c43      	ldrb	r3, [r0, r1]
  407e88:	f807 3d01 	strb.w	r3, [r7, #-1]!
  407e8c:	ea54 0305 	orrs.w	r3, r4, r5
  407e90:	d1f1      	bne.n	407e76 <_vfprintf_r+0x65a>
  407e92:	ab30      	add	r3, sp, #192	; 0xc0
  407e94:	1bdb      	subs	r3, r3, r7
  407e96:	930d      	str	r3, [sp, #52]	; 0x34
  407e98:	e5ea      	b.n	407a70 <_vfprintf_r+0x254>
  407e9a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407e9e:	f899 6000 	ldrb.w	r6, [r9]
  407ea2:	e53a      	b.n	40791a <_vfprintf_r+0xfe>
  407ea4:	f899 6000 	ldrb.w	r6, [r9]
  407ea8:	2e6c      	cmp	r6, #108	; 0x6c
  407eaa:	bf03      	ittte	eq
  407eac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  407eb0:	f04b 0b20 	orreq.w	fp, fp, #32
  407eb4:	f109 0901 	addeq.w	r9, r9, #1
  407eb8:	f04b 0b10 	orrne.w	fp, fp, #16
  407ebc:	e52d      	b.n	40791a <_vfprintf_r+0xfe>
  407ebe:	2a00      	cmp	r2, #0
  407ec0:	f040 874c 	bne.w	408d5c <_vfprintf_r+0x1540>
  407ec4:	f01b 0f20 	tst.w	fp, #32
  407ec8:	f040 853f 	bne.w	40894a <_vfprintf_r+0x112e>
  407ecc:	f01b 0f10 	tst.w	fp, #16
  407ed0:	f040 80fc 	bne.w	4080cc <_vfprintf_r+0x8b0>
  407ed4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407ed8:	f000 80f8 	beq.w	4080cc <_vfprintf_r+0x8b0>
  407edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407ede:	6813      	ldr	r3, [r2, #0]
  407ee0:	3204      	adds	r2, #4
  407ee2:	920e      	str	r2, [sp, #56]	; 0x38
  407ee4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  407ee8:	801a      	strh	r2, [r3, #0]
  407eea:	e4e3      	b.n	4078b4 <_vfprintf_r+0x98>
  407eec:	f899 6000 	ldrb.w	r6, [r9]
  407ef0:	2900      	cmp	r1, #0
  407ef2:	f47f ad12 	bne.w	40791a <_vfprintf_r+0xfe>
  407ef6:	2201      	movs	r2, #1
  407ef8:	2120      	movs	r1, #32
  407efa:	e50e      	b.n	40791a <_vfprintf_r+0xfe>
  407efc:	f899 6000 	ldrb.w	r6, [r9]
  407f00:	2e2a      	cmp	r6, #42	; 0x2a
  407f02:	f109 0001 	add.w	r0, r9, #1
  407f06:	f000 86f1 	beq.w	408cec <_vfprintf_r+0x14d0>
  407f0a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407f0e:	2b09      	cmp	r3, #9
  407f10:	4681      	mov	r9, r0
  407f12:	bf98      	it	ls
  407f14:	2000      	movls	r0, #0
  407f16:	f200 863d 	bhi.w	408b94 <_vfprintf_r+0x1378>
  407f1a:	f819 6b01 	ldrb.w	r6, [r9], #1
  407f1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407f22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407f2a:	2b09      	cmp	r3, #9
  407f2c:	d9f5      	bls.n	407f1a <_vfprintf_r+0x6fe>
  407f2e:	9009      	str	r0, [sp, #36]	; 0x24
  407f30:	e4f5      	b.n	40791e <_vfprintf_r+0x102>
  407f32:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407f36:	f899 6000 	ldrb.w	r6, [r9]
  407f3a:	e4ee      	b.n	40791a <_vfprintf_r+0xfe>
  407f3c:	f899 6000 	ldrb.w	r6, [r9]
  407f40:	2201      	movs	r2, #1
  407f42:	212b      	movs	r1, #43	; 0x2b
  407f44:	e4e9      	b.n	40791a <_vfprintf_r+0xfe>
  407f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f48:	4bae      	ldr	r3, [pc, #696]	; (408204 <_vfprintf_r+0x9e8>)
  407f4a:	6814      	ldr	r4, [r2, #0]
  407f4c:	9318      	str	r3, [sp, #96]	; 0x60
  407f4e:	2678      	movs	r6, #120	; 0x78
  407f50:	2330      	movs	r3, #48	; 0x30
  407f52:	3204      	adds	r2, #4
  407f54:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407f58:	f04b 0b02 	orr.w	fp, fp, #2
  407f5c:	920e      	str	r2, [sp, #56]	; 0x38
  407f5e:	2500      	movs	r5, #0
  407f60:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407f64:	2302      	movs	r3, #2
  407f66:	e565      	b.n	407a34 <_vfprintf_r+0x218>
  407f68:	2a00      	cmp	r2, #0
  407f6a:	f040 86e4 	bne.w	408d36 <_vfprintf_r+0x151a>
  407f6e:	4ba6      	ldr	r3, [pc, #664]	; (408208 <_vfprintf_r+0x9ec>)
  407f70:	9318      	str	r3, [sp, #96]	; 0x60
  407f72:	e6ff      	b.n	407d74 <_vfprintf_r+0x558>
  407f74:	990e      	ldr	r1, [sp, #56]	; 0x38
  407f76:	f8cd b018 	str.w	fp, [sp, #24]
  407f7a:	680a      	ldr	r2, [r1, #0]
  407f7c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  407f80:	2300      	movs	r3, #0
  407f82:	460a      	mov	r2, r1
  407f84:	469a      	mov	sl, r3
  407f86:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407f8a:	3204      	adds	r2, #4
  407f8c:	2301      	movs	r3, #1
  407f8e:	9307      	str	r3, [sp, #28]
  407f90:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  407f94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  407f98:	920e      	str	r2, [sp, #56]	; 0x38
  407f9a:	930d      	str	r3, [sp, #52]	; 0x34
  407f9c:	af26      	add	r7, sp, #152	; 0x98
  407f9e:	e575      	b.n	407a8c <_vfprintf_r+0x270>
  407fa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407fa4:	2000      	movs	r0, #0
  407fa6:	f819 6b01 	ldrb.w	r6, [r9], #1
  407faa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407fae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407fb2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407fb6:	2b09      	cmp	r3, #9
  407fb8:	d9f5      	bls.n	407fa6 <_vfprintf_r+0x78a>
  407fba:	900c      	str	r0, [sp, #48]	; 0x30
  407fbc:	e4af      	b.n	40791e <_vfprintf_r+0x102>
  407fbe:	2a00      	cmp	r2, #0
  407fc0:	f040 86c8 	bne.w	408d54 <_vfprintf_r+0x1538>
  407fc4:	f04b 0b10 	orr.w	fp, fp, #16
  407fc8:	e726      	b.n	407e18 <_vfprintf_r+0x5fc>
  407fca:	f04b 0b01 	orr.w	fp, fp, #1
  407fce:	f899 6000 	ldrb.w	r6, [r9]
  407fd2:	e4a2      	b.n	40791a <_vfprintf_r+0xfe>
  407fd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  407fd6:	6823      	ldr	r3, [r4, #0]
  407fd8:	930c      	str	r3, [sp, #48]	; 0x30
  407fda:	4618      	mov	r0, r3
  407fdc:	2800      	cmp	r0, #0
  407fde:	4623      	mov	r3, r4
  407fe0:	f103 0304 	add.w	r3, r3, #4
  407fe4:	f6ff aeb8 	blt.w	407d58 <_vfprintf_r+0x53c>
  407fe8:	930e      	str	r3, [sp, #56]	; 0x38
  407fea:	f899 6000 	ldrb.w	r6, [r9]
  407fee:	e494      	b.n	40791a <_vfprintf_r+0xfe>
  407ff0:	2a00      	cmp	r2, #0
  407ff2:	f040 86b7 	bne.w	408d64 <_vfprintf_r+0x1548>
  407ff6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407ff8:	3507      	adds	r5, #7
  407ffa:	f025 0307 	bic.w	r3, r5, #7
  407ffe:	f103 0208 	add.w	r2, r3, #8
  408002:	920e      	str	r2, [sp, #56]	; 0x38
  408004:	681a      	ldr	r2, [r3, #0]
  408006:	9213      	str	r2, [sp, #76]	; 0x4c
  408008:	685b      	ldr	r3, [r3, #4]
  40800a:	9312      	str	r3, [sp, #72]	; 0x48
  40800c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40800e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  408010:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408014:	4628      	mov	r0, r5
  408016:	4621      	mov	r1, r4
  408018:	f04f 32ff 	mov.w	r2, #4294967295
  40801c:	4b7b      	ldr	r3, [pc, #492]	; (40820c <_vfprintf_r+0x9f0>)
  40801e:	f7fe fae7 	bl	4065f0 <__aeabi_dcmpun>
  408022:	2800      	cmp	r0, #0
  408024:	f040 83a2 	bne.w	40876c <_vfprintf_r+0xf50>
  408028:	4628      	mov	r0, r5
  40802a:	4621      	mov	r1, r4
  40802c:	f04f 32ff 	mov.w	r2, #4294967295
  408030:	4b76      	ldr	r3, [pc, #472]	; (40820c <_vfprintf_r+0x9f0>)
  408032:	f7fe fabf 	bl	4065b4 <__aeabi_dcmple>
  408036:	2800      	cmp	r0, #0
  408038:	f040 8398 	bne.w	40876c <_vfprintf_r+0xf50>
  40803c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40803e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408042:	9912      	ldr	r1, [sp, #72]	; 0x48
  408044:	f7fe faac 	bl	4065a0 <__aeabi_dcmplt>
  408048:	2800      	cmp	r0, #0
  40804a:	f040 8435 	bne.w	4088b8 <_vfprintf_r+0x109c>
  40804e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408052:	4f6f      	ldr	r7, [pc, #444]	; (408210 <_vfprintf_r+0x9f4>)
  408054:	4b6f      	ldr	r3, [pc, #444]	; (408214 <_vfprintf_r+0x9f8>)
  408056:	2203      	movs	r2, #3
  408058:	2100      	movs	r1, #0
  40805a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40805e:	9207      	str	r2, [sp, #28]
  408060:	9109      	str	r1, [sp, #36]	; 0x24
  408062:	9006      	str	r0, [sp, #24]
  408064:	2e47      	cmp	r6, #71	; 0x47
  408066:	bfd8      	it	le
  408068:	461f      	movle	r7, r3
  40806a:	920d      	str	r2, [sp, #52]	; 0x34
  40806c:	9110      	str	r1, [sp, #64]	; 0x40
  40806e:	e507      	b.n	407a80 <_vfprintf_r+0x264>
  408070:	f04b 0b08 	orr.w	fp, fp, #8
  408074:	f899 6000 	ldrb.w	r6, [r9]
  408078:	e44f      	b.n	40791a <_vfprintf_r+0xfe>
  40807a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40807c:	3507      	adds	r5, #7
  40807e:	f025 0307 	bic.w	r3, r5, #7
  408082:	f103 0208 	add.w	r2, r3, #8
  408086:	e9d3 4500 	ldrd	r4, r5, [r3]
  40808a:	920e      	str	r2, [sp, #56]	; 0x38
  40808c:	2300      	movs	r3, #0
  40808e:	e4d1      	b.n	407a34 <_vfprintf_r+0x218>
  408090:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408092:	3507      	adds	r5, #7
  408094:	f025 0307 	bic.w	r3, r5, #7
  408098:	f103 0208 	add.w	r2, r3, #8
  40809c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4080a0:	920e      	str	r2, [sp, #56]	; 0x38
  4080a2:	2301      	movs	r3, #1
  4080a4:	e4c6      	b.n	407a34 <_vfprintf_r+0x218>
  4080a6:	2a00      	cmp	r2, #0
  4080a8:	f040 8650 	bne.w	408d4c <_vfprintf_r+0x1530>
  4080ac:	b1c6      	cbz	r6, 4080e0 <_vfprintf_r+0x8c4>
  4080ae:	2300      	movs	r3, #0
  4080b0:	2201      	movs	r2, #1
  4080b2:	469a      	mov	sl, r3
  4080b4:	9207      	str	r2, [sp, #28]
  4080b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4080ba:	f8cd b018 	str.w	fp, [sp, #24]
  4080be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4080c2:	9309      	str	r3, [sp, #36]	; 0x24
  4080c4:	9310      	str	r3, [sp, #64]	; 0x40
  4080c6:	920d      	str	r2, [sp, #52]	; 0x34
  4080c8:	af26      	add	r7, sp, #152	; 0x98
  4080ca:	e4df      	b.n	407a8c <_vfprintf_r+0x270>
  4080cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4080ce:	6813      	ldr	r3, [r2, #0]
  4080d0:	3204      	adds	r2, #4
  4080d2:	920e      	str	r2, [sp, #56]	; 0x38
  4080d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4080d6:	601a      	str	r2, [r3, #0]
  4080d8:	f7ff bbec 	b.w	4078b4 <_vfprintf_r+0x98>
  4080dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4080de:	e527      	b.n	407b30 <_vfprintf_r+0x314>
  4080e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4080e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4080e6:	2b00      	cmp	r3, #0
  4080e8:	f040 8594 	bne.w	408c14 <_vfprintf_r+0x13f8>
  4080ec:	2300      	movs	r3, #0
  4080ee:	9324      	str	r3, [sp, #144]	; 0x90
  4080f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4080f4:	f013 0f01 	tst.w	r3, #1
  4080f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4080fc:	d102      	bne.n	408104 <_vfprintf_r+0x8e8>
  4080fe:	059a      	lsls	r2, r3, #22
  408100:	f140 8249 	bpl.w	408596 <_vfprintf_r+0xd7a>
  408104:	065b      	lsls	r3, r3, #25
  408106:	f53f adec 	bmi.w	407ce2 <_vfprintf_r+0x4c6>
  40810a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40810c:	b041      	add	sp, #260	; 0x104
  40810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408112:	2e65      	cmp	r6, #101	; 0x65
  408114:	f340 80b2 	ble.w	40827c <_vfprintf_r+0xa60>
  408118:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40811a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40811c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40811e:	9912      	ldr	r1, [sp, #72]	; 0x48
  408120:	f7fe fa34 	bl	40658c <__aeabi_dcmpeq>
  408124:	2800      	cmp	r0, #0
  408126:	f000 8160 	beq.w	4083ea <_vfprintf_r+0xbce>
  40812a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40812c:	4a3a      	ldr	r2, [pc, #232]	; (408218 <_vfprintf_r+0x9fc>)
  40812e:	f8c8 2000 	str.w	r2, [r8]
  408132:	3301      	adds	r3, #1
  408134:	3401      	adds	r4, #1
  408136:	2201      	movs	r2, #1
  408138:	2b07      	cmp	r3, #7
  40813a:	9425      	str	r4, [sp, #148]	; 0x94
  40813c:	9324      	str	r3, [sp, #144]	; 0x90
  40813e:	f8c8 2004 	str.w	r2, [r8, #4]
  408142:	f300 83bf 	bgt.w	4088c4 <_vfprintf_r+0x10a8>
  408146:	f108 0808 	add.w	r8, r8, #8
  40814a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40814c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40814e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408150:	4293      	cmp	r3, r2
  408152:	db03      	blt.n	40815c <_vfprintf_r+0x940>
  408154:	9b06      	ldr	r3, [sp, #24]
  408156:	07df      	lsls	r7, r3, #31
  408158:	f57f ad65 	bpl.w	407c26 <_vfprintf_r+0x40a>
  40815c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40815e:	9914      	ldr	r1, [sp, #80]	; 0x50
  408160:	9a15      	ldr	r2, [sp, #84]	; 0x54
  408162:	f8c8 2000 	str.w	r2, [r8]
  408166:	3301      	adds	r3, #1
  408168:	440c      	add	r4, r1
  40816a:	2b07      	cmp	r3, #7
  40816c:	f8c8 1004 	str.w	r1, [r8, #4]
  408170:	9425      	str	r4, [sp, #148]	; 0x94
  408172:	9324      	str	r3, [sp, #144]	; 0x90
  408174:	f300 83f8 	bgt.w	408968 <_vfprintf_r+0x114c>
  408178:	f108 0808 	add.w	r8, r8, #8
  40817c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40817e:	1e5e      	subs	r6, r3, #1
  408180:	2e00      	cmp	r6, #0
  408182:	f77f ad50 	ble.w	407c26 <_vfprintf_r+0x40a>
  408186:	2e10      	cmp	r6, #16
  408188:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40818a:	4d24      	ldr	r5, [pc, #144]	; (40821c <_vfprintf_r+0xa00>)
  40818c:	f340 81dd 	ble.w	40854a <_vfprintf_r+0xd2e>
  408190:	2710      	movs	r7, #16
  408192:	f8dd a020 	ldr.w	sl, [sp, #32]
  408196:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40819a:	e005      	b.n	4081a8 <_vfprintf_r+0x98c>
  40819c:	f108 0808 	add.w	r8, r8, #8
  4081a0:	3e10      	subs	r6, #16
  4081a2:	2e10      	cmp	r6, #16
  4081a4:	f340 81d1 	ble.w	40854a <_vfprintf_r+0xd2e>
  4081a8:	3301      	adds	r3, #1
  4081aa:	3410      	adds	r4, #16
  4081ac:	2b07      	cmp	r3, #7
  4081ae:	9425      	str	r4, [sp, #148]	; 0x94
  4081b0:	9324      	str	r3, [sp, #144]	; 0x90
  4081b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4081b6:	ddf1      	ble.n	40819c <_vfprintf_r+0x980>
  4081b8:	aa23      	add	r2, sp, #140	; 0x8c
  4081ba:	4659      	mov	r1, fp
  4081bc:	4650      	mov	r0, sl
  4081be:	f003 f8d7 	bl	40b370 <__sprint_r>
  4081c2:	2800      	cmp	r0, #0
  4081c4:	f040 83cd 	bne.w	408962 <_vfprintf_r+0x1146>
  4081c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4081ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4081d0:	e7e6      	b.n	4081a0 <_vfprintf_r+0x984>
  4081d2:	46aa      	mov	sl, r5
  4081d4:	e78c      	b.n	4080f0 <_vfprintf_r+0x8d4>
  4081d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4081d8:	9a07      	ldr	r2, [sp, #28]
  4081da:	eba3 0a02 	sub.w	sl, r3, r2
  4081de:	f1ba 0f00 	cmp.w	sl, #0
  4081e2:	f77f acca 	ble.w	407b7a <_vfprintf_r+0x35e>
  4081e6:	f1ba 0f10 	cmp.w	sl, #16
  4081ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081ec:	4d0b      	ldr	r5, [pc, #44]	; (40821c <_vfprintf_r+0xa00>)
  4081ee:	dd39      	ble.n	408264 <_vfprintf_r+0xa48>
  4081f0:	4642      	mov	r2, r8
  4081f2:	4621      	mov	r1, r4
  4081f4:	46b0      	mov	r8, r6
  4081f6:	f04f 0b10 	mov.w	fp, #16
  4081fa:	462e      	mov	r6, r5
  4081fc:	9c08      	ldr	r4, [sp, #32]
  4081fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408200:	e015      	b.n	40822e <_vfprintf_r+0xa12>
  408202:	bf00      	nop
  408204:	0040c250 	.word	0x0040c250
  408208:	0040c23c 	.word	0x0040c23c
  40820c:	7fefffff 	.word	0x7fefffff
  408210:	0040c230 	.word	0x0040c230
  408214:	0040c22c 	.word	0x0040c22c
  408218:	0040c26c 	.word	0x0040c26c
  40821c:	0040c280 	.word	0x0040c280
  408220:	f1aa 0a10 	sub.w	sl, sl, #16
  408224:	f1ba 0f10 	cmp.w	sl, #16
  408228:	f102 0208 	add.w	r2, r2, #8
  40822c:	dd16      	ble.n	40825c <_vfprintf_r+0xa40>
  40822e:	3301      	adds	r3, #1
  408230:	3110      	adds	r1, #16
  408232:	2b07      	cmp	r3, #7
  408234:	9125      	str	r1, [sp, #148]	; 0x94
  408236:	9324      	str	r3, [sp, #144]	; 0x90
  408238:	e882 0840 	stmia.w	r2, {r6, fp}
  40823c:	ddf0      	ble.n	408220 <_vfprintf_r+0xa04>
  40823e:	aa23      	add	r2, sp, #140	; 0x8c
  408240:	4629      	mov	r1, r5
  408242:	4620      	mov	r0, r4
  408244:	f003 f894 	bl	40b370 <__sprint_r>
  408248:	2800      	cmp	r0, #0
  40824a:	d1c2      	bne.n	4081d2 <_vfprintf_r+0x9b6>
  40824c:	f1aa 0a10 	sub.w	sl, sl, #16
  408250:	f1ba 0f10 	cmp.w	sl, #16
  408254:	9925      	ldr	r1, [sp, #148]	; 0x94
  408256:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408258:	aa30      	add	r2, sp, #192	; 0xc0
  40825a:	dce8      	bgt.n	40822e <_vfprintf_r+0xa12>
  40825c:	4635      	mov	r5, r6
  40825e:	460c      	mov	r4, r1
  408260:	4646      	mov	r6, r8
  408262:	4690      	mov	r8, r2
  408264:	3301      	adds	r3, #1
  408266:	4454      	add	r4, sl
  408268:	2b07      	cmp	r3, #7
  40826a:	9425      	str	r4, [sp, #148]	; 0x94
  40826c:	9324      	str	r3, [sp, #144]	; 0x90
  40826e:	e888 0420 	stmia.w	r8, {r5, sl}
  408272:	f300 8264 	bgt.w	40873e <_vfprintf_r+0xf22>
  408276:	f108 0808 	add.w	r8, r8, #8
  40827a:	e47e      	b.n	407b7a <_vfprintf_r+0x35e>
  40827c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40827e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  408280:	2b01      	cmp	r3, #1
  408282:	f340 81fd 	ble.w	408680 <_vfprintf_r+0xe64>
  408286:	3601      	adds	r6, #1
  408288:	3401      	adds	r4, #1
  40828a:	2301      	movs	r3, #1
  40828c:	2e07      	cmp	r6, #7
  40828e:	9425      	str	r4, [sp, #148]	; 0x94
  408290:	9624      	str	r6, [sp, #144]	; 0x90
  408292:	f8c8 7000 	str.w	r7, [r8]
  408296:	f8c8 3004 	str.w	r3, [r8, #4]
  40829a:	f300 820e 	bgt.w	4086ba <_vfprintf_r+0xe9e>
  40829e:	f108 0808 	add.w	r8, r8, #8
  4082a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4082a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4082a6:	f8c8 3000 	str.w	r3, [r8]
  4082aa:	3601      	adds	r6, #1
  4082ac:	4414      	add	r4, r2
  4082ae:	2e07      	cmp	r6, #7
  4082b0:	9425      	str	r4, [sp, #148]	; 0x94
  4082b2:	9624      	str	r6, [sp, #144]	; 0x90
  4082b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4082b8:	f300 822e 	bgt.w	408718 <_vfprintf_r+0xefc>
  4082bc:	f108 0808 	add.w	r8, r8, #8
  4082c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4082c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4082c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4082c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4082c8:	f7fe f960 	bl	40658c <__aeabi_dcmpeq>
  4082cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4082ce:	2800      	cmp	r0, #0
  4082d0:	f040 8106 	bne.w	4084e0 <_vfprintf_r+0xcc4>
  4082d4:	3b01      	subs	r3, #1
  4082d6:	3601      	adds	r6, #1
  4082d8:	3701      	adds	r7, #1
  4082da:	441c      	add	r4, r3
  4082dc:	2e07      	cmp	r6, #7
  4082de:	9624      	str	r6, [sp, #144]	; 0x90
  4082e0:	9425      	str	r4, [sp, #148]	; 0x94
  4082e2:	f8c8 7000 	str.w	r7, [r8]
  4082e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4082ea:	f300 81d9 	bgt.w	4086a0 <_vfprintf_r+0xe84>
  4082ee:	f108 0808 	add.w	r8, r8, #8
  4082f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4082f4:	f8c8 2004 	str.w	r2, [r8, #4]
  4082f8:	3601      	adds	r6, #1
  4082fa:	4414      	add	r4, r2
  4082fc:	ab1f      	add	r3, sp, #124	; 0x7c
  4082fe:	2e07      	cmp	r6, #7
  408300:	9425      	str	r4, [sp, #148]	; 0x94
  408302:	9624      	str	r6, [sp, #144]	; 0x90
  408304:	f8c8 3000 	str.w	r3, [r8]
  408308:	f77f ac8b 	ble.w	407c22 <_vfprintf_r+0x406>
  40830c:	aa23      	add	r2, sp, #140	; 0x8c
  40830e:	990a      	ldr	r1, [sp, #40]	; 0x28
  408310:	9808      	ldr	r0, [sp, #32]
  408312:	f003 f82d 	bl	40b370 <__sprint_r>
  408316:	b958      	cbnz	r0, 408330 <_vfprintf_r+0xb14>
  408318:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40831a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40831e:	e482      	b.n	407c26 <_vfprintf_r+0x40a>
  408320:	aa23      	add	r2, sp, #140	; 0x8c
  408322:	990a      	ldr	r1, [sp, #40]	; 0x28
  408324:	9808      	ldr	r0, [sp, #32]
  408326:	f003 f823 	bl	40b370 <__sprint_r>
  40832a:	2800      	cmp	r0, #0
  40832c:	f43f acc5 	beq.w	407cba <_vfprintf_r+0x49e>
  408330:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  408334:	e6dc      	b.n	4080f0 <_vfprintf_r+0x8d4>
  408336:	f8dd b018 	ldr.w	fp, [sp, #24]
  40833a:	2b01      	cmp	r3, #1
  40833c:	f000 8121 	beq.w	408582 <_vfprintf_r+0xd66>
  408340:	2b02      	cmp	r3, #2
  408342:	d127      	bne.n	408394 <_vfprintf_r+0xb78>
  408344:	f8cd b018 	str.w	fp, [sp, #24]
  408348:	2400      	movs	r4, #0
  40834a:	2500      	movs	r5, #0
  40834c:	e591      	b.n	407e72 <_vfprintf_r+0x656>
  40834e:	aa23      	add	r2, sp, #140	; 0x8c
  408350:	990a      	ldr	r1, [sp, #40]	; 0x28
  408352:	9808      	ldr	r0, [sp, #32]
  408354:	f003 f80c 	bl	40b370 <__sprint_r>
  408358:	2800      	cmp	r0, #0
  40835a:	d1e9      	bne.n	408330 <_vfprintf_r+0xb14>
  40835c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40835e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408362:	e44d      	b.n	407c00 <_vfprintf_r+0x3e4>
  408364:	aa23      	add	r2, sp, #140	; 0x8c
  408366:	990a      	ldr	r1, [sp, #40]	; 0x28
  408368:	9808      	ldr	r0, [sp, #32]
  40836a:	f003 f801 	bl	40b370 <__sprint_r>
  40836e:	2800      	cmp	r0, #0
  408370:	d1de      	bne.n	408330 <_vfprintf_r+0xb14>
  408372:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408374:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408378:	f7ff bbec 	b.w	407b54 <_vfprintf_r+0x338>
  40837c:	aa23      	add	r2, sp, #140	; 0x8c
  40837e:	990a      	ldr	r1, [sp, #40]	; 0x28
  408380:	9808      	ldr	r0, [sp, #32]
  408382:	f002 fff5 	bl	40b370 <__sprint_r>
  408386:	2800      	cmp	r0, #0
  408388:	d1d2      	bne.n	408330 <_vfprintf_r+0xb14>
  40838a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40838c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408390:	f7ff bbf0 	b.w	407b74 <_vfprintf_r+0x358>
  408394:	f8cd b018 	str.w	fp, [sp, #24]
  408398:	2400      	movs	r4, #0
  40839a:	2500      	movs	r5, #0
  40839c:	a930      	add	r1, sp, #192	; 0xc0
  40839e:	e000      	b.n	4083a2 <_vfprintf_r+0xb86>
  4083a0:	4639      	mov	r1, r7
  4083a2:	08e2      	lsrs	r2, r4, #3
  4083a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4083a8:	08e8      	lsrs	r0, r5, #3
  4083aa:	f004 0307 	and.w	r3, r4, #7
  4083ae:	4605      	mov	r5, r0
  4083b0:	4614      	mov	r4, r2
  4083b2:	3330      	adds	r3, #48	; 0x30
  4083b4:	ea54 0205 	orrs.w	r2, r4, r5
  4083b8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4083bc:	f101 37ff 	add.w	r7, r1, #4294967295
  4083c0:	d1ee      	bne.n	4083a0 <_vfprintf_r+0xb84>
  4083c2:	9a06      	ldr	r2, [sp, #24]
  4083c4:	07d2      	lsls	r2, r2, #31
  4083c6:	f57f ad64 	bpl.w	407e92 <_vfprintf_r+0x676>
  4083ca:	2b30      	cmp	r3, #48	; 0x30
  4083cc:	f43f ad61 	beq.w	407e92 <_vfprintf_r+0x676>
  4083d0:	2330      	movs	r3, #48	; 0x30
  4083d2:	3902      	subs	r1, #2
  4083d4:	f807 3c01 	strb.w	r3, [r7, #-1]
  4083d8:	ab30      	add	r3, sp, #192	; 0xc0
  4083da:	1a5b      	subs	r3, r3, r1
  4083dc:	930d      	str	r3, [sp, #52]	; 0x34
  4083de:	460f      	mov	r7, r1
  4083e0:	f7ff bb46 	b.w	407a70 <_vfprintf_r+0x254>
  4083e4:	2302      	movs	r3, #2
  4083e6:	f7ff bb25 	b.w	407a34 <_vfprintf_r+0x218>
  4083ea:	991d      	ldr	r1, [sp, #116]	; 0x74
  4083ec:	2900      	cmp	r1, #0
  4083ee:	f340 8274 	ble.w	4088da <_vfprintf_r+0x10be>
  4083f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4083f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4083f6:	4293      	cmp	r3, r2
  4083f8:	bfa8      	it	ge
  4083fa:	4613      	movge	r3, r2
  4083fc:	2b00      	cmp	r3, #0
  4083fe:	461e      	mov	r6, r3
  408400:	dd0d      	ble.n	40841e <_vfprintf_r+0xc02>
  408402:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408404:	f8c8 7000 	str.w	r7, [r8]
  408408:	3301      	adds	r3, #1
  40840a:	4434      	add	r4, r6
  40840c:	2b07      	cmp	r3, #7
  40840e:	9425      	str	r4, [sp, #148]	; 0x94
  408410:	f8c8 6004 	str.w	r6, [r8, #4]
  408414:	9324      	str	r3, [sp, #144]	; 0x90
  408416:	f300 8324 	bgt.w	408a62 <_vfprintf_r+0x1246>
  40841a:	f108 0808 	add.w	r8, r8, #8
  40841e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408420:	2e00      	cmp	r6, #0
  408422:	bfa8      	it	ge
  408424:	1b9b      	subge	r3, r3, r6
  408426:	2b00      	cmp	r3, #0
  408428:	461e      	mov	r6, r3
  40842a:	f340 80d0 	ble.w	4085ce <_vfprintf_r+0xdb2>
  40842e:	2e10      	cmp	r6, #16
  408430:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408432:	4dc0      	ldr	r5, [pc, #768]	; (408734 <_vfprintf_r+0xf18>)
  408434:	f340 80b7 	ble.w	4085a6 <_vfprintf_r+0xd8a>
  408438:	4622      	mov	r2, r4
  40843a:	f04f 0a10 	mov.w	sl, #16
  40843e:	f8dd b020 	ldr.w	fp, [sp, #32]
  408442:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408444:	e005      	b.n	408452 <_vfprintf_r+0xc36>
  408446:	f108 0808 	add.w	r8, r8, #8
  40844a:	3e10      	subs	r6, #16
  40844c:	2e10      	cmp	r6, #16
  40844e:	f340 80a9 	ble.w	4085a4 <_vfprintf_r+0xd88>
  408452:	3301      	adds	r3, #1
  408454:	3210      	adds	r2, #16
  408456:	2b07      	cmp	r3, #7
  408458:	9225      	str	r2, [sp, #148]	; 0x94
  40845a:	9324      	str	r3, [sp, #144]	; 0x90
  40845c:	e888 0420 	stmia.w	r8, {r5, sl}
  408460:	ddf1      	ble.n	408446 <_vfprintf_r+0xc2a>
  408462:	aa23      	add	r2, sp, #140	; 0x8c
  408464:	4621      	mov	r1, r4
  408466:	4658      	mov	r0, fp
  408468:	f002 ff82 	bl	40b370 <__sprint_r>
  40846c:	2800      	cmp	r0, #0
  40846e:	f040 8324 	bne.w	408aba <_vfprintf_r+0x129e>
  408472:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408474:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408476:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40847a:	e7e6      	b.n	40844a <_vfprintf_r+0xc2e>
  40847c:	2d00      	cmp	r5, #0
  40847e:	bf08      	it	eq
  408480:	2c0a      	cmpeq	r4, #10
  408482:	d37c      	bcc.n	40857e <_vfprintf_r+0xd62>
  408484:	af30      	add	r7, sp, #192	; 0xc0
  408486:	4620      	mov	r0, r4
  408488:	4629      	mov	r1, r5
  40848a:	220a      	movs	r2, #10
  40848c:	2300      	movs	r3, #0
  40848e:	f003 fa47 	bl	40b920 <__aeabi_uldivmod>
  408492:	3230      	adds	r2, #48	; 0x30
  408494:	f807 2d01 	strb.w	r2, [r7, #-1]!
  408498:	4620      	mov	r0, r4
  40849a:	4629      	mov	r1, r5
  40849c:	2300      	movs	r3, #0
  40849e:	220a      	movs	r2, #10
  4084a0:	f003 fa3e 	bl	40b920 <__aeabi_uldivmod>
  4084a4:	4604      	mov	r4, r0
  4084a6:	460d      	mov	r5, r1
  4084a8:	ea54 0305 	orrs.w	r3, r4, r5
  4084ac:	d1eb      	bne.n	408486 <_vfprintf_r+0xc6a>
  4084ae:	ab30      	add	r3, sp, #192	; 0xc0
  4084b0:	1bdb      	subs	r3, r3, r7
  4084b2:	930d      	str	r3, [sp, #52]	; 0x34
  4084b4:	f7ff badc 	b.w	407a70 <_vfprintf_r+0x254>
  4084b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4084ba:	930d      	str	r3, [sp, #52]	; 0x34
  4084bc:	af30      	add	r7, sp, #192	; 0xc0
  4084be:	f7ff bad7 	b.w	407a70 <_vfprintf_r+0x254>
  4084c2:	aa23      	add	r2, sp, #140	; 0x8c
  4084c4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4084c6:	9808      	ldr	r0, [sp, #32]
  4084c8:	f002 ff52 	bl	40b370 <__sprint_r>
  4084cc:	2800      	cmp	r0, #0
  4084ce:	f47f af2f 	bne.w	408330 <_vfprintf_r+0xb14>
  4084d2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4084d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4084d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4084dc:	f7ff bb28 	b.w	407b30 <_vfprintf_r+0x314>
  4084e0:	1e5f      	subs	r7, r3, #1
  4084e2:	2f00      	cmp	r7, #0
  4084e4:	f77f af05 	ble.w	4082f2 <_vfprintf_r+0xad6>
  4084e8:	2f10      	cmp	r7, #16
  4084ea:	4d92      	ldr	r5, [pc, #584]	; (408734 <_vfprintf_r+0xf18>)
  4084ec:	f340 810a 	ble.w	408704 <_vfprintf_r+0xee8>
  4084f0:	f04f 0a10 	mov.w	sl, #16
  4084f4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4084f8:	e005      	b.n	408506 <_vfprintf_r+0xcea>
  4084fa:	f108 0808 	add.w	r8, r8, #8
  4084fe:	3f10      	subs	r7, #16
  408500:	2f10      	cmp	r7, #16
  408502:	f340 80ff 	ble.w	408704 <_vfprintf_r+0xee8>
  408506:	3601      	adds	r6, #1
  408508:	3410      	adds	r4, #16
  40850a:	2e07      	cmp	r6, #7
  40850c:	9425      	str	r4, [sp, #148]	; 0x94
  40850e:	9624      	str	r6, [sp, #144]	; 0x90
  408510:	e888 0420 	stmia.w	r8, {r5, sl}
  408514:	ddf1      	ble.n	4084fa <_vfprintf_r+0xcde>
  408516:	aa23      	add	r2, sp, #140	; 0x8c
  408518:	990a      	ldr	r1, [sp, #40]	; 0x28
  40851a:	4658      	mov	r0, fp
  40851c:	f002 ff28 	bl	40b370 <__sprint_r>
  408520:	2800      	cmp	r0, #0
  408522:	f47f af05 	bne.w	408330 <_vfprintf_r+0xb14>
  408526:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408528:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40852a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40852e:	e7e6      	b.n	4084fe <_vfprintf_r+0xce2>
  408530:	990e      	ldr	r1, [sp, #56]	; 0x38
  408532:	460a      	mov	r2, r1
  408534:	3204      	adds	r2, #4
  408536:	680c      	ldr	r4, [r1, #0]
  408538:	920e      	str	r2, [sp, #56]	; 0x38
  40853a:	2500      	movs	r5, #0
  40853c:	f7ff ba7a 	b.w	407a34 <_vfprintf_r+0x218>
  408540:	681c      	ldr	r4, [r3, #0]
  408542:	3304      	adds	r3, #4
  408544:	930e      	str	r3, [sp, #56]	; 0x38
  408546:	2500      	movs	r5, #0
  408548:	e426      	b.n	407d98 <_vfprintf_r+0x57c>
  40854a:	3301      	adds	r3, #1
  40854c:	4434      	add	r4, r6
  40854e:	2b07      	cmp	r3, #7
  408550:	9425      	str	r4, [sp, #148]	; 0x94
  408552:	9324      	str	r3, [sp, #144]	; 0x90
  408554:	e888 0060 	stmia.w	r8, {r5, r6}
  408558:	f77f ab63 	ble.w	407c22 <_vfprintf_r+0x406>
  40855c:	e6d6      	b.n	40830c <_vfprintf_r+0xaf0>
  40855e:	3204      	adds	r2, #4
  408560:	681c      	ldr	r4, [r3, #0]
  408562:	920e      	str	r2, [sp, #56]	; 0x38
  408564:	2301      	movs	r3, #1
  408566:	2500      	movs	r5, #0
  408568:	f7ff ba64 	b.w	407a34 <_vfprintf_r+0x218>
  40856c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40856e:	6814      	ldr	r4, [r2, #0]
  408570:	4613      	mov	r3, r2
  408572:	3304      	adds	r3, #4
  408574:	17e5      	asrs	r5, r4, #31
  408576:	930e      	str	r3, [sp, #56]	; 0x38
  408578:	4622      	mov	r2, r4
  40857a:	462b      	mov	r3, r5
  40857c:	e460      	b.n	407e40 <_vfprintf_r+0x624>
  40857e:	f8dd b018 	ldr.w	fp, [sp, #24]
  408582:	f8cd b018 	str.w	fp, [sp, #24]
  408586:	af40      	add	r7, sp, #256	; 0x100
  408588:	3430      	adds	r4, #48	; 0x30
  40858a:	2301      	movs	r3, #1
  40858c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  408590:	930d      	str	r3, [sp, #52]	; 0x34
  408592:	f7ff ba6d 	b.w	407a70 <_vfprintf_r+0x254>
  408596:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40859a:	f002 f895 	bl	40a6c8 <__retarget_lock_release_recursive>
  40859e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4085a2:	e5af      	b.n	408104 <_vfprintf_r+0x8e8>
  4085a4:	4614      	mov	r4, r2
  4085a6:	3301      	adds	r3, #1
  4085a8:	4434      	add	r4, r6
  4085aa:	2b07      	cmp	r3, #7
  4085ac:	9425      	str	r4, [sp, #148]	; 0x94
  4085ae:	9324      	str	r3, [sp, #144]	; 0x90
  4085b0:	e888 0060 	stmia.w	r8, {r5, r6}
  4085b4:	f340 816d 	ble.w	408892 <_vfprintf_r+0x1076>
  4085b8:	aa23      	add	r2, sp, #140	; 0x8c
  4085ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4085bc:	9808      	ldr	r0, [sp, #32]
  4085be:	f002 fed7 	bl	40b370 <__sprint_r>
  4085c2:	2800      	cmp	r0, #0
  4085c4:	f47f aeb4 	bne.w	408330 <_vfprintf_r+0xb14>
  4085c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085ca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4085ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4085d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085d2:	4293      	cmp	r3, r2
  4085d4:	f280 8158 	bge.w	408888 <_vfprintf_r+0x106c>
  4085d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4085da:	9814      	ldr	r0, [sp, #80]	; 0x50
  4085dc:	9915      	ldr	r1, [sp, #84]	; 0x54
  4085de:	f8c8 1000 	str.w	r1, [r8]
  4085e2:	3201      	adds	r2, #1
  4085e4:	4404      	add	r4, r0
  4085e6:	2a07      	cmp	r2, #7
  4085e8:	9425      	str	r4, [sp, #148]	; 0x94
  4085ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4085ee:	9224      	str	r2, [sp, #144]	; 0x90
  4085f0:	f300 8152 	bgt.w	408898 <_vfprintf_r+0x107c>
  4085f4:	f108 0808 	add.w	r8, r8, #8
  4085f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085fc:	1ad3      	subs	r3, r2, r3
  4085fe:	1a56      	subs	r6, r2, r1
  408600:	429e      	cmp	r6, r3
  408602:	bfa8      	it	ge
  408604:	461e      	movge	r6, r3
  408606:	2e00      	cmp	r6, #0
  408608:	dd0e      	ble.n	408628 <_vfprintf_r+0xe0c>
  40860a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40860c:	f8c8 6004 	str.w	r6, [r8, #4]
  408610:	3201      	adds	r2, #1
  408612:	440f      	add	r7, r1
  408614:	4434      	add	r4, r6
  408616:	2a07      	cmp	r2, #7
  408618:	f8c8 7000 	str.w	r7, [r8]
  40861c:	9425      	str	r4, [sp, #148]	; 0x94
  40861e:	9224      	str	r2, [sp, #144]	; 0x90
  408620:	f300 823c 	bgt.w	408a9c <_vfprintf_r+0x1280>
  408624:	f108 0808 	add.w	r8, r8, #8
  408628:	2e00      	cmp	r6, #0
  40862a:	bfac      	ite	ge
  40862c:	1b9e      	subge	r6, r3, r6
  40862e:	461e      	movlt	r6, r3
  408630:	2e00      	cmp	r6, #0
  408632:	f77f aaf8 	ble.w	407c26 <_vfprintf_r+0x40a>
  408636:	2e10      	cmp	r6, #16
  408638:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40863a:	4d3e      	ldr	r5, [pc, #248]	; (408734 <_vfprintf_r+0xf18>)
  40863c:	dd85      	ble.n	40854a <_vfprintf_r+0xd2e>
  40863e:	2710      	movs	r7, #16
  408640:	f8dd a020 	ldr.w	sl, [sp, #32]
  408644:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408648:	e005      	b.n	408656 <_vfprintf_r+0xe3a>
  40864a:	f108 0808 	add.w	r8, r8, #8
  40864e:	3e10      	subs	r6, #16
  408650:	2e10      	cmp	r6, #16
  408652:	f77f af7a 	ble.w	40854a <_vfprintf_r+0xd2e>
  408656:	3301      	adds	r3, #1
  408658:	3410      	adds	r4, #16
  40865a:	2b07      	cmp	r3, #7
  40865c:	9425      	str	r4, [sp, #148]	; 0x94
  40865e:	9324      	str	r3, [sp, #144]	; 0x90
  408660:	e888 00a0 	stmia.w	r8, {r5, r7}
  408664:	ddf1      	ble.n	40864a <_vfprintf_r+0xe2e>
  408666:	aa23      	add	r2, sp, #140	; 0x8c
  408668:	4659      	mov	r1, fp
  40866a:	4650      	mov	r0, sl
  40866c:	f002 fe80 	bl	40b370 <__sprint_r>
  408670:	2800      	cmp	r0, #0
  408672:	f040 8176 	bne.w	408962 <_vfprintf_r+0x1146>
  408676:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408678:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40867a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40867e:	e7e6      	b.n	40864e <_vfprintf_r+0xe32>
  408680:	9b06      	ldr	r3, [sp, #24]
  408682:	07d8      	lsls	r0, r3, #31
  408684:	f53f adff 	bmi.w	408286 <_vfprintf_r+0xa6a>
  408688:	3601      	adds	r6, #1
  40868a:	3401      	adds	r4, #1
  40868c:	2301      	movs	r3, #1
  40868e:	2e07      	cmp	r6, #7
  408690:	9425      	str	r4, [sp, #148]	; 0x94
  408692:	9624      	str	r6, [sp, #144]	; 0x90
  408694:	f8c8 7000 	str.w	r7, [r8]
  408698:	f8c8 3004 	str.w	r3, [r8, #4]
  40869c:	f77f ae27 	ble.w	4082ee <_vfprintf_r+0xad2>
  4086a0:	aa23      	add	r2, sp, #140	; 0x8c
  4086a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4086a4:	9808      	ldr	r0, [sp, #32]
  4086a6:	f002 fe63 	bl	40b370 <__sprint_r>
  4086aa:	2800      	cmp	r0, #0
  4086ac:	f47f ae40 	bne.w	408330 <_vfprintf_r+0xb14>
  4086b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4086b2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4086b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4086b8:	e61b      	b.n	4082f2 <_vfprintf_r+0xad6>
  4086ba:	aa23      	add	r2, sp, #140	; 0x8c
  4086bc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4086be:	9808      	ldr	r0, [sp, #32]
  4086c0:	f002 fe56 	bl	40b370 <__sprint_r>
  4086c4:	2800      	cmp	r0, #0
  4086c6:	f47f ae33 	bne.w	408330 <_vfprintf_r+0xb14>
  4086ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4086cc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4086ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4086d2:	e5e6      	b.n	4082a2 <_vfprintf_r+0xa86>
  4086d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4086d6:	3507      	adds	r5, #7
  4086d8:	f025 0507 	bic.w	r5, r5, #7
  4086dc:	e9d5 2300 	ldrd	r2, r3, [r5]
  4086e0:	f105 0108 	add.w	r1, r5, #8
  4086e4:	910e      	str	r1, [sp, #56]	; 0x38
  4086e6:	4614      	mov	r4, r2
  4086e8:	461d      	mov	r5, r3
  4086ea:	f7ff bba9 	b.w	407e40 <_vfprintf_r+0x624>
  4086ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4086f0:	3507      	adds	r5, #7
  4086f2:	f025 0307 	bic.w	r3, r5, #7
  4086f6:	f103 0208 	add.w	r2, r3, #8
  4086fa:	920e      	str	r2, [sp, #56]	; 0x38
  4086fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  408700:	f7ff bb4a 	b.w	407d98 <_vfprintf_r+0x57c>
  408704:	3601      	adds	r6, #1
  408706:	443c      	add	r4, r7
  408708:	2e07      	cmp	r6, #7
  40870a:	9425      	str	r4, [sp, #148]	; 0x94
  40870c:	9624      	str	r6, [sp, #144]	; 0x90
  40870e:	e888 00a0 	stmia.w	r8, {r5, r7}
  408712:	f77f adec 	ble.w	4082ee <_vfprintf_r+0xad2>
  408716:	e7c3      	b.n	4086a0 <_vfprintf_r+0xe84>
  408718:	aa23      	add	r2, sp, #140	; 0x8c
  40871a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40871c:	9808      	ldr	r0, [sp, #32]
  40871e:	f002 fe27 	bl	40b370 <__sprint_r>
  408722:	2800      	cmp	r0, #0
  408724:	f47f ae04 	bne.w	408330 <_vfprintf_r+0xb14>
  408728:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40872a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40872c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408730:	e5c6      	b.n	4082c0 <_vfprintf_r+0xaa4>
  408732:	bf00      	nop
  408734:	0040c280 	.word	0x0040c280
  408738:	af30      	add	r7, sp, #192	; 0xc0
  40873a:	f7ff b999 	b.w	407a70 <_vfprintf_r+0x254>
  40873e:	aa23      	add	r2, sp, #140	; 0x8c
  408740:	990a      	ldr	r1, [sp, #40]	; 0x28
  408742:	9808      	ldr	r0, [sp, #32]
  408744:	f002 fe14 	bl	40b370 <__sprint_r>
  408748:	2800      	cmp	r0, #0
  40874a:	f47f adf1 	bne.w	408330 <_vfprintf_r+0xb14>
  40874e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408750:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408754:	f7ff ba11 	b.w	407b7a <_vfprintf_r+0x35e>
  408758:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40875c:	4264      	negs	r4, r4
  40875e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408762:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  408766:	2301      	movs	r3, #1
  408768:	f7ff b968 	b.w	407a3c <_vfprintf_r+0x220>
  40876c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40876e:	4622      	mov	r2, r4
  408770:	4620      	mov	r0, r4
  408772:	9c12      	ldr	r4, [sp, #72]	; 0x48
  408774:	4623      	mov	r3, r4
  408776:	4621      	mov	r1, r4
  408778:	f7fd ff3a 	bl	4065f0 <__aeabi_dcmpun>
  40877c:	2800      	cmp	r0, #0
  40877e:	f040 828c 	bne.w	408c9a <_vfprintf_r+0x147e>
  408782:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408784:	3301      	adds	r3, #1
  408786:	f026 0320 	bic.w	r3, r6, #32
  40878a:	930d      	str	r3, [sp, #52]	; 0x34
  40878c:	f000 8091 	beq.w	4088b2 <_vfprintf_r+0x1096>
  408790:	2b47      	cmp	r3, #71	; 0x47
  408792:	d104      	bne.n	40879e <_vfprintf_r+0xf82>
  408794:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408796:	2b00      	cmp	r3, #0
  408798:	bf08      	it	eq
  40879a:	2301      	moveq	r3, #1
  40879c:	9309      	str	r3, [sp, #36]	; 0x24
  40879e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4087a2:	9306      	str	r3, [sp, #24]
  4087a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4087a6:	f1b3 0a00 	subs.w	sl, r3, #0
  4087aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4087ac:	9307      	str	r3, [sp, #28]
  4087ae:	bfbb      	ittet	lt
  4087b0:	4653      	movlt	r3, sl
  4087b2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4087b6:	2300      	movge	r3, #0
  4087b8:	232d      	movlt	r3, #45	; 0x2d
  4087ba:	2e66      	cmp	r6, #102	; 0x66
  4087bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4087be:	f000 817f 	beq.w	408ac0 <_vfprintf_r+0x12a4>
  4087c2:	2e46      	cmp	r6, #70	; 0x46
  4087c4:	f000 81d4 	beq.w	408b70 <_vfprintf_r+0x1354>
  4087c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4087ca:	9a07      	ldr	r2, [sp, #28]
  4087cc:	2b45      	cmp	r3, #69	; 0x45
  4087ce:	bf0c      	ite	eq
  4087d0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  4087d2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  4087d4:	a821      	add	r0, sp, #132	; 0x84
  4087d6:	a91e      	add	r1, sp, #120	; 0x78
  4087d8:	bf08      	it	eq
  4087da:	1c5d      	addeq	r5, r3, #1
  4087dc:	9004      	str	r0, [sp, #16]
  4087de:	9103      	str	r1, [sp, #12]
  4087e0:	a81d      	add	r0, sp, #116	; 0x74
  4087e2:	2102      	movs	r1, #2
  4087e4:	9002      	str	r0, [sp, #8]
  4087e6:	4653      	mov	r3, sl
  4087e8:	9501      	str	r5, [sp, #4]
  4087ea:	9100      	str	r1, [sp, #0]
  4087ec:	9808      	ldr	r0, [sp, #32]
  4087ee:	f000 fc0b 	bl	409008 <_dtoa_r>
  4087f2:	2e67      	cmp	r6, #103	; 0x67
  4087f4:	4607      	mov	r7, r0
  4087f6:	f040 81af 	bne.w	408b58 <_vfprintf_r+0x133c>
  4087fa:	f01b 0f01 	tst.w	fp, #1
  4087fe:	f000 8213 	beq.w	408c28 <_vfprintf_r+0x140c>
  408802:	197c      	adds	r4, r7, r5
  408804:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408806:	9807      	ldr	r0, [sp, #28]
  408808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40880a:	4651      	mov	r1, sl
  40880c:	f7fd febe 	bl	40658c <__aeabi_dcmpeq>
  408810:	2800      	cmp	r0, #0
  408812:	f040 8132 	bne.w	408a7a <_vfprintf_r+0x125e>
  408816:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408818:	42a3      	cmp	r3, r4
  40881a:	d206      	bcs.n	40882a <_vfprintf_r+0x100e>
  40881c:	2130      	movs	r1, #48	; 0x30
  40881e:	1c5a      	adds	r2, r3, #1
  408820:	9221      	str	r2, [sp, #132]	; 0x84
  408822:	7019      	strb	r1, [r3, #0]
  408824:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408826:	429c      	cmp	r4, r3
  408828:	d8f9      	bhi.n	40881e <_vfprintf_r+0x1002>
  40882a:	1bdb      	subs	r3, r3, r7
  40882c:	9311      	str	r3, [sp, #68]	; 0x44
  40882e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408830:	2b47      	cmp	r3, #71	; 0x47
  408832:	f000 80b9 	beq.w	4089a8 <_vfprintf_r+0x118c>
  408836:	2e65      	cmp	r6, #101	; 0x65
  408838:	f340 8276 	ble.w	408d28 <_vfprintf_r+0x150c>
  40883c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40883e:	9310      	str	r3, [sp, #64]	; 0x40
  408840:	2e66      	cmp	r6, #102	; 0x66
  408842:	f000 8162 	beq.w	408b0a <_vfprintf_r+0x12ee>
  408846:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408848:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40884a:	4619      	mov	r1, r3
  40884c:	4291      	cmp	r1, r2
  40884e:	f300 814f 	bgt.w	408af0 <_vfprintf_r+0x12d4>
  408852:	f01b 0f01 	tst.w	fp, #1
  408856:	f040 8209 	bne.w	408c6c <_vfprintf_r+0x1450>
  40885a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40885e:	9307      	str	r3, [sp, #28]
  408860:	920d      	str	r2, [sp, #52]	; 0x34
  408862:	2667      	movs	r6, #103	; 0x67
  408864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408866:	2b00      	cmp	r3, #0
  408868:	f040 8096 	bne.w	408998 <_vfprintf_r+0x117c>
  40886c:	9309      	str	r3, [sp, #36]	; 0x24
  40886e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408872:	f7ff b905 	b.w	407a80 <_vfprintf_r+0x264>
  408876:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40887a:	f001 ff25 	bl	40a6c8 <__retarget_lock_release_recursive>
  40887e:	f04f 33ff 	mov.w	r3, #4294967295
  408882:	930b      	str	r3, [sp, #44]	; 0x2c
  408884:	f7ff ba30 	b.w	407ce8 <_vfprintf_r+0x4cc>
  408888:	9a06      	ldr	r2, [sp, #24]
  40888a:	07d5      	lsls	r5, r2, #31
  40888c:	f57f aeb4 	bpl.w	4085f8 <_vfprintf_r+0xddc>
  408890:	e6a2      	b.n	4085d8 <_vfprintf_r+0xdbc>
  408892:	f108 0808 	add.w	r8, r8, #8
  408896:	e69a      	b.n	4085ce <_vfprintf_r+0xdb2>
  408898:	aa23      	add	r2, sp, #140	; 0x8c
  40889a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40889c:	9808      	ldr	r0, [sp, #32]
  40889e:	f002 fd67 	bl	40b370 <__sprint_r>
  4088a2:	2800      	cmp	r0, #0
  4088a4:	f47f ad44 	bne.w	408330 <_vfprintf_r+0xb14>
  4088a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4088aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4088ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4088b0:	e6a2      	b.n	4085f8 <_vfprintf_r+0xddc>
  4088b2:	2306      	movs	r3, #6
  4088b4:	9309      	str	r3, [sp, #36]	; 0x24
  4088b6:	e772      	b.n	40879e <_vfprintf_r+0xf82>
  4088b8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4088bc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4088c0:	f7ff bbc7 	b.w	408052 <_vfprintf_r+0x836>
  4088c4:	aa23      	add	r2, sp, #140	; 0x8c
  4088c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4088c8:	9808      	ldr	r0, [sp, #32]
  4088ca:	f002 fd51 	bl	40b370 <__sprint_r>
  4088ce:	2800      	cmp	r0, #0
  4088d0:	f47f ad2e 	bne.w	408330 <_vfprintf_r+0xb14>
  4088d4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4088d8:	e437      	b.n	40814a <_vfprintf_r+0x92e>
  4088da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4088dc:	4ab4      	ldr	r2, [pc, #720]	; (408bb0 <_vfprintf_r+0x1394>)
  4088de:	f8c8 2000 	str.w	r2, [r8]
  4088e2:	3301      	adds	r3, #1
  4088e4:	3401      	adds	r4, #1
  4088e6:	2201      	movs	r2, #1
  4088e8:	2b07      	cmp	r3, #7
  4088ea:	9425      	str	r4, [sp, #148]	; 0x94
  4088ec:	9324      	str	r3, [sp, #144]	; 0x90
  4088ee:	f8c8 2004 	str.w	r2, [r8, #4]
  4088f2:	f300 8124 	bgt.w	408b3e <_vfprintf_r+0x1322>
  4088f6:	f108 0808 	add.w	r8, r8, #8
  4088fa:	b929      	cbnz	r1, 408908 <_vfprintf_r+0x10ec>
  4088fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4088fe:	b91b      	cbnz	r3, 408908 <_vfprintf_r+0x10ec>
  408900:	9b06      	ldr	r3, [sp, #24]
  408902:	07de      	lsls	r6, r3, #31
  408904:	f57f a98f 	bpl.w	407c26 <_vfprintf_r+0x40a>
  408908:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40890a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40890c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40890e:	f8c8 2000 	str.w	r2, [r8]
  408912:	3301      	adds	r3, #1
  408914:	4602      	mov	r2, r0
  408916:	4422      	add	r2, r4
  408918:	2b07      	cmp	r3, #7
  40891a:	9225      	str	r2, [sp, #148]	; 0x94
  40891c:	f8c8 0004 	str.w	r0, [r8, #4]
  408920:	9324      	str	r3, [sp, #144]	; 0x90
  408922:	f300 8169 	bgt.w	408bf8 <_vfprintf_r+0x13dc>
  408926:	f108 0808 	add.w	r8, r8, #8
  40892a:	2900      	cmp	r1, #0
  40892c:	f2c0 8136 	blt.w	408b9c <_vfprintf_r+0x1380>
  408930:	9911      	ldr	r1, [sp, #68]	; 0x44
  408932:	f8c8 7000 	str.w	r7, [r8]
  408936:	3301      	adds	r3, #1
  408938:	188c      	adds	r4, r1, r2
  40893a:	2b07      	cmp	r3, #7
  40893c:	9425      	str	r4, [sp, #148]	; 0x94
  40893e:	9324      	str	r3, [sp, #144]	; 0x90
  408940:	f8c8 1004 	str.w	r1, [r8, #4]
  408944:	f77f a96d 	ble.w	407c22 <_vfprintf_r+0x406>
  408948:	e4e0      	b.n	40830c <_vfprintf_r+0xaf0>
  40894a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40894c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40894e:	6813      	ldr	r3, [r2, #0]
  408950:	17cd      	asrs	r5, r1, #31
  408952:	4608      	mov	r0, r1
  408954:	3204      	adds	r2, #4
  408956:	4629      	mov	r1, r5
  408958:	920e      	str	r2, [sp, #56]	; 0x38
  40895a:	e9c3 0100 	strd	r0, r1, [r3]
  40895e:	f7fe bfa9 	b.w	4078b4 <_vfprintf_r+0x98>
  408962:	46da      	mov	sl, fp
  408964:	f7ff bbc4 	b.w	4080f0 <_vfprintf_r+0x8d4>
  408968:	aa23      	add	r2, sp, #140	; 0x8c
  40896a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40896c:	9808      	ldr	r0, [sp, #32]
  40896e:	f002 fcff 	bl	40b370 <__sprint_r>
  408972:	2800      	cmp	r0, #0
  408974:	f47f acdc 	bne.w	408330 <_vfprintf_r+0xb14>
  408978:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40897a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40897e:	f7ff bbfd 	b.w	40817c <_vfprintf_r+0x960>
  408982:	4638      	mov	r0, r7
  408984:	9409      	str	r4, [sp, #36]	; 0x24
  408986:	f7fe fedb 	bl	407740 <strlen>
  40898a:	950e      	str	r5, [sp, #56]	; 0x38
  40898c:	900d      	str	r0, [sp, #52]	; 0x34
  40898e:	f8cd b018 	str.w	fp, [sp, #24]
  408992:	4603      	mov	r3, r0
  408994:	f7ff ba36 	b.w	407e04 <_vfprintf_r+0x5e8>
  408998:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40899c:	2300      	movs	r3, #0
  40899e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4089a2:	9309      	str	r3, [sp, #36]	; 0x24
  4089a4:	f7ff b86f 	b.w	407a86 <_vfprintf_r+0x26a>
  4089a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4089aa:	9310      	str	r3, [sp, #64]	; 0x40
  4089ac:	461a      	mov	r2, r3
  4089ae:	3303      	adds	r3, #3
  4089b0:	db04      	blt.n	4089bc <_vfprintf_r+0x11a0>
  4089b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4089b4:	4619      	mov	r1, r3
  4089b6:	4291      	cmp	r1, r2
  4089b8:	f6bf af45 	bge.w	408846 <_vfprintf_r+0x102a>
  4089bc:	3e02      	subs	r6, #2
  4089be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4089c0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4089c4:	3b01      	subs	r3, #1
  4089c6:	2b00      	cmp	r3, #0
  4089c8:	931d      	str	r3, [sp, #116]	; 0x74
  4089ca:	bfbd      	ittte	lt
  4089cc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  4089ce:	f1c3 0301 	rsblt	r3, r3, #1
  4089d2:	222d      	movlt	r2, #45	; 0x2d
  4089d4:	222b      	movge	r2, #43	; 0x2b
  4089d6:	2b09      	cmp	r3, #9
  4089d8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4089dc:	f340 813e 	ble.w	408c5c <_vfprintf_r+0x1440>
  4089e0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4089e4:	4620      	mov	r0, r4
  4089e6:	4d73      	ldr	r5, [pc, #460]	; (408bb4 <_vfprintf_r+0x1398>)
  4089e8:	e000      	b.n	4089ec <_vfprintf_r+0x11d0>
  4089ea:	4610      	mov	r0, r2
  4089ec:	fb85 1203 	smull	r1, r2, r5, r3
  4089f0:	17d9      	asrs	r1, r3, #31
  4089f2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4089f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4089fa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4089fe:	3230      	adds	r2, #48	; 0x30
  408a00:	2909      	cmp	r1, #9
  408a02:	f800 2c01 	strb.w	r2, [r0, #-1]
  408a06:	460b      	mov	r3, r1
  408a08:	f100 32ff 	add.w	r2, r0, #4294967295
  408a0c:	dced      	bgt.n	4089ea <_vfprintf_r+0x11ce>
  408a0e:	3330      	adds	r3, #48	; 0x30
  408a10:	3802      	subs	r0, #2
  408a12:	b2d9      	uxtb	r1, r3
  408a14:	4284      	cmp	r4, r0
  408a16:	f802 1c01 	strb.w	r1, [r2, #-1]
  408a1a:	f240 8190 	bls.w	408d3e <_vfprintf_r+0x1522>
  408a1e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  408a22:	4613      	mov	r3, r2
  408a24:	e001      	b.n	408a2a <_vfprintf_r+0x120e>
  408a26:	f813 1b01 	ldrb.w	r1, [r3], #1
  408a2a:	f800 1b01 	strb.w	r1, [r0], #1
  408a2e:	42a3      	cmp	r3, r4
  408a30:	d1f9      	bne.n	408a26 <_vfprintf_r+0x120a>
  408a32:	3301      	adds	r3, #1
  408a34:	1a9b      	subs	r3, r3, r2
  408a36:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408a3a:	4413      	add	r3, r2
  408a3c:	aa1f      	add	r2, sp, #124	; 0x7c
  408a3e:	1a9b      	subs	r3, r3, r2
  408a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a42:	9319      	str	r3, [sp, #100]	; 0x64
  408a44:	2a01      	cmp	r2, #1
  408a46:	4413      	add	r3, r2
  408a48:	930d      	str	r3, [sp, #52]	; 0x34
  408a4a:	f340 8145 	ble.w	408cd8 <_vfprintf_r+0x14bc>
  408a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408a52:	4413      	add	r3, r2
  408a54:	930d      	str	r3, [sp, #52]	; 0x34
  408a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408a5a:	9307      	str	r3, [sp, #28]
  408a5c:	2300      	movs	r3, #0
  408a5e:	9310      	str	r3, [sp, #64]	; 0x40
  408a60:	e700      	b.n	408864 <_vfprintf_r+0x1048>
  408a62:	aa23      	add	r2, sp, #140	; 0x8c
  408a64:	990a      	ldr	r1, [sp, #40]	; 0x28
  408a66:	9808      	ldr	r0, [sp, #32]
  408a68:	f002 fc82 	bl	40b370 <__sprint_r>
  408a6c:	2800      	cmp	r0, #0
  408a6e:	f47f ac5f 	bne.w	408330 <_vfprintf_r+0xb14>
  408a72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408a74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408a78:	e4d1      	b.n	40841e <_vfprintf_r+0xc02>
  408a7a:	4623      	mov	r3, r4
  408a7c:	e6d5      	b.n	40882a <_vfprintf_r+0x100e>
  408a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408a80:	9710      	str	r7, [sp, #64]	; 0x40
  408a82:	2b06      	cmp	r3, #6
  408a84:	bf28      	it	cs
  408a86:	2306      	movcs	r3, #6
  408a88:	9709      	str	r7, [sp, #36]	; 0x24
  408a8a:	46ba      	mov	sl, r7
  408a8c:	9307      	str	r3, [sp, #28]
  408a8e:	950e      	str	r5, [sp, #56]	; 0x38
  408a90:	f8cd b018 	str.w	fp, [sp, #24]
  408a94:	930d      	str	r3, [sp, #52]	; 0x34
  408a96:	4f48      	ldr	r7, [pc, #288]	; (408bb8 <_vfprintf_r+0x139c>)
  408a98:	f7fe bff2 	b.w	407a80 <_vfprintf_r+0x264>
  408a9c:	aa23      	add	r2, sp, #140	; 0x8c
  408a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
  408aa0:	9808      	ldr	r0, [sp, #32]
  408aa2:	f002 fc65 	bl	40b370 <__sprint_r>
  408aa6:	2800      	cmp	r0, #0
  408aa8:	f47f ac42 	bne.w	408330 <_vfprintf_r+0xb14>
  408aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ab0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ab2:	1ad3      	subs	r3, r2, r3
  408ab4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408ab8:	e5b6      	b.n	408628 <_vfprintf_r+0xe0c>
  408aba:	46a2      	mov	sl, r4
  408abc:	f7ff bb18 	b.w	4080f0 <_vfprintf_r+0x8d4>
  408ac0:	a821      	add	r0, sp, #132	; 0x84
  408ac2:	a91e      	add	r1, sp, #120	; 0x78
  408ac4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408ac6:	9004      	str	r0, [sp, #16]
  408ac8:	9103      	str	r1, [sp, #12]
  408aca:	a81d      	add	r0, sp, #116	; 0x74
  408acc:	2103      	movs	r1, #3
  408ace:	9002      	str	r0, [sp, #8]
  408ad0:	9a07      	ldr	r2, [sp, #28]
  408ad2:	9501      	str	r5, [sp, #4]
  408ad4:	4653      	mov	r3, sl
  408ad6:	9100      	str	r1, [sp, #0]
  408ad8:	9808      	ldr	r0, [sp, #32]
  408ada:	f000 fa95 	bl	409008 <_dtoa_r>
  408ade:	4607      	mov	r7, r0
  408ae0:	1944      	adds	r4, r0, r5
  408ae2:	783b      	ldrb	r3, [r7, #0]
  408ae4:	2b30      	cmp	r3, #48	; 0x30
  408ae6:	f000 80ca 	beq.w	408c7e <_vfprintf_r+0x1462>
  408aea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408aec:	442c      	add	r4, r5
  408aee:	e689      	b.n	408804 <_vfprintf_r+0xfe8>
  408af0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408af4:	4413      	add	r3, r2
  408af6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408af8:	930d      	str	r3, [sp, #52]	; 0x34
  408afa:	2a00      	cmp	r2, #0
  408afc:	f340 80e4 	ble.w	408cc8 <_vfprintf_r+0x14ac>
  408b00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408b04:	9307      	str	r3, [sp, #28]
  408b06:	2667      	movs	r6, #103	; 0x67
  408b08:	e6ac      	b.n	408864 <_vfprintf_r+0x1048>
  408b0a:	2b00      	cmp	r3, #0
  408b0c:	f340 80fb 	ble.w	408d06 <_vfprintf_r+0x14ea>
  408b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408b12:	2a00      	cmp	r2, #0
  408b14:	f040 80ce 	bne.w	408cb4 <_vfprintf_r+0x1498>
  408b18:	f01b 0f01 	tst.w	fp, #1
  408b1c:	f040 80ca 	bne.w	408cb4 <_vfprintf_r+0x1498>
  408b20:	9307      	str	r3, [sp, #28]
  408b22:	930d      	str	r3, [sp, #52]	; 0x34
  408b24:	e69e      	b.n	408864 <_vfprintf_r+0x1048>
  408b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408b28:	9307      	str	r3, [sp, #28]
  408b2a:	930d      	str	r3, [sp, #52]	; 0x34
  408b2c:	9009      	str	r0, [sp, #36]	; 0x24
  408b2e:	950e      	str	r5, [sp, #56]	; 0x38
  408b30:	f8cd b018 	str.w	fp, [sp, #24]
  408b34:	9010      	str	r0, [sp, #64]	; 0x40
  408b36:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408b3a:	f7fe bfa1 	b.w	407a80 <_vfprintf_r+0x264>
  408b3e:	aa23      	add	r2, sp, #140	; 0x8c
  408b40:	990a      	ldr	r1, [sp, #40]	; 0x28
  408b42:	9808      	ldr	r0, [sp, #32]
  408b44:	f002 fc14 	bl	40b370 <__sprint_r>
  408b48:	2800      	cmp	r0, #0
  408b4a:	f47f abf1 	bne.w	408330 <_vfprintf_r+0xb14>
  408b4e:	991d      	ldr	r1, [sp, #116]	; 0x74
  408b50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408b52:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408b56:	e6d0      	b.n	4088fa <_vfprintf_r+0x10de>
  408b58:	2e47      	cmp	r6, #71	; 0x47
  408b5a:	f47f ae52 	bne.w	408802 <_vfprintf_r+0xfe6>
  408b5e:	f01b 0f01 	tst.w	fp, #1
  408b62:	f000 80da 	beq.w	408d1a <_vfprintf_r+0x14fe>
  408b66:	2e46      	cmp	r6, #70	; 0x46
  408b68:	eb07 0405 	add.w	r4, r7, r5
  408b6c:	d0b9      	beq.n	408ae2 <_vfprintf_r+0x12c6>
  408b6e:	e649      	b.n	408804 <_vfprintf_r+0xfe8>
  408b70:	a821      	add	r0, sp, #132	; 0x84
  408b72:	a91e      	add	r1, sp, #120	; 0x78
  408b74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408b76:	9004      	str	r0, [sp, #16]
  408b78:	9103      	str	r1, [sp, #12]
  408b7a:	a81d      	add	r0, sp, #116	; 0x74
  408b7c:	2103      	movs	r1, #3
  408b7e:	9002      	str	r0, [sp, #8]
  408b80:	9a07      	ldr	r2, [sp, #28]
  408b82:	9401      	str	r4, [sp, #4]
  408b84:	4653      	mov	r3, sl
  408b86:	9100      	str	r1, [sp, #0]
  408b88:	9808      	ldr	r0, [sp, #32]
  408b8a:	f000 fa3d 	bl	409008 <_dtoa_r>
  408b8e:	4625      	mov	r5, r4
  408b90:	4607      	mov	r7, r0
  408b92:	e7e8      	b.n	408b66 <_vfprintf_r+0x134a>
  408b94:	2300      	movs	r3, #0
  408b96:	9309      	str	r3, [sp, #36]	; 0x24
  408b98:	f7fe bec1 	b.w	40791e <_vfprintf_r+0x102>
  408b9c:	424e      	negs	r6, r1
  408b9e:	3110      	adds	r1, #16
  408ba0:	4d06      	ldr	r5, [pc, #24]	; (408bbc <_vfprintf_r+0x13a0>)
  408ba2:	da43      	bge.n	408c2c <_vfprintf_r+0x1410>
  408ba4:	2410      	movs	r4, #16
  408ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
  408baa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408bae:	e00c      	b.n	408bca <_vfprintf_r+0x13ae>
  408bb0:	0040c26c 	.word	0x0040c26c
  408bb4:	66666667 	.word	0x66666667
  408bb8:	0040c264 	.word	0x0040c264
  408bbc:	0040c280 	.word	0x0040c280
  408bc0:	f108 0808 	add.w	r8, r8, #8
  408bc4:	3e10      	subs	r6, #16
  408bc6:	2e10      	cmp	r6, #16
  408bc8:	dd30      	ble.n	408c2c <_vfprintf_r+0x1410>
  408bca:	3301      	adds	r3, #1
  408bcc:	3210      	adds	r2, #16
  408bce:	2b07      	cmp	r3, #7
  408bd0:	9225      	str	r2, [sp, #148]	; 0x94
  408bd2:	9324      	str	r3, [sp, #144]	; 0x90
  408bd4:	f8c8 5000 	str.w	r5, [r8]
  408bd8:	f8c8 4004 	str.w	r4, [r8, #4]
  408bdc:	ddf0      	ble.n	408bc0 <_vfprintf_r+0x13a4>
  408bde:	aa23      	add	r2, sp, #140	; 0x8c
  408be0:	4659      	mov	r1, fp
  408be2:	4650      	mov	r0, sl
  408be4:	f002 fbc4 	bl	40b370 <__sprint_r>
  408be8:	2800      	cmp	r0, #0
  408bea:	f47f aeba 	bne.w	408962 <_vfprintf_r+0x1146>
  408bee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bf2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408bf6:	e7e5      	b.n	408bc4 <_vfprintf_r+0x13a8>
  408bf8:	aa23      	add	r2, sp, #140	; 0x8c
  408bfa:	990a      	ldr	r1, [sp, #40]	; 0x28
  408bfc:	9808      	ldr	r0, [sp, #32]
  408bfe:	f002 fbb7 	bl	40b370 <__sprint_r>
  408c02:	2800      	cmp	r0, #0
  408c04:	f47f ab94 	bne.w	408330 <_vfprintf_r+0xb14>
  408c08:	991d      	ldr	r1, [sp, #116]	; 0x74
  408c0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c0e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408c12:	e68a      	b.n	40892a <_vfprintf_r+0x110e>
  408c14:	9808      	ldr	r0, [sp, #32]
  408c16:	aa23      	add	r2, sp, #140	; 0x8c
  408c18:	4651      	mov	r1, sl
  408c1a:	f002 fba9 	bl	40b370 <__sprint_r>
  408c1e:	2800      	cmp	r0, #0
  408c20:	f43f aa64 	beq.w	4080ec <_vfprintf_r+0x8d0>
  408c24:	f7ff ba64 	b.w	4080f0 <_vfprintf_r+0x8d4>
  408c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408c2a:	e5fe      	b.n	40882a <_vfprintf_r+0x100e>
  408c2c:	3301      	adds	r3, #1
  408c2e:	4432      	add	r2, r6
  408c30:	2b07      	cmp	r3, #7
  408c32:	e888 0060 	stmia.w	r8, {r5, r6}
  408c36:	9225      	str	r2, [sp, #148]	; 0x94
  408c38:	9324      	str	r3, [sp, #144]	; 0x90
  408c3a:	f108 0808 	add.w	r8, r8, #8
  408c3e:	f77f ae77 	ble.w	408930 <_vfprintf_r+0x1114>
  408c42:	aa23      	add	r2, sp, #140	; 0x8c
  408c44:	990a      	ldr	r1, [sp, #40]	; 0x28
  408c46:	9808      	ldr	r0, [sp, #32]
  408c48:	f002 fb92 	bl	40b370 <__sprint_r>
  408c4c:	2800      	cmp	r0, #0
  408c4e:	f47f ab6f 	bne.w	408330 <_vfprintf_r+0xb14>
  408c52:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c56:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408c5a:	e669      	b.n	408930 <_vfprintf_r+0x1114>
  408c5c:	3330      	adds	r3, #48	; 0x30
  408c5e:	2230      	movs	r2, #48	; 0x30
  408c60:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408c64:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408c68:	ab20      	add	r3, sp, #128	; 0x80
  408c6a:	e6e7      	b.n	408a3c <_vfprintf_r+0x1220>
  408c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408c6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408c70:	4413      	add	r3, r2
  408c72:	930d      	str	r3, [sp, #52]	; 0x34
  408c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408c78:	9307      	str	r3, [sp, #28]
  408c7a:	2667      	movs	r6, #103	; 0x67
  408c7c:	e5f2      	b.n	408864 <_vfprintf_r+0x1048>
  408c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408c80:	9807      	ldr	r0, [sp, #28]
  408c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408c84:	4651      	mov	r1, sl
  408c86:	f7fd fc81 	bl	40658c <__aeabi_dcmpeq>
  408c8a:	2800      	cmp	r0, #0
  408c8c:	f47f af2d 	bne.w	408aea <_vfprintf_r+0x12ce>
  408c90:	f1c5 0501 	rsb	r5, r5, #1
  408c94:	951d      	str	r5, [sp, #116]	; 0x74
  408c96:	442c      	add	r4, r5
  408c98:	e5b4      	b.n	408804 <_vfprintf_r+0xfe8>
  408c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c9c:	4f33      	ldr	r7, [pc, #204]	; (408d6c <_vfprintf_r+0x1550>)
  408c9e:	2b00      	cmp	r3, #0
  408ca0:	bfb6      	itet	lt
  408ca2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  408ca6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  408caa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  408cae:	4b30      	ldr	r3, [pc, #192]	; (408d70 <_vfprintf_r+0x1554>)
  408cb0:	f7ff b9d1 	b.w	408056 <_vfprintf_r+0x83a>
  408cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408cb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408cb8:	4413      	add	r3, r2
  408cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408cbc:	441a      	add	r2, r3
  408cbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408cc2:	920d      	str	r2, [sp, #52]	; 0x34
  408cc4:	9307      	str	r3, [sp, #28]
  408cc6:	e5cd      	b.n	408864 <_vfprintf_r+0x1048>
  408cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408ccc:	f1c3 0301 	rsb	r3, r3, #1
  408cd0:	441a      	add	r2, r3
  408cd2:	4613      	mov	r3, r2
  408cd4:	920d      	str	r2, [sp, #52]	; 0x34
  408cd6:	e713      	b.n	408b00 <_vfprintf_r+0x12e4>
  408cd8:	f01b 0301 	ands.w	r3, fp, #1
  408cdc:	9310      	str	r3, [sp, #64]	; 0x40
  408cde:	f47f aeb6 	bne.w	408a4e <_vfprintf_r+0x1232>
  408ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408ce8:	9307      	str	r3, [sp, #28]
  408cea:	e5bb      	b.n	408864 <_vfprintf_r+0x1048>
  408cec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408cee:	f899 6001 	ldrb.w	r6, [r9, #1]
  408cf2:	6823      	ldr	r3, [r4, #0]
  408cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  408cf8:	9309      	str	r3, [sp, #36]	; 0x24
  408cfa:	4623      	mov	r3, r4
  408cfc:	3304      	adds	r3, #4
  408cfe:	4681      	mov	r9, r0
  408d00:	930e      	str	r3, [sp, #56]	; 0x38
  408d02:	f7fe be0a 	b.w	40791a <_vfprintf_r+0xfe>
  408d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d08:	b913      	cbnz	r3, 408d10 <_vfprintf_r+0x14f4>
  408d0a:	f01b 0f01 	tst.w	fp, #1
  408d0e:	d002      	beq.n	408d16 <_vfprintf_r+0x14fa>
  408d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408d12:	3301      	adds	r3, #1
  408d14:	e7d1      	b.n	408cba <_vfprintf_r+0x149e>
  408d16:	2301      	movs	r3, #1
  408d18:	e702      	b.n	408b20 <_vfprintf_r+0x1304>
  408d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d1c:	1bdb      	subs	r3, r3, r7
  408d1e:	9311      	str	r3, [sp, #68]	; 0x44
  408d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408d22:	2b47      	cmp	r3, #71	; 0x47
  408d24:	f43f ae40 	beq.w	4089a8 <_vfprintf_r+0x118c>
  408d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408d2a:	9310      	str	r3, [sp, #64]	; 0x40
  408d2c:	e647      	b.n	4089be <_vfprintf_r+0x11a2>
  408d2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d32:	f7ff b81d 	b.w	407d70 <_vfprintf_r+0x554>
  408d36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d3a:	f7ff b918 	b.w	407f6e <_vfprintf_r+0x752>
  408d3e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408d42:	e67b      	b.n	408a3c <_vfprintf_r+0x1220>
  408d44:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d48:	f7ff b866 	b.w	407e18 <_vfprintf_r+0x5fc>
  408d4c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d50:	f7ff b9ac 	b.w	4080ac <_vfprintf_r+0x890>
  408d54:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d58:	f7ff b934 	b.w	407fc4 <_vfprintf_r+0x7a8>
  408d5c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d60:	f7ff b8b0 	b.w	407ec4 <_vfprintf_r+0x6a8>
  408d64:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d68:	f7ff b945 	b.w	407ff6 <_vfprintf_r+0x7da>
  408d6c:	0040c238 	.word	0x0040c238
  408d70:	0040c234 	.word	0x0040c234

00408d74 <__sbprintf>:
  408d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d78:	460c      	mov	r4, r1
  408d7a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408d7e:	8989      	ldrh	r1, [r1, #12]
  408d80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408d82:	89e5      	ldrh	r5, [r4, #14]
  408d84:	9619      	str	r6, [sp, #100]	; 0x64
  408d86:	f021 0102 	bic.w	r1, r1, #2
  408d8a:	4606      	mov	r6, r0
  408d8c:	69e0      	ldr	r0, [r4, #28]
  408d8e:	f8ad 100c 	strh.w	r1, [sp, #12]
  408d92:	4617      	mov	r7, r2
  408d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408d9a:	f8ad 500e 	strh.w	r5, [sp, #14]
  408d9e:	4698      	mov	r8, r3
  408da0:	ad1a      	add	r5, sp, #104	; 0x68
  408da2:	2300      	movs	r3, #0
  408da4:	9007      	str	r0, [sp, #28]
  408da6:	a816      	add	r0, sp, #88	; 0x58
  408da8:	9209      	str	r2, [sp, #36]	; 0x24
  408daa:	9306      	str	r3, [sp, #24]
  408dac:	9500      	str	r5, [sp, #0]
  408dae:	9504      	str	r5, [sp, #16]
  408db0:	9102      	str	r1, [sp, #8]
  408db2:	9105      	str	r1, [sp, #20]
  408db4:	f001 fc82 	bl	40a6bc <__retarget_lock_init_recursive>
  408db8:	4643      	mov	r3, r8
  408dba:	463a      	mov	r2, r7
  408dbc:	4669      	mov	r1, sp
  408dbe:	4630      	mov	r0, r6
  408dc0:	f7fe fd2c 	bl	40781c <_vfprintf_r>
  408dc4:	1e05      	subs	r5, r0, #0
  408dc6:	db07      	blt.n	408dd8 <__sbprintf+0x64>
  408dc8:	4630      	mov	r0, r6
  408dca:	4669      	mov	r1, sp
  408dcc:	f001 f8e6 	bl	409f9c <_fflush_r>
  408dd0:	2800      	cmp	r0, #0
  408dd2:	bf18      	it	ne
  408dd4:	f04f 35ff 	movne.w	r5, #4294967295
  408dd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408ddc:	065b      	lsls	r3, r3, #25
  408dde:	d503      	bpl.n	408de8 <__sbprintf+0x74>
  408de0:	89a3      	ldrh	r3, [r4, #12]
  408de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408de6:	81a3      	strh	r3, [r4, #12]
  408de8:	9816      	ldr	r0, [sp, #88]	; 0x58
  408dea:	f001 fc69 	bl	40a6c0 <__retarget_lock_close_recursive>
  408dee:	4628      	mov	r0, r5
  408df0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408df8 <__swsetup_r>:
  408df8:	b538      	push	{r3, r4, r5, lr}
  408dfa:	4b30      	ldr	r3, [pc, #192]	; (408ebc <__swsetup_r+0xc4>)
  408dfc:	681b      	ldr	r3, [r3, #0]
  408dfe:	4605      	mov	r5, r0
  408e00:	460c      	mov	r4, r1
  408e02:	b113      	cbz	r3, 408e0a <__swsetup_r+0x12>
  408e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408e06:	2a00      	cmp	r2, #0
  408e08:	d038      	beq.n	408e7c <__swsetup_r+0x84>
  408e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e0e:	b293      	uxth	r3, r2
  408e10:	0718      	lsls	r0, r3, #28
  408e12:	d50c      	bpl.n	408e2e <__swsetup_r+0x36>
  408e14:	6920      	ldr	r0, [r4, #16]
  408e16:	b1a8      	cbz	r0, 408e44 <__swsetup_r+0x4c>
  408e18:	f013 0201 	ands.w	r2, r3, #1
  408e1c:	d01e      	beq.n	408e5c <__swsetup_r+0x64>
  408e1e:	6963      	ldr	r3, [r4, #20]
  408e20:	2200      	movs	r2, #0
  408e22:	425b      	negs	r3, r3
  408e24:	61a3      	str	r3, [r4, #24]
  408e26:	60a2      	str	r2, [r4, #8]
  408e28:	b1f0      	cbz	r0, 408e68 <__swsetup_r+0x70>
  408e2a:	2000      	movs	r0, #0
  408e2c:	bd38      	pop	{r3, r4, r5, pc}
  408e2e:	06d9      	lsls	r1, r3, #27
  408e30:	d53c      	bpl.n	408eac <__swsetup_r+0xb4>
  408e32:	0758      	lsls	r0, r3, #29
  408e34:	d426      	bmi.n	408e84 <__swsetup_r+0x8c>
  408e36:	6920      	ldr	r0, [r4, #16]
  408e38:	f042 0308 	orr.w	r3, r2, #8
  408e3c:	81a3      	strh	r3, [r4, #12]
  408e3e:	b29b      	uxth	r3, r3
  408e40:	2800      	cmp	r0, #0
  408e42:	d1e9      	bne.n	408e18 <__swsetup_r+0x20>
  408e44:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408e48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408e4c:	d0e4      	beq.n	408e18 <__swsetup_r+0x20>
  408e4e:	4628      	mov	r0, r5
  408e50:	4621      	mov	r1, r4
  408e52:	f001 fc69 	bl	40a728 <__smakebuf_r>
  408e56:	89a3      	ldrh	r3, [r4, #12]
  408e58:	6920      	ldr	r0, [r4, #16]
  408e5a:	e7dd      	b.n	408e18 <__swsetup_r+0x20>
  408e5c:	0799      	lsls	r1, r3, #30
  408e5e:	bf58      	it	pl
  408e60:	6962      	ldrpl	r2, [r4, #20]
  408e62:	60a2      	str	r2, [r4, #8]
  408e64:	2800      	cmp	r0, #0
  408e66:	d1e0      	bne.n	408e2a <__swsetup_r+0x32>
  408e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e6c:	061a      	lsls	r2, r3, #24
  408e6e:	d5dd      	bpl.n	408e2c <__swsetup_r+0x34>
  408e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e74:	81a3      	strh	r3, [r4, #12]
  408e76:	f04f 30ff 	mov.w	r0, #4294967295
  408e7a:	bd38      	pop	{r3, r4, r5, pc}
  408e7c:	4618      	mov	r0, r3
  408e7e:	f001 f8e5 	bl	40a04c <__sinit>
  408e82:	e7c2      	b.n	408e0a <__swsetup_r+0x12>
  408e84:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408e86:	b151      	cbz	r1, 408e9e <__swsetup_r+0xa6>
  408e88:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408e8c:	4299      	cmp	r1, r3
  408e8e:	d004      	beq.n	408e9a <__swsetup_r+0xa2>
  408e90:	4628      	mov	r0, r5
  408e92:	f001 f97d 	bl	40a190 <_free_r>
  408e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e9a:	2300      	movs	r3, #0
  408e9c:	6323      	str	r3, [r4, #48]	; 0x30
  408e9e:	2300      	movs	r3, #0
  408ea0:	6920      	ldr	r0, [r4, #16]
  408ea2:	6063      	str	r3, [r4, #4]
  408ea4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408ea8:	6020      	str	r0, [r4, #0]
  408eaa:	e7c5      	b.n	408e38 <__swsetup_r+0x40>
  408eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408eb0:	2309      	movs	r3, #9
  408eb2:	602b      	str	r3, [r5, #0]
  408eb4:	f04f 30ff 	mov.w	r0, #4294967295
  408eb8:	81a2      	strh	r2, [r4, #12]
  408eba:	bd38      	pop	{r3, r4, r5, pc}
  408ebc:	20400018 	.word	0x20400018

00408ec0 <register_fini>:
  408ec0:	4b02      	ldr	r3, [pc, #8]	; (408ecc <register_fini+0xc>)
  408ec2:	b113      	cbz	r3, 408eca <register_fini+0xa>
  408ec4:	4802      	ldr	r0, [pc, #8]	; (408ed0 <register_fini+0x10>)
  408ec6:	f000 b805 	b.w	408ed4 <atexit>
  408eca:	4770      	bx	lr
  408ecc:	00000000 	.word	0x00000000
  408ed0:	0040a0bd 	.word	0x0040a0bd

00408ed4 <atexit>:
  408ed4:	2300      	movs	r3, #0
  408ed6:	4601      	mov	r1, r0
  408ed8:	461a      	mov	r2, r3
  408eda:	4618      	mov	r0, r3
  408edc:	f002 ba68 	b.w	40b3b0 <__register_exitproc>

00408ee0 <quorem>:
  408ee0:	6902      	ldr	r2, [r0, #16]
  408ee2:	690b      	ldr	r3, [r1, #16]
  408ee4:	4293      	cmp	r3, r2
  408ee6:	f300 808d 	bgt.w	409004 <quorem+0x124>
  408eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408eee:	f103 38ff 	add.w	r8, r3, #4294967295
  408ef2:	f101 0714 	add.w	r7, r1, #20
  408ef6:	f100 0b14 	add.w	fp, r0, #20
  408efa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408efe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408f02:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408f06:	b083      	sub	sp, #12
  408f08:	3201      	adds	r2, #1
  408f0a:	fbb3 f9f2 	udiv	r9, r3, r2
  408f0e:	eb0b 0304 	add.w	r3, fp, r4
  408f12:	9400      	str	r4, [sp, #0]
  408f14:	eb07 0a04 	add.w	sl, r7, r4
  408f18:	9301      	str	r3, [sp, #4]
  408f1a:	f1b9 0f00 	cmp.w	r9, #0
  408f1e:	d039      	beq.n	408f94 <quorem+0xb4>
  408f20:	2500      	movs	r5, #0
  408f22:	462e      	mov	r6, r5
  408f24:	46bc      	mov	ip, r7
  408f26:	46de      	mov	lr, fp
  408f28:	f85c 4b04 	ldr.w	r4, [ip], #4
  408f2c:	f8de 3000 	ldr.w	r3, [lr]
  408f30:	b2a2      	uxth	r2, r4
  408f32:	fb09 5502 	mla	r5, r9, r2, r5
  408f36:	0c22      	lsrs	r2, r4, #16
  408f38:	0c2c      	lsrs	r4, r5, #16
  408f3a:	fb09 4202 	mla	r2, r9, r2, r4
  408f3e:	b2ad      	uxth	r5, r5
  408f40:	1b75      	subs	r5, r6, r5
  408f42:	b296      	uxth	r6, r2
  408f44:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408f48:	fa15 f383 	uxtah	r3, r5, r3
  408f4c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408f50:	b29b      	uxth	r3, r3
  408f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408f56:	45e2      	cmp	sl, ip
  408f58:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408f5c:	f84e 3b04 	str.w	r3, [lr], #4
  408f60:	ea4f 4626 	mov.w	r6, r6, asr #16
  408f64:	d2e0      	bcs.n	408f28 <quorem+0x48>
  408f66:	9b00      	ldr	r3, [sp, #0]
  408f68:	f85b 3003 	ldr.w	r3, [fp, r3]
  408f6c:	b993      	cbnz	r3, 408f94 <quorem+0xb4>
  408f6e:	9c01      	ldr	r4, [sp, #4]
  408f70:	1f23      	subs	r3, r4, #4
  408f72:	459b      	cmp	fp, r3
  408f74:	d20c      	bcs.n	408f90 <quorem+0xb0>
  408f76:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408f7a:	b94b      	cbnz	r3, 408f90 <quorem+0xb0>
  408f7c:	f1a4 0308 	sub.w	r3, r4, #8
  408f80:	e002      	b.n	408f88 <quorem+0xa8>
  408f82:	681a      	ldr	r2, [r3, #0]
  408f84:	3b04      	subs	r3, #4
  408f86:	b91a      	cbnz	r2, 408f90 <quorem+0xb0>
  408f88:	459b      	cmp	fp, r3
  408f8a:	f108 38ff 	add.w	r8, r8, #4294967295
  408f8e:	d3f8      	bcc.n	408f82 <quorem+0xa2>
  408f90:	f8c0 8010 	str.w	r8, [r0, #16]
  408f94:	4604      	mov	r4, r0
  408f96:	f001 fec5 	bl	40ad24 <__mcmp>
  408f9a:	2800      	cmp	r0, #0
  408f9c:	db2e      	blt.n	408ffc <quorem+0x11c>
  408f9e:	f109 0901 	add.w	r9, r9, #1
  408fa2:	465d      	mov	r5, fp
  408fa4:	2300      	movs	r3, #0
  408fa6:	f857 1b04 	ldr.w	r1, [r7], #4
  408faa:	6828      	ldr	r0, [r5, #0]
  408fac:	b28a      	uxth	r2, r1
  408fae:	1a9a      	subs	r2, r3, r2
  408fb0:	0c0b      	lsrs	r3, r1, #16
  408fb2:	fa12 f280 	uxtah	r2, r2, r0
  408fb6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408fba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408fbe:	b292      	uxth	r2, r2
  408fc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408fc4:	45ba      	cmp	sl, r7
  408fc6:	f845 2b04 	str.w	r2, [r5], #4
  408fca:	ea4f 4323 	mov.w	r3, r3, asr #16
  408fce:	d2ea      	bcs.n	408fa6 <quorem+0xc6>
  408fd0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408fd4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408fd8:	b982      	cbnz	r2, 408ffc <quorem+0x11c>
  408fda:	1f1a      	subs	r2, r3, #4
  408fdc:	4593      	cmp	fp, r2
  408fde:	d20b      	bcs.n	408ff8 <quorem+0x118>
  408fe0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408fe4:	b942      	cbnz	r2, 408ff8 <quorem+0x118>
  408fe6:	3b08      	subs	r3, #8
  408fe8:	e002      	b.n	408ff0 <quorem+0x110>
  408fea:	681a      	ldr	r2, [r3, #0]
  408fec:	3b04      	subs	r3, #4
  408fee:	b91a      	cbnz	r2, 408ff8 <quorem+0x118>
  408ff0:	459b      	cmp	fp, r3
  408ff2:	f108 38ff 	add.w	r8, r8, #4294967295
  408ff6:	d3f8      	bcc.n	408fea <quorem+0x10a>
  408ff8:	f8c4 8010 	str.w	r8, [r4, #16]
  408ffc:	4648      	mov	r0, r9
  408ffe:	b003      	add	sp, #12
  409000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409004:	2000      	movs	r0, #0
  409006:	4770      	bx	lr

00409008 <_dtoa_r>:
  409008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40900c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40900e:	b09b      	sub	sp, #108	; 0x6c
  409010:	4604      	mov	r4, r0
  409012:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  409014:	4692      	mov	sl, r2
  409016:	469b      	mov	fp, r3
  409018:	b141      	cbz	r1, 40902c <_dtoa_r+0x24>
  40901a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40901c:	604a      	str	r2, [r1, #4]
  40901e:	2301      	movs	r3, #1
  409020:	4093      	lsls	r3, r2
  409022:	608b      	str	r3, [r1, #8]
  409024:	f001 fca6 	bl	40a974 <_Bfree>
  409028:	2300      	movs	r3, #0
  40902a:	6423      	str	r3, [r4, #64]	; 0x40
  40902c:	f1bb 0f00 	cmp.w	fp, #0
  409030:	465d      	mov	r5, fp
  409032:	db35      	blt.n	4090a0 <_dtoa_r+0x98>
  409034:	2300      	movs	r3, #0
  409036:	6033      	str	r3, [r6, #0]
  409038:	4b9d      	ldr	r3, [pc, #628]	; (4092b0 <_dtoa_r+0x2a8>)
  40903a:	43ab      	bics	r3, r5
  40903c:	d015      	beq.n	40906a <_dtoa_r+0x62>
  40903e:	4650      	mov	r0, sl
  409040:	4659      	mov	r1, fp
  409042:	2200      	movs	r2, #0
  409044:	2300      	movs	r3, #0
  409046:	f7fd faa1 	bl	40658c <__aeabi_dcmpeq>
  40904a:	4680      	mov	r8, r0
  40904c:	2800      	cmp	r0, #0
  40904e:	d02d      	beq.n	4090ac <_dtoa_r+0xa4>
  409050:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409052:	2301      	movs	r3, #1
  409054:	6013      	str	r3, [r2, #0]
  409056:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409058:	2b00      	cmp	r3, #0
  40905a:	f000 80bd 	beq.w	4091d8 <_dtoa_r+0x1d0>
  40905e:	4895      	ldr	r0, [pc, #596]	; (4092b4 <_dtoa_r+0x2ac>)
  409060:	6018      	str	r0, [r3, #0]
  409062:	3801      	subs	r0, #1
  409064:	b01b      	add	sp, #108	; 0x6c
  409066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40906a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40906c:	f242 730f 	movw	r3, #9999	; 0x270f
  409070:	6013      	str	r3, [r2, #0]
  409072:	f1ba 0f00 	cmp.w	sl, #0
  409076:	d10d      	bne.n	409094 <_dtoa_r+0x8c>
  409078:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40907c:	b955      	cbnz	r5, 409094 <_dtoa_r+0x8c>
  40907e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409080:	488d      	ldr	r0, [pc, #564]	; (4092b8 <_dtoa_r+0x2b0>)
  409082:	2b00      	cmp	r3, #0
  409084:	d0ee      	beq.n	409064 <_dtoa_r+0x5c>
  409086:	f100 0308 	add.w	r3, r0, #8
  40908a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40908c:	6013      	str	r3, [r2, #0]
  40908e:	b01b      	add	sp, #108	; 0x6c
  409090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409096:	4889      	ldr	r0, [pc, #548]	; (4092bc <_dtoa_r+0x2b4>)
  409098:	2b00      	cmp	r3, #0
  40909a:	d0e3      	beq.n	409064 <_dtoa_r+0x5c>
  40909c:	1cc3      	adds	r3, r0, #3
  40909e:	e7f4      	b.n	40908a <_dtoa_r+0x82>
  4090a0:	2301      	movs	r3, #1
  4090a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4090a6:	6033      	str	r3, [r6, #0]
  4090a8:	46ab      	mov	fp, r5
  4090aa:	e7c5      	b.n	409038 <_dtoa_r+0x30>
  4090ac:	aa18      	add	r2, sp, #96	; 0x60
  4090ae:	ab19      	add	r3, sp, #100	; 0x64
  4090b0:	9201      	str	r2, [sp, #4]
  4090b2:	9300      	str	r3, [sp, #0]
  4090b4:	4652      	mov	r2, sl
  4090b6:	465b      	mov	r3, fp
  4090b8:	4620      	mov	r0, r4
  4090ba:	f001 fed3 	bl	40ae64 <__d2b>
  4090be:	0d2b      	lsrs	r3, r5, #20
  4090c0:	4681      	mov	r9, r0
  4090c2:	d071      	beq.n	4091a8 <_dtoa_r+0x1a0>
  4090c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4090c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4090cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4090ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4090d2:	4650      	mov	r0, sl
  4090d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4090d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4090dc:	2200      	movs	r2, #0
  4090de:	4b78      	ldr	r3, [pc, #480]	; (4092c0 <_dtoa_r+0x2b8>)
  4090e0:	f7fc fe38 	bl	405d54 <__aeabi_dsub>
  4090e4:	a36c      	add	r3, pc, #432	; (adr r3, 409298 <_dtoa_r+0x290>)
  4090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090ea:	f7fc ffe7 	bl	4060bc <__aeabi_dmul>
  4090ee:	a36c      	add	r3, pc, #432	; (adr r3, 4092a0 <_dtoa_r+0x298>)
  4090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090f4:	f7fc fe30 	bl	405d58 <__adddf3>
  4090f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4090fc:	4630      	mov	r0, r6
  4090fe:	f7fc ff77 	bl	405ff0 <__aeabi_i2d>
  409102:	a369      	add	r3, pc, #420	; (adr r3, 4092a8 <_dtoa_r+0x2a0>)
  409104:	e9d3 2300 	ldrd	r2, r3, [r3]
  409108:	f7fc ffd8 	bl	4060bc <__aeabi_dmul>
  40910c:	4602      	mov	r2, r0
  40910e:	460b      	mov	r3, r1
  409110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409114:	f7fc fe20 	bl	405d58 <__adddf3>
  409118:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40911c:	f002 fbd8 	bl	40b8d0 <__aeabi_d2iz>
  409120:	2200      	movs	r2, #0
  409122:	9002      	str	r0, [sp, #8]
  409124:	2300      	movs	r3, #0
  409126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40912a:	f7fd fa39 	bl	4065a0 <__aeabi_dcmplt>
  40912e:	2800      	cmp	r0, #0
  409130:	f040 8173 	bne.w	40941a <_dtoa_r+0x412>
  409134:	9d02      	ldr	r5, [sp, #8]
  409136:	2d16      	cmp	r5, #22
  409138:	f200 815d 	bhi.w	4093f6 <_dtoa_r+0x3ee>
  40913c:	4b61      	ldr	r3, [pc, #388]	; (4092c4 <_dtoa_r+0x2bc>)
  40913e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  409142:	e9d3 0100 	ldrd	r0, r1, [r3]
  409146:	4652      	mov	r2, sl
  409148:	465b      	mov	r3, fp
  40914a:	f7fd fa47 	bl	4065dc <__aeabi_dcmpgt>
  40914e:	2800      	cmp	r0, #0
  409150:	f000 81c5 	beq.w	4094de <_dtoa_r+0x4d6>
  409154:	1e6b      	subs	r3, r5, #1
  409156:	9302      	str	r3, [sp, #8]
  409158:	2300      	movs	r3, #0
  40915a:	930e      	str	r3, [sp, #56]	; 0x38
  40915c:	1bbf      	subs	r7, r7, r6
  40915e:	1e7b      	subs	r3, r7, #1
  409160:	9306      	str	r3, [sp, #24]
  409162:	f100 8154 	bmi.w	40940e <_dtoa_r+0x406>
  409166:	2300      	movs	r3, #0
  409168:	9308      	str	r3, [sp, #32]
  40916a:	9b02      	ldr	r3, [sp, #8]
  40916c:	2b00      	cmp	r3, #0
  40916e:	f2c0 8145 	blt.w	4093fc <_dtoa_r+0x3f4>
  409172:	9a06      	ldr	r2, [sp, #24]
  409174:	930d      	str	r3, [sp, #52]	; 0x34
  409176:	4611      	mov	r1, r2
  409178:	4419      	add	r1, r3
  40917a:	2300      	movs	r3, #0
  40917c:	9106      	str	r1, [sp, #24]
  40917e:	930c      	str	r3, [sp, #48]	; 0x30
  409180:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409182:	2b09      	cmp	r3, #9
  409184:	d82a      	bhi.n	4091dc <_dtoa_r+0x1d4>
  409186:	2b05      	cmp	r3, #5
  409188:	f340 865b 	ble.w	409e42 <_dtoa_r+0xe3a>
  40918c:	3b04      	subs	r3, #4
  40918e:	9324      	str	r3, [sp, #144]	; 0x90
  409190:	2500      	movs	r5, #0
  409192:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409194:	3b02      	subs	r3, #2
  409196:	2b03      	cmp	r3, #3
  409198:	f200 8642 	bhi.w	409e20 <_dtoa_r+0xe18>
  40919c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4091a0:	02c903d4 	.word	0x02c903d4
  4091a4:	046103df 	.word	0x046103df
  4091a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4091aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4091ac:	443e      	add	r6, r7
  4091ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4091b2:	2b20      	cmp	r3, #32
  4091b4:	f340 818e 	ble.w	4094d4 <_dtoa_r+0x4cc>
  4091b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4091bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4091c0:	409d      	lsls	r5, r3
  4091c2:	fa2a f000 	lsr.w	r0, sl, r0
  4091c6:	4328      	orrs	r0, r5
  4091c8:	f7fc ff02 	bl	405fd0 <__aeabi_ui2d>
  4091cc:	2301      	movs	r3, #1
  4091ce:	3e01      	subs	r6, #1
  4091d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4091d4:	9314      	str	r3, [sp, #80]	; 0x50
  4091d6:	e781      	b.n	4090dc <_dtoa_r+0xd4>
  4091d8:	483b      	ldr	r0, [pc, #236]	; (4092c8 <_dtoa_r+0x2c0>)
  4091da:	e743      	b.n	409064 <_dtoa_r+0x5c>
  4091dc:	2100      	movs	r1, #0
  4091de:	6461      	str	r1, [r4, #68]	; 0x44
  4091e0:	4620      	mov	r0, r4
  4091e2:	9125      	str	r1, [sp, #148]	; 0x94
  4091e4:	f001 fba0 	bl	40a928 <_Balloc>
  4091e8:	f04f 33ff 	mov.w	r3, #4294967295
  4091ec:	930a      	str	r3, [sp, #40]	; 0x28
  4091ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4091f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4091f2:	2301      	movs	r3, #1
  4091f4:	9004      	str	r0, [sp, #16]
  4091f6:	6420      	str	r0, [r4, #64]	; 0x40
  4091f8:	9224      	str	r2, [sp, #144]	; 0x90
  4091fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4091fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4091fe:	2b00      	cmp	r3, #0
  409200:	f2c0 80d9 	blt.w	4093b6 <_dtoa_r+0x3ae>
  409204:	9a02      	ldr	r2, [sp, #8]
  409206:	2a0e      	cmp	r2, #14
  409208:	f300 80d5 	bgt.w	4093b6 <_dtoa_r+0x3ae>
  40920c:	4b2d      	ldr	r3, [pc, #180]	; (4092c4 <_dtoa_r+0x2bc>)
  40920e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409212:	e9d3 2300 	ldrd	r2, r3, [r3]
  409216:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40921a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40921c:	2b00      	cmp	r3, #0
  40921e:	f2c0 83ba 	blt.w	409996 <_dtoa_r+0x98e>
  409222:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  409226:	4650      	mov	r0, sl
  409228:	462a      	mov	r2, r5
  40922a:	4633      	mov	r3, r6
  40922c:	4659      	mov	r1, fp
  40922e:	f7fd f86f 	bl	406310 <__aeabi_ddiv>
  409232:	f002 fb4d 	bl	40b8d0 <__aeabi_d2iz>
  409236:	4680      	mov	r8, r0
  409238:	f7fc feda 	bl	405ff0 <__aeabi_i2d>
  40923c:	462a      	mov	r2, r5
  40923e:	4633      	mov	r3, r6
  409240:	f7fc ff3c 	bl	4060bc <__aeabi_dmul>
  409244:	460b      	mov	r3, r1
  409246:	4602      	mov	r2, r0
  409248:	4659      	mov	r1, fp
  40924a:	4650      	mov	r0, sl
  40924c:	f7fc fd82 	bl	405d54 <__aeabi_dsub>
  409250:	9d04      	ldr	r5, [sp, #16]
  409252:	f108 0330 	add.w	r3, r8, #48	; 0x30
  409256:	702b      	strb	r3, [r5, #0]
  409258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40925a:	2b01      	cmp	r3, #1
  40925c:	4606      	mov	r6, r0
  40925e:	460f      	mov	r7, r1
  409260:	f105 0501 	add.w	r5, r5, #1
  409264:	d068      	beq.n	409338 <_dtoa_r+0x330>
  409266:	2200      	movs	r2, #0
  409268:	4b18      	ldr	r3, [pc, #96]	; (4092cc <_dtoa_r+0x2c4>)
  40926a:	f7fc ff27 	bl	4060bc <__aeabi_dmul>
  40926e:	2200      	movs	r2, #0
  409270:	2300      	movs	r3, #0
  409272:	4606      	mov	r6, r0
  409274:	460f      	mov	r7, r1
  409276:	f7fd f989 	bl	40658c <__aeabi_dcmpeq>
  40927a:	2800      	cmp	r0, #0
  40927c:	f040 8088 	bne.w	409390 <_dtoa_r+0x388>
  409280:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  409284:	f04f 0a00 	mov.w	sl, #0
  409288:	f8df b040 	ldr.w	fp, [pc, #64]	; 4092cc <_dtoa_r+0x2c4>
  40928c:	940c      	str	r4, [sp, #48]	; 0x30
  40928e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409292:	e028      	b.n	4092e6 <_dtoa_r+0x2de>
  409294:	f3af 8000 	nop.w
  409298:	636f4361 	.word	0x636f4361
  40929c:	3fd287a7 	.word	0x3fd287a7
  4092a0:	8b60c8b3 	.word	0x8b60c8b3
  4092a4:	3fc68a28 	.word	0x3fc68a28
  4092a8:	509f79fb 	.word	0x509f79fb
  4092ac:	3fd34413 	.word	0x3fd34413
  4092b0:	7ff00000 	.word	0x7ff00000
  4092b4:	0040c26d 	.word	0x0040c26d
  4092b8:	0040c290 	.word	0x0040c290
  4092bc:	0040c29c 	.word	0x0040c29c
  4092c0:	3ff80000 	.word	0x3ff80000
  4092c4:	0040c2c8 	.word	0x0040c2c8
  4092c8:	0040c26c 	.word	0x0040c26c
  4092cc:	40240000 	.word	0x40240000
  4092d0:	f7fc fef4 	bl	4060bc <__aeabi_dmul>
  4092d4:	2200      	movs	r2, #0
  4092d6:	2300      	movs	r3, #0
  4092d8:	4606      	mov	r6, r0
  4092da:	460f      	mov	r7, r1
  4092dc:	f7fd f956 	bl	40658c <__aeabi_dcmpeq>
  4092e0:	2800      	cmp	r0, #0
  4092e2:	f040 83c1 	bne.w	409a68 <_dtoa_r+0xa60>
  4092e6:	4642      	mov	r2, r8
  4092e8:	464b      	mov	r3, r9
  4092ea:	4630      	mov	r0, r6
  4092ec:	4639      	mov	r1, r7
  4092ee:	f7fd f80f 	bl	406310 <__aeabi_ddiv>
  4092f2:	f002 faed 	bl	40b8d0 <__aeabi_d2iz>
  4092f6:	4604      	mov	r4, r0
  4092f8:	f7fc fe7a 	bl	405ff0 <__aeabi_i2d>
  4092fc:	4642      	mov	r2, r8
  4092fe:	464b      	mov	r3, r9
  409300:	f7fc fedc 	bl	4060bc <__aeabi_dmul>
  409304:	4602      	mov	r2, r0
  409306:	460b      	mov	r3, r1
  409308:	4630      	mov	r0, r6
  40930a:	4639      	mov	r1, r7
  40930c:	f7fc fd22 	bl	405d54 <__aeabi_dsub>
  409310:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  409314:	9e04      	ldr	r6, [sp, #16]
  409316:	f805 eb01 	strb.w	lr, [r5], #1
  40931a:	eba5 0e06 	sub.w	lr, r5, r6
  40931e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409320:	45b6      	cmp	lr, r6
  409322:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409326:	4652      	mov	r2, sl
  409328:	465b      	mov	r3, fp
  40932a:	d1d1      	bne.n	4092d0 <_dtoa_r+0x2c8>
  40932c:	46a0      	mov	r8, r4
  40932e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409332:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409334:	4606      	mov	r6, r0
  409336:	460f      	mov	r7, r1
  409338:	4632      	mov	r2, r6
  40933a:	463b      	mov	r3, r7
  40933c:	4630      	mov	r0, r6
  40933e:	4639      	mov	r1, r7
  409340:	f7fc fd0a 	bl	405d58 <__adddf3>
  409344:	4606      	mov	r6, r0
  409346:	460f      	mov	r7, r1
  409348:	4602      	mov	r2, r0
  40934a:	460b      	mov	r3, r1
  40934c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409350:	f7fd f926 	bl	4065a0 <__aeabi_dcmplt>
  409354:	b948      	cbnz	r0, 40936a <_dtoa_r+0x362>
  409356:	4632      	mov	r2, r6
  409358:	463b      	mov	r3, r7
  40935a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40935e:	f7fd f915 	bl	40658c <__aeabi_dcmpeq>
  409362:	b1a8      	cbz	r0, 409390 <_dtoa_r+0x388>
  409364:	f018 0f01 	tst.w	r8, #1
  409368:	d012      	beq.n	409390 <_dtoa_r+0x388>
  40936a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40936e:	9a04      	ldr	r2, [sp, #16]
  409370:	1e6b      	subs	r3, r5, #1
  409372:	e004      	b.n	40937e <_dtoa_r+0x376>
  409374:	429a      	cmp	r2, r3
  409376:	f000 8401 	beq.w	409b7c <_dtoa_r+0xb74>
  40937a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40937e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  409382:	f103 0501 	add.w	r5, r3, #1
  409386:	d0f5      	beq.n	409374 <_dtoa_r+0x36c>
  409388:	f108 0801 	add.w	r8, r8, #1
  40938c:	f883 8000 	strb.w	r8, [r3]
  409390:	4649      	mov	r1, r9
  409392:	4620      	mov	r0, r4
  409394:	f001 faee 	bl	40a974 <_Bfree>
  409398:	2200      	movs	r2, #0
  40939a:	9b02      	ldr	r3, [sp, #8]
  40939c:	702a      	strb	r2, [r5, #0]
  40939e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4093a0:	3301      	adds	r3, #1
  4093a2:	6013      	str	r3, [r2, #0]
  4093a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4093a6:	2b00      	cmp	r3, #0
  4093a8:	f000 839e 	beq.w	409ae8 <_dtoa_r+0xae0>
  4093ac:	9804      	ldr	r0, [sp, #16]
  4093ae:	601d      	str	r5, [r3, #0]
  4093b0:	b01b      	add	sp, #108	; 0x6c
  4093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4093b8:	2a00      	cmp	r2, #0
  4093ba:	d03e      	beq.n	40943a <_dtoa_r+0x432>
  4093bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4093be:	2a01      	cmp	r2, #1
  4093c0:	f340 8311 	ble.w	4099e6 <_dtoa_r+0x9de>
  4093c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4093c8:	1e5f      	subs	r7, r3, #1
  4093ca:	42ba      	cmp	r2, r7
  4093cc:	f2c0 838f 	blt.w	409aee <_dtoa_r+0xae6>
  4093d0:	1bd7      	subs	r7, r2, r7
  4093d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093d4:	2b00      	cmp	r3, #0
  4093d6:	f2c0 848b 	blt.w	409cf0 <_dtoa_r+0xce8>
  4093da:	9d08      	ldr	r5, [sp, #32]
  4093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093de:	9a08      	ldr	r2, [sp, #32]
  4093e0:	441a      	add	r2, r3
  4093e2:	9208      	str	r2, [sp, #32]
  4093e4:	9a06      	ldr	r2, [sp, #24]
  4093e6:	2101      	movs	r1, #1
  4093e8:	441a      	add	r2, r3
  4093ea:	4620      	mov	r0, r4
  4093ec:	9206      	str	r2, [sp, #24]
  4093ee:	f001 fb5b 	bl	40aaa8 <__i2b>
  4093f2:	4606      	mov	r6, r0
  4093f4:	e024      	b.n	409440 <_dtoa_r+0x438>
  4093f6:	2301      	movs	r3, #1
  4093f8:	930e      	str	r3, [sp, #56]	; 0x38
  4093fa:	e6af      	b.n	40915c <_dtoa_r+0x154>
  4093fc:	9a08      	ldr	r2, [sp, #32]
  4093fe:	9b02      	ldr	r3, [sp, #8]
  409400:	1ad2      	subs	r2, r2, r3
  409402:	425b      	negs	r3, r3
  409404:	930c      	str	r3, [sp, #48]	; 0x30
  409406:	2300      	movs	r3, #0
  409408:	9208      	str	r2, [sp, #32]
  40940a:	930d      	str	r3, [sp, #52]	; 0x34
  40940c:	e6b8      	b.n	409180 <_dtoa_r+0x178>
  40940e:	f1c7 0301 	rsb	r3, r7, #1
  409412:	9308      	str	r3, [sp, #32]
  409414:	2300      	movs	r3, #0
  409416:	9306      	str	r3, [sp, #24]
  409418:	e6a7      	b.n	40916a <_dtoa_r+0x162>
  40941a:	9d02      	ldr	r5, [sp, #8]
  40941c:	4628      	mov	r0, r5
  40941e:	f7fc fde7 	bl	405ff0 <__aeabi_i2d>
  409422:	4602      	mov	r2, r0
  409424:	460b      	mov	r3, r1
  409426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40942a:	f7fd f8af 	bl	40658c <__aeabi_dcmpeq>
  40942e:	2800      	cmp	r0, #0
  409430:	f47f ae80 	bne.w	409134 <_dtoa_r+0x12c>
  409434:	1e6b      	subs	r3, r5, #1
  409436:	9302      	str	r3, [sp, #8]
  409438:	e67c      	b.n	409134 <_dtoa_r+0x12c>
  40943a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40943c:	9d08      	ldr	r5, [sp, #32]
  40943e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  409440:	2d00      	cmp	r5, #0
  409442:	dd0c      	ble.n	40945e <_dtoa_r+0x456>
  409444:	9906      	ldr	r1, [sp, #24]
  409446:	2900      	cmp	r1, #0
  409448:	460b      	mov	r3, r1
  40944a:	dd08      	ble.n	40945e <_dtoa_r+0x456>
  40944c:	42a9      	cmp	r1, r5
  40944e:	9a08      	ldr	r2, [sp, #32]
  409450:	bfa8      	it	ge
  409452:	462b      	movge	r3, r5
  409454:	1ad2      	subs	r2, r2, r3
  409456:	1aed      	subs	r5, r5, r3
  409458:	1acb      	subs	r3, r1, r3
  40945a:	9208      	str	r2, [sp, #32]
  40945c:	9306      	str	r3, [sp, #24]
  40945e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409460:	b1d3      	cbz	r3, 409498 <_dtoa_r+0x490>
  409462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409464:	2b00      	cmp	r3, #0
  409466:	f000 82b7 	beq.w	4099d8 <_dtoa_r+0x9d0>
  40946a:	2f00      	cmp	r7, #0
  40946c:	dd10      	ble.n	409490 <_dtoa_r+0x488>
  40946e:	4631      	mov	r1, r6
  409470:	463a      	mov	r2, r7
  409472:	4620      	mov	r0, r4
  409474:	f001 fbb4 	bl	40abe0 <__pow5mult>
  409478:	464a      	mov	r2, r9
  40947a:	4601      	mov	r1, r0
  40947c:	4606      	mov	r6, r0
  40947e:	4620      	mov	r0, r4
  409480:	f001 fb1c 	bl	40aabc <__multiply>
  409484:	4649      	mov	r1, r9
  409486:	4680      	mov	r8, r0
  409488:	4620      	mov	r0, r4
  40948a:	f001 fa73 	bl	40a974 <_Bfree>
  40948e:	46c1      	mov	r9, r8
  409490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409492:	1bda      	subs	r2, r3, r7
  409494:	f040 82a1 	bne.w	4099da <_dtoa_r+0x9d2>
  409498:	2101      	movs	r1, #1
  40949a:	4620      	mov	r0, r4
  40949c:	f001 fb04 	bl	40aaa8 <__i2b>
  4094a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4094a2:	2b00      	cmp	r3, #0
  4094a4:	4680      	mov	r8, r0
  4094a6:	dd1c      	ble.n	4094e2 <_dtoa_r+0x4da>
  4094a8:	4601      	mov	r1, r0
  4094aa:	461a      	mov	r2, r3
  4094ac:	4620      	mov	r0, r4
  4094ae:	f001 fb97 	bl	40abe0 <__pow5mult>
  4094b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4094b4:	2b01      	cmp	r3, #1
  4094b6:	4680      	mov	r8, r0
  4094b8:	f340 8254 	ble.w	409964 <_dtoa_r+0x95c>
  4094bc:	2300      	movs	r3, #0
  4094be:	930c      	str	r3, [sp, #48]	; 0x30
  4094c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4094c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4094c8:	6918      	ldr	r0, [r3, #16]
  4094ca:	f001 fa9d 	bl	40aa08 <__hi0bits>
  4094ce:	f1c0 0020 	rsb	r0, r0, #32
  4094d2:	e010      	b.n	4094f6 <_dtoa_r+0x4ee>
  4094d4:	f1c3 0520 	rsb	r5, r3, #32
  4094d8:	fa0a f005 	lsl.w	r0, sl, r5
  4094dc:	e674      	b.n	4091c8 <_dtoa_r+0x1c0>
  4094de:	900e      	str	r0, [sp, #56]	; 0x38
  4094e0:	e63c      	b.n	40915c <_dtoa_r+0x154>
  4094e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4094e4:	2b01      	cmp	r3, #1
  4094e6:	f340 8287 	ble.w	4099f8 <_dtoa_r+0x9f0>
  4094ea:	2300      	movs	r3, #0
  4094ec:	930c      	str	r3, [sp, #48]	; 0x30
  4094ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4094f0:	2001      	movs	r0, #1
  4094f2:	2b00      	cmp	r3, #0
  4094f4:	d1e4      	bne.n	4094c0 <_dtoa_r+0x4b8>
  4094f6:	9a06      	ldr	r2, [sp, #24]
  4094f8:	4410      	add	r0, r2
  4094fa:	f010 001f 	ands.w	r0, r0, #31
  4094fe:	f000 80a1 	beq.w	409644 <_dtoa_r+0x63c>
  409502:	f1c0 0320 	rsb	r3, r0, #32
  409506:	2b04      	cmp	r3, #4
  409508:	f340 849e 	ble.w	409e48 <_dtoa_r+0xe40>
  40950c:	9b08      	ldr	r3, [sp, #32]
  40950e:	f1c0 001c 	rsb	r0, r0, #28
  409512:	4403      	add	r3, r0
  409514:	9308      	str	r3, [sp, #32]
  409516:	4613      	mov	r3, r2
  409518:	4403      	add	r3, r0
  40951a:	4405      	add	r5, r0
  40951c:	9306      	str	r3, [sp, #24]
  40951e:	9b08      	ldr	r3, [sp, #32]
  409520:	2b00      	cmp	r3, #0
  409522:	dd05      	ble.n	409530 <_dtoa_r+0x528>
  409524:	4649      	mov	r1, r9
  409526:	461a      	mov	r2, r3
  409528:	4620      	mov	r0, r4
  40952a:	f001 fba9 	bl	40ac80 <__lshift>
  40952e:	4681      	mov	r9, r0
  409530:	9b06      	ldr	r3, [sp, #24]
  409532:	2b00      	cmp	r3, #0
  409534:	dd05      	ble.n	409542 <_dtoa_r+0x53a>
  409536:	4641      	mov	r1, r8
  409538:	461a      	mov	r2, r3
  40953a:	4620      	mov	r0, r4
  40953c:	f001 fba0 	bl	40ac80 <__lshift>
  409540:	4680      	mov	r8, r0
  409542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409544:	2b00      	cmp	r3, #0
  409546:	f040 8086 	bne.w	409656 <_dtoa_r+0x64e>
  40954a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40954c:	2b00      	cmp	r3, #0
  40954e:	f340 8266 	ble.w	409a1e <_dtoa_r+0xa16>
  409552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409554:	2b00      	cmp	r3, #0
  409556:	f000 8098 	beq.w	40968a <_dtoa_r+0x682>
  40955a:	2d00      	cmp	r5, #0
  40955c:	dd05      	ble.n	40956a <_dtoa_r+0x562>
  40955e:	4631      	mov	r1, r6
  409560:	462a      	mov	r2, r5
  409562:	4620      	mov	r0, r4
  409564:	f001 fb8c 	bl	40ac80 <__lshift>
  409568:	4606      	mov	r6, r0
  40956a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40956c:	2b00      	cmp	r3, #0
  40956e:	f040 8337 	bne.w	409be0 <_dtoa_r+0xbd8>
  409572:	9606      	str	r6, [sp, #24]
  409574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409576:	9a04      	ldr	r2, [sp, #16]
  409578:	f8dd b018 	ldr.w	fp, [sp, #24]
  40957c:	3b01      	subs	r3, #1
  40957e:	18d3      	adds	r3, r2, r3
  409580:	930b      	str	r3, [sp, #44]	; 0x2c
  409582:	f00a 0301 	and.w	r3, sl, #1
  409586:	930c      	str	r3, [sp, #48]	; 0x30
  409588:	4617      	mov	r7, r2
  40958a:	46c2      	mov	sl, r8
  40958c:	4651      	mov	r1, sl
  40958e:	4648      	mov	r0, r9
  409590:	f7ff fca6 	bl	408ee0 <quorem>
  409594:	4631      	mov	r1, r6
  409596:	4605      	mov	r5, r0
  409598:	4648      	mov	r0, r9
  40959a:	f001 fbc3 	bl	40ad24 <__mcmp>
  40959e:	465a      	mov	r2, fp
  4095a0:	900a      	str	r0, [sp, #40]	; 0x28
  4095a2:	4651      	mov	r1, sl
  4095a4:	4620      	mov	r0, r4
  4095a6:	f001 fbd9 	bl	40ad5c <__mdiff>
  4095aa:	68c2      	ldr	r2, [r0, #12]
  4095ac:	4680      	mov	r8, r0
  4095ae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4095b2:	2a00      	cmp	r2, #0
  4095b4:	f040 822b 	bne.w	409a0e <_dtoa_r+0xa06>
  4095b8:	4601      	mov	r1, r0
  4095ba:	4648      	mov	r0, r9
  4095bc:	9308      	str	r3, [sp, #32]
  4095be:	f001 fbb1 	bl	40ad24 <__mcmp>
  4095c2:	4641      	mov	r1, r8
  4095c4:	9006      	str	r0, [sp, #24]
  4095c6:	4620      	mov	r0, r4
  4095c8:	f001 f9d4 	bl	40a974 <_Bfree>
  4095cc:	9a06      	ldr	r2, [sp, #24]
  4095ce:	9b08      	ldr	r3, [sp, #32]
  4095d0:	b932      	cbnz	r2, 4095e0 <_dtoa_r+0x5d8>
  4095d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4095d4:	b921      	cbnz	r1, 4095e0 <_dtoa_r+0x5d8>
  4095d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4095d8:	2a00      	cmp	r2, #0
  4095da:	f000 83ef 	beq.w	409dbc <_dtoa_r+0xdb4>
  4095de:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4095e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4095e2:	2900      	cmp	r1, #0
  4095e4:	f2c0 829f 	blt.w	409b26 <_dtoa_r+0xb1e>
  4095e8:	d105      	bne.n	4095f6 <_dtoa_r+0x5ee>
  4095ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4095ec:	b919      	cbnz	r1, 4095f6 <_dtoa_r+0x5ee>
  4095ee:	990c      	ldr	r1, [sp, #48]	; 0x30
  4095f0:	2900      	cmp	r1, #0
  4095f2:	f000 8298 	beq.w	409b26 <_dtoa_r+0xb1e>
  4095f6:	2a00      	cmp	r2, #0
  4095f8:	f300 8306 	bgt.w	409c08 <_dtoa_r+0xc00>
  4095fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4095fe:	703b      	strb	r3, [r7, #0]
  409600:	f107 0801 	add.w	r8, r7, #1
  409604:	4297      	cmp	r7, r2
  409606:	4645      	mov	r5, r8
  409608:	f000 830c 	beq.w	409c24 <_dtoa_r+0xc1c>
  40960c:	4649      	mov	r1, r9
  40960e:	2300      	movs	r3, #0
  409610:	220a      	movs	r2, #10
  409612:	4620      	mov	r0, r4
  409614:	f001 f9b8 	bl	40a988 <__multadd>
  409618:	455e      	cmp	r6, fp
  40961a:	4681      	mov	r9, r0
  40961c:	4631      	mov	r1, r6
  40961e:	f04f 0300 	mov.w	r3, #0
  409622:	f04f 020a 	mov.w	r2, #10
  409626:	4620      	mov	r0, r4
  409628:	f000 81eb 	beq.w	409a02 <_dtoa_r+0x9fa>
  40962c:	f001 f9ac 	bl	40a988 <__multadd>
  409630:	4659      	mov	r1, fp
  409632:	4606      	mov	r6, r0
  409634:	2300      	movs	r3, #0
  409636:	220a      	movs	r2, #10
  409638:	4620      	mov	r0, r4
  40963a:	f001 f9a5 	bl	40a988 <__multadd>
  40963e:	4647      	mov	r7, r8
  409640:	4683      	mov	fp, r0
  409642:	e7a3      	b.n	40958c <_dtoa_r+0x584>
  409644:	201c      	movs	r0, #28
  409646:	9b08      	ldr	r3, [sp, #32]
  409648:	4403      	add	r3, r0
  40964a:	9308      	str	r3, [sp, #32]
  40964c:	9b06      	ldr	r3, [sp, #24]
  40964e:	4403      	add	r3, r0
  409650:	4405      	add	r5, r0
  409652:	9306      	str	r3, [sp, #24]
  409654:	e763      	b.n	40951e <_dtoa_r+0x516>
  409656:	4641      	mov	r1, r8
  409658:	4648      	mov	r0, r9
  40965a:	f001 fb63 	bl	40ad24 <__mcmp>
  40965e:	2800      	cmp	r0, #0
  409660:	f6bf af73 	bge.w	40954a <_dtoa_r+0x542>
  409664:	9f02      	ldr	r7, [sp, #8]
  409666:	4649      	mov	r1, r9
  409668:	2300      	movs	r3, #0
  40966a:	220a      	movs	r2, #10
  40966c:	4620      	mov	r0, r4
  40966e:	3f01      	subs	r7, #1
  409670:	9702      	str	r7, [sp, #8]
  409672:	f001 f989 	bl	40a988 <__multadd>
  409676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409678:	4681      	mov	r9, r0
  40967a:	2b00      	cmp	r3, #0
  40967c:	f040 83b6 	bne.w	409dec <_dtoa_r+0xde4>
  409680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409682:	2b00      	cmp	r3, #0
  409684:	f340 83bf 	ble.w	409e06 <_dtoa_r+0xdfe>
  409688:	930a      	str	r3, [sp, #40]	; 0x28
  40968a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40968e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409690:	465d      	mov	r5, fp
  409692:	e002      	b.n	40969a <_dtoa_r+0x692>
  409694:	f001 f978 	bl	40a988 <__multadd>
  409698:	4681      	mov	r9, r0
  40969a:	4641      	mov	r1, r8
  40969c:	4648      	mov	r0, r9
  40969e:	f7ff fc1f 	bl	408ee0 <quorem>
  4096a2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4096a6:	f805 ab01 	strb.w	sl, [r5], #1
  4096aa:	eba5 030b 	sub.w	r3, r5, fp
  4096ae:	42bb      	cmp	r3, r7
  4096b0:	f04f 020a 	mov.w	r2, #10
  4096b4:	f04f 0300 	mov.w	r3, #0
  4096b8:	4649      	mov	r1, r9
  4096ba:	4620      	mov	r0, r4
  4096bc:	dbea      	blt.n	409694 <_dtoa_r+0x68c>
  4096be:	9b04      	ldr	r3, [sp, #16]
  4096c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4096c2:	2a01      	cmp	r2, #1
  4096c4:	bfac      	ite	ge
  4096c6:	189b      	addge	r3, r3, r2
  4096c8:	3301      	addlt	r3, #1
  4096ca:	461d      	mov	r5, r3
  4096cc:	f04f 0b00 	mov.w	fp, #0
  4096d0:	4649      	mov	r1, r9
  4096d2:	2201      	movs	r2, #1
  4096d4:	4620      	mov	r0, r4
  4096d6:	f001 fad3 	bl	40ac80 <__lshift>
  4096da:	4641      	mov	r1, r8
  4096dc:	4681      	mov	r9, r0
  4096de:	f001 fb21 	bl	40ad24 <__mcmp>
  4096e2:	2800      	cmp	r0, #0
  4096e4:	f340 823d 	ble.w	409b62 <_dtoa_r+0xb5a>
  4096e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4096ec:	9904      	ldr	r1, [sp, #16]
  4096ee:	1e6b      	subs	r3, r5, #1
  4096f0:	e004      	b.n	4096fc <_dtoa_r+0x6f4>
  4096f2:	428b      	cmp	r3, r1
  4096f4:	f000 81ae 	beq.w	409a54 <_dtoa_r+0xa4c>
  4096f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4096fc:	2a39      	cmp	r2, #57	; 0x39
  4096fe:	f103 0501 	add.w	r5, r3, #1
  409702:	d0f6      	beq.n	4096f2 <_dtoa_r+0x6ea>
  409704:	3201      	adds	r2, #1
  409706:	701a      	strb	r2, [r3, #0]
  409708:	4641      	mov	r1, r8
  40970a:	4620      	mov	r0, r4
  40970c:	f001 f932 	bl	40a974 <_Bfree>
  409710:	2e00      	cmp	r6, #0
  409712:	f43f ae3d 	beq.w	409390 <_dtoa_r+0x388>
  409716:	f1bb 0f00 	cmp.w	fp, #0
  40971a:	d005      	beq.n	409728 <_dtoa_r+0x720>
  40971c:	45b3      	cmp	fp, r6
  40971e:	d003      	beq.n	409728 <_dtoa_r+0x720>
  409720:	4659      	mov	r1, fp
  409722:	4620      	mov	r0, r4
  409724:	f001 f926 	bl	40a974 <_Bfree>
  409728:	4631      	mov	r1, r6
  40972a:	4620      	mov	r0, r4
  40972c:	f001 f922 	bl	40a974 <_Bfree>
  409730:	e62e      	b.n	409390 <_dtoa_r+0x388>
  409732:	2300      	movs	r3, #0
  409734:	930b      	str	r3, [sp, #44]	; 0x2c
  409736:	9b02      	ldr	r3, [sp, #8]
  409738:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40973a:	4413      	add	r3, r2
  40973c:	930f      	str	r3, [sp, #60]	; 0x3c
  40973e:	3301      	adds	r3, #1
  409740:	2b01      	cmp	r3, #1
  409742:	461f      	mov	r7, r3
  409744:	461e      	mov	r6, r3
  409746:	930a      	str	r3, [sp, #40]	; 0x28
  409748:	bfb8      	it	lt
  40974a:	2701      	movlt	r7, #1
  40974c:	2100      	movs	r1, #0
  40974e:	2f17      	cmp	r7, #23
  409750:	6461      	str	r1, [r4, #68]	; 0x44
  409752:	d90a      	bls.n	40976a <_dtoa_r+0x762>
  409754:	2201      	movs	r2, #1
  409756:	2304      	movs	r3, #4
  409758:	005b      	lsls	r3, r3, #1
  40975a:	f103 0014 	add.w	r0, r3, #20
  40975e:	4287      	cmp	r7, r0
  409760:	4611      	mov	r1, r2
  409762:	f102 0201 	add.w	r2, r2, #1
  409766:	d2f7      	bcs.n	409758 <_dtoa_r+0x750>
  409768:	6461      	str	r1, [r4, #68]	; 0x44
  40976a:	4620      	mov	r0, r4
  40976c:	f001 f8dc 	bl	40a928 <_Balloc>
  409770:	2e0e      	cmp	r6, #14
  409772:	9004      	str	r0, [sp, #16]
  409774:	6420      	str	r0, [r4, #64]	; 0x40
  409776:	f63f ad41 	bhi.w	4091fc <_dtoa_r+0x1f4>
  40977a:	2d00      	cmp	r5, #0
  40977c:	f43f ad3e 	beq.w	4091fc <_dtoa_r+0x1f4>
  409780:	9902      	ldr	r1, [sp, #8]
  409782:	2900      	cmp	r1, #0
  409784:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409788:	f340 8202 	ble.w	409b90 <_dtoa_r+0xb88>
  40978c:	4bb8      	ldr	r3, [pc, #736]	; (409a70 <_dtoa_r+0xa68>)
  40978e:	f001 020f 	and.w	r2, r1, #15
  409792:	110d      	asrs	r5, r1, #4
  409794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409798:	06e9      	lsls	r1, r5, #27
  40979a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40979e:	f140 81ae 	bpl.w	409afe <_dtoa_r+0xaf6>
  4097a2:	4bb4      	ldr	r3, [pc, #720]	; (409a74 <_dtoa_r+0xa6c>)
  4097a4:	4650      	mov	r0, sl
  4097a6:	4659      	mov	r1, fp
  4097a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4097ac:	f7fc fdb0 	bl	406310 <__aeabi_ddiv>
  4097b0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4097b4:	f005 050f 	and.w	r5, r5, #15
  4097b8:	f04f 0a03 	mov.w	sl, #3
  4097bc:	b18d      	cbz	r5, 4097e2 <_dtoa_r+0x7da>
  4097be:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 409a74 <_dtoa_r+0xa6c>
  4097c2:	07ea      	lsls	r2, r5, #31
  4097c4:	d509      	bpl.n	4097da <_dtoa_r+0x7d2>
  4097c6:	4630      	mov	r0, r6
  4097c8:	4639      	mov	r1, r7
  4097ca:	e9d8 2300 	ldrd	r2, r3, [r8]
  4097ce:	f7fc fc75 	bl	4060bc <__aeabi_dmul>
  4097d2:	f10a 0a01 	add.w	sl, sl, #1
  4097d6:	4606      	mov	r6, r0
  4097d8:	460f      	mov	r7, r1
  4097da:	106d      	asrs	r5, r5, #1
  4097dc:	f108 0808 	add.w	r8, r8, #8
  4097e0:	d1ef      	bne.n	4097c2 <_dtoa_r+0x7ba>
  4097e2:	463b      	mov	r3, r7
  4097e4:	4632      	mov	r2, r6
  4097e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4097ea:	f7fc fd91 	bl	406310 <__aeabi_ddiv>
  4097ee:	4607      	mov	r7, r0
  4097f0:	4688      	mov	r8, r1
  4097f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4097f4:	b143      	cbz	r3, 409808 <_dtoa_r+0x800>
  4097f6:	2200      	movs	r2, #0
  4097f8:	4b9f      	ldr	r3, [pc, #636]	; (409a78 <_dtoa_r+0xa70>)
  4097fa:	4638      	mov	r0, r7
  4097fc:	4641      	mov	r1, r8
  4097fe:	f7fc fecf 	bl	4065a0 <__aeabi_dcmplt>
  409802:	2800      	cmp	r0, #0
  409804:	f040 8286 	bne.w	409d14 <_dtoa_r+0xd0c>
  409808:	4650      	mov	r0, sl
  40980a:	f7fc fbf1 	bl	405ff0 <__aeabi_i2d>
  40980e:	463a      	mov	r2, r7
  409810:	4643      	mov	r3, r8
  409812:	f7fc fc53 	bl	4060bc <__aeabi_dmul>
  409816:	4b99      	ldr	r3, [pc, #612]	; (409a7c <_dtoa_r+0xa74>)
  409818:	2200      	movs	r2, #0
  40981a:	f7fc fa9d 	bl	405d58 <__adddf3>
  40981e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409820:	4605      	mov	r5, r0
  409822:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409826:	2b00      	cmp	r3, #0
  409828:	f000 813e 	beq.w	409aa8 <_dtoa_r+0xaa0>
  40982c:	9b02      	ldr	r3, [sp, #8]
  40982e:	9315      	str	r3, [sp, #84]	; 0x54
  409830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409832:	9312      	str	r3, [sp, #72]	; 0x48
  409834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409836:	2b00      	cmp	r3, #0
  409838:	f000 81fa 	beq.w	409c30 <_dtoa_r+0xc28>
  40983c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40983e:	4b8c      	ldr	r3, [pc, #560]	; (409a70 <_dtoa_r+0xa68>)
  409840:	498f      	ldr	r1, [pc, #572]	; (409a80 <_dtoa_r+0xa78>)
  409842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40984a:	2000      	movs	r0, #0
  40984c:	f7fc fd60 	bl	406310 <__aeabi_ddiv>
  409850:	462a      	mov	r2, r5
  409852:	4633      	mov	r3, r6
  409854:	f7fc fa7e 	bl	405d54 <__aeabi_dsub>
  409858:	4682      	mov	sl, r0
  40985a:	468b      	mov	fp, r1
  40985c:	4638      	mov	r0, r7
  40985e:	4641      	mov	r1, r8
  409860:	f002 f836 	bl	40b8d0 <__aeabi_d2iz>
  409864:	4605      	mov	r5, r0
  409866:	f7fc fbc3 	bl	405ff0 <__aeabi_i2d>
  40986a:	4602      	mov	r2, r0
  40986c:	460b      	mov	r3, r1
  40986e:	4638      	mov	r0, r7
  409870:	4641      	mov	r1, r8
  409872:	f7fc fa6f 	bl	405d54 <__aeabi_dsub>
  409876:	3530      	adds	r5, #48	; 0x30
  409878:	fa5f f885 	uxtb.w	r8, r5
  40987c:	9d04      	ldr	r5, [sp, #16]
  40987e:	4606      	mov	r6, r0
  409880:	460f      	mov	r7, r1
  409882:	f885 8000 	strb.w	r8, [r5]
  409886:	4602      	mov	r2, r0
  409888:	460b      	mov	r3, r1
  40988a:	4650      	mov	r0, sl
  40988c:	4659      	mov	r1, fp
  40988e:	3501      	adds	r5, #1
  409890:	f7fc fea4 	bl	4065dc <__aeabi_dcmpgt>
  409894:	2800      	cmp	r0, #0
  409896:	d154      	bne.n	409942 <_dtoa_r+0x93a>
  409898:	4632      	mov	r2, r6
  40989a:	463b      	mov	r3, r7
  40989c:	2000      	movs	r0, #0
  40989e:	4976      	ldr	r1, [pc, #472]	; (409a78 <_dtoa_r+0xa70>)
  4098a0:	f7fc fa58 	bl	405d54 <__aeabi_dsub>
  4098a4:	4602      	mov	r2, r0
  4098a6:	460b      	mov	r3, r1
  4098a8:	4650      	mov	r0, sl
  4098aa:	4659      	mov	r1, fp
  4098ac:	f7fc fe96 	bl	4065dc <__aeabi_dcmpgt>
  4098b0:	2800      	cmp	r0, #0
  4098b2:	f040 8270 	bne.w	409d96 <_dtoa_r+0xd8e>
  4098b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4098b8:	2a01      	cmp	r2, #1
  4098ba:	f000 8111 	beq.w	409ae0 <_dtoa_r+0xad8>
  4098be:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4098c0:	9a04      	ldr	r2, [sp, #16]
  4098c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4098c6:	4413      	add	r3, r2
  4098c8:	4699      	mov	r9, r3
  4098ca:	e00d      	b.n	4098e8 <_dtoa_r+0x8e0>
  4098cc:	2000      	movs	r0, #0
  4098ce:	496a      	ldr	r1, [pc, #424]	; (409a78 <_dtoa_r+0xa70>)
  4098d0:	f7fc fa40 	bl	405d54 <__aeabi_dsub>
  4098d4:	4652      	mov	r2, sl
  4098d6:	465b      	mov	r3, fp
  4098d8:	f7fc fe62 	bl	4065a0 <__aeabi_dcmplt>
  4098dc:	2800      	cmp	r0, #0
  4098de:	f040 8258 	bne.w	409d92 <_dtoa_r+0xd8a>
  4098e2:	454d      	cmp	r5, r9
  4098e4:	f000 80fa 	beq.w	409adc <_dtoa_r+0xad4>
  4098e8:	4650      	mov	r0, sl
  4098ea:	4659      	mov	r1, fp
  4098ec:	2200      	movs	r2, #0
  4098ee:	4b65      	ldr	r3, [pc, #404]	; (409a84 <_dtoa_r+0xa7c>)
  4098f0:	f7fc fbe4 	bl	4060bc <__aeabi_dmul>
  4098f4:	2200      	movs	r2, #0
  4098f6:	4b63      	ldr	r3, [pc, #396]	; (409a84 <_dtoa_r+0xa7c>)
  4098f8:	4682      	mov	sl, r0
  4098fa:	468b      	mov	fp, r1
  4098fc:	4630      	mov	r0, r6
  4098fe:	4639      	mov	r1, r7
  409900:	f7fc fbdc 	bl	4060bc <__aeabi_dmul>
  409904:	460f      	mov	r7, r1
  409906:	4606      	mov	r6, r0
  409908:	f001 ffe2 	bl	40b8d0 <__aeabi_d2iz>
  40990c:	4680      	mov	r8, r0
  40990e:	f7fc fb6f 	bl	405ff0 <__aeabi_i2d>
  409912:	4602      	mov	r2, r0
  409914:	460b      	mov	r3, r1
  409916:	4630      	mov	r0, r6
  409918:	4639      	mov	r1, r7
  40991a:	f7fc fa1b 	bl	405d54 <__aeabi_dsub>
  40991e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409922:	fa5f f888 	uxtb.w	r8, r8
  409926:	4652      	mov	r2, sl
  409928:	465b      	mov	r3, fp
  40992a:	f805 8b01 	strb.w	r8, [r5], #1
  40992e:	4606      	mov	r6, r0
  409930:	460f      	mov	r7, r1
  409932:	f7fc fe35 	bl	4065a0 <__aeabi_dcmplt>
  409936:	4632      	mov	r2, r6
  409938:	463b      	mov	r3, r7
  40993a:	2800      	cmp	r0, #0
  40993c:	d0c6      	beq.n	4098cc <_dtoa_r+0x8c4>
  40993e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409942:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409944:	9302      	str	r3, [sp, #8]
  409946:	e523      	b.n	409390 <_dtoa_r+0x388>
  409948:	2300      	movs	r3, #0
  40994a:	930b      	str	r3, [sp, #44]	; 0x2c
  40994c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40994e:	2b00      	cmp	r3, #0
  409950:	f340 80dc 	ble.w	409b0c <_dtoa_r+0xb04>
  409954:	461f      	mov	r7, r3
  409956:	461e      	mov	r6, r3
  409958:	930f      	str	r3, [sp, #60]	; 0x3c
  40995a:	930a      	str	r3, [sp, #40]	; 0x28
  40995c:	e6f6      	b.n	40974c <_dtoa_r+0x744>
  40995e:	2301      	movs	r3, #1
  409960:	930b      	str	r3, [sp, #44]	; 0x2c
  409962:	e7f3      	b.n	40994c <_dtoa_r+0x944>
  409964:	f1ba 0f00 	cmp.w	sl, #0
  409968:	f47f ada8 	bne.w	4094bc <_dtoa_r+0x4b4>
  40996c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409970:	2b00      	cmp	r3, #0
  409972:	f47f adba 	bne.w	4094ea <_dtoa_r+0x4e2>
  409976:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40997a:	0d3f      	lsrs	r7, r7, #20
  40997c:	053f      	lsls	r7, r7, #20
  40997e:	2f00      	cmp	r7, #0
  409980:	f000 820d 	beq.w	409d9e <_dtoa_r+0xd96>
  409984:	9b08      	ldr	r3, [sp, #32]
  409986:	3301      	adds	r3, #1
  409988:	9308      	str	r3, [sp, #32]
  40998a:	9b06      	ldr	r3, [sp, #24]
  40998c:	3301      	adds	r3, #1
  40998e:	9306      	str	r3, [sp, #24]
  409990:	2301      	movs	r3, #1
  409992:	930c      	str	r3, [sp, #48]	; 0x30
  409994:	e5ab      	b.n	4094ee <_dtoa_r+0x4e6>
  409996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409998:	2b00      	cmp	r3, #0
  40999a:	f73f ac42 	bgt.w	409222 <_dtoa_r+0x21a>
  40999e:	f040 8221 	bne.w	409de4 <_dtoa_r+0xddc>
  4099a2:	2200      	movs	r2, #0
  4099a4:	4b38      	ldr	r3, [pc, #224]	; (409a88 <_dtoa_r+0xa80>)
  4099a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4099aa:	f7fc fb87 	bl	4060bc <__aeabi_dmul>
  4099ae:	4652      	mov	r2, sl
  4099b0:	465b      	mov	r3, fp
  4099b2:	f7fc fe09 	bl	4065c8 <__aeabi_dcmpge>
  4099b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4099ba:	4646      	mov	r6, r8
  4099bc:	2800      	cmp	r0, #0
  4099be:	d041      	beq.n	409a44 <_dtoa_r+0xa3c>
  4099c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4099c2:	9d04      	ldr	r5, [sp, #16]
  4099c4:	43db      	mvns	r3, r3
  4099c6:	9302      	str	r3, [sp, #8]
  4099c8:	4641      	mov	r1, r8
  4099ca:	4620      	mov	r0, r4
  4099cc:	f000 ffd2 	bl	40a974 <_Bfree>
  4099d0:	2e00      	cmp	r6, #0
  4099d2:	f43f acdd 	beq.w	409390 <_dtoa_r+0x388>
  4099d6:	e6a7      	b.n	409728 <_dtoa_r+0x720>
  4099d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4099da:	4649      	mov	r1, r9
  4099dc:	4620      	mov	r0, r4
  4099de:	f001 f8ff 	bl	40abe0 <__pow5mult>
  4099e2:	4681      	mov	r9, r0
  4099e4:	e558      	b.n	409498 <_dtoa_r+0x490>
  4099e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4099e8:	2a00      	cmp	r2, #0
  4099ea:	f000 8187 	beq.w	409cfc <_dtoa_r+0xcf4>
  4099ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4099f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4099f4:	9d08      	ldr	r5, [sp, #32]
  4099f6:	e4f2      	b.n	4093de <_dtoa_r+0x3d6>
  4099f8:	f1ba 0f00 	cmp.w	sl, #0
  4099fc:	f47f ad75 	bne.w	4094ea <_dtoa_r+0x4e2>
  409a00:	e7b4      	b.n	40996c <_dtoa_r+0x964>
  409a02:	f000 ffc1 	bl	40a988 <__multadd>
  409a06:	4647      	mov	r7, r8
  409a08:	4606      	mov	r6, r0
  409a0a:	4683      	mov	fp, r0
  409a0c:	e5be      	b.n	40958c <_dtoa_r+0x584>
  409a0e:	4601      	mov	r1, r0
  409a10:	4620      	mov	r0, r4
  409a12:	9306      	str	r3, [sp, #24]
  409a14:	f000 ffae 	bl	40a974 <_Bfree>
  409a18:	2201      	movs	r2, #1
  409a1a:	9b06      	ldr	r3, [sp, #24]
  409a1c:	e5e0      	b.n	4095e0 <_dtoa_r+0x5d8>
  409a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a20:	2b02      	cmp	r3, #2
  409a22:	f77f ad96 	ble.w	409552 <_dtoa_r+0x54a>
  409a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a28:	2b00      	cmp	r3, #0
  409a2a:	d1c9      	bne.n	4099c0 <_dtoa_r+0x9b8>
  409a2c:	4641      	mov	r1, r8
  409a2e:	2205      	movs	r2, #5
  409a30:	4620      	mov	r0, r4
  409a32:	f000 ffa9 	bl	40a988 <__multadd>
  409a36:	4601      	mov	r1, r0
  409a38:	4680      	mov	r8, r0
  409a3a:	4648      	mov	r0, r9
  409a3c:	f001 f972 	bl	40ad24 <__mcmp>
  409a40:	2800      	cmp	r0, #0
  409a42:	ddbd      	ble.n	4099c0 <_dtoa_r+0x9b8>
  409a44:	9a02      	ldr	r2, [sp, #8]
  409a46:	9904      	ldr	r1, [sp, #16]
  409a48:	2331      	movs	r3, #49	; 0x31
  409a4a:	3201      	adds	r2, #1
  409a4c:	9202      	str	r2, [sp, #8]
  409a4e:	700b      	strb	r3, [r1, #0]
  409a50:	1c4d      	adds	r5, r1, #1
  409a52:	e7b9      	b.n	4099c8 <_dtoa_r+0x9c0>
  409a54:	9a02      	ldr	r2, [sp, #8]
  409a56:	3201      	adds	r2, #1
  409a58:	9202      	str	r2, [sp, #8]
  409a5a:	9a04      	ldr	r2, [sp, #16]
  409a5c:	2331      	movs	r3, #49	; 0x31
  409a5e:	7013      	strb	r3, [r2, #0]
  409a60:	e652      	b.n	409708 <_dtoa_r+0x700>
  409a62:	2301      	movs	r3, #1
  409a64:	930b      	str	r3, [sp, #44]	; 0x2c
  409a66:	e666      	b.n	409736 <_dtoa_r+0x72e>
  409a68:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409a6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409a6e:	e48f      	b.n	409390 <_dtoa_r+0x388>
  409a70:	0040c2c8 	.word	0x0040c2c8
  409a74:	0040c2a0 	.word	0x0040c2a0
  409a78:	3ff00000 	.word	0x3ff00000
  409a7c:	401c0000 	.word	0x401c0000
  409a80:	3fe00000 	.word	0x3fe00000
  409a84:	40240000 	.word	0x40240000
  409a88:	40140000 	.word	0x40140000
  409a8c:	4650      	mov	r0, sl
  409a8e:	f7fc faaf 	bl	405ff0 <__aeabi_i2d>
  409a92:	463a      	mov	r2, r7
  409a94:	4643      	mov	r3, r8
  409a96:	f7fc fb11 	bl	4060bc <__aeabi_dmul>
  409a9a:	2200      	movs	r2, #0
  409a9c:	4bc1      	ldr	r3, [pc, #772]	; (409da4 <_dtoa_r+0xd9c>)
  409a9e:	f7fc f95b 	bl	405d58 <__adddf3>
  409aa2:	4605      	mov	r5, r0
  409aa4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409aa8:	4641      	mov	r1, r8
  409aaa:	2200      	movs	r2, #0
  409aac:	4bbe      	ldr	r3, [pc, #760]	; (409da8 <_dtoa_r+0xda0>)
  409aae:	4638      	mov	r0, r7
  409ab0:	f7fc f950 	bl	405d54 <__aeabi_dsub>
  409ab4:	462a      	mov	r2, r5
  409ab6:	4633      	mov	r3, r6
  409ab8:	4682      	mov	sl, r0
  409aba:	468b      	mov	fp, r1
  409abc:	f7fc fd8e 	bl	4065dc <__aeabi_dcmpgt>
  409ac0:	4680      	mov	r8, r0
  409ac2:	2800      	cmp	r0, #0
  409ac4:	f040 8110 	bne.w	409ce8 <_dtoa_r+0xce0>
  409ac8:	462a      	mov	r2, r5
  409aca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409ace:	4650      	mov	r0, sl
  409ad0:	4659      	mov	r1, fp
  409ad2:	f7fc fd65 	bl	4065a0 <__aeabi_dcmplt>
  409ad6:	b118      	cbz	r0, 409ae0 <_dtoa_r+0xad8>
  409ad8:	4646      	mov	r6, r8
  409ada:	e771      	b.n	4099c0 <_dtoa_r+0x9b8>
  409adc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409ae0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409ae4:	f7ff bb8a 	b.w	4091fc <_dtoa_r+0x1f4>
  409ae8:	9804      	ldr	r0, [sp, #16]
  409aea:	f7ff babb 	b.w	409064 <_dtoa_r+0x5c>
  409aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409af2:	970c      	str	r7, [sp, #48]	; 0x30
  409af4:	1afb      	subs	r3, r7, r3
  409af6:	441a      	add	r2, r3
  409af8:	920d      	str	r2, [sp, #52]	; 0x34
  409afa:	2700      	movs	r7, #0
  409afc:	e469      	b.n	4093d2 <_dtoa_r+0x3ca>
  409afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409b02:	f04f 0a02 	mov.w	sl, #2
  409b06:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409b0a:	e657      	b.n	4097bc <_dtoa_r+0x7b4>
  409b0c:	2100      	movs	r1, #0
  409b0e:	2301      	movs	r3, #1
  409b10:	6461      	str	r1, [r4, #68]	; 0x44
  409b12:	4620      	mov	r0, r4
  409b14:	9325      	str	r3, [sp, #148]	; 0x94
  409b16:	f000 ff07 	bl	40a928 <_Balloc>
  409b1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409b1c:	9004      	str	r0, [sp, #16]
  409b1e:	6420      	str	r0, [r4, #64]	; 0x40
  409b20:	930a      	str	r3, [sp, #40]	; 0x28
  409b22:	930f      	str	r3, [sp, #60]	; 0x3c
  409b24:	e629      	b.n	40977a <_dtoa_r+0x772>
  409b26:	2a00      	cmp	r2, #0
  409b28:	46d0      	mov	r8, sl
  409b2a:	f8cd b018 	str.w	fp, [sp, #24]
  409b2e:	469a      	mov	sl, r3
  409b30:	dd11      	ble.n	409b56 <_dtoa_r+0xb4e>
  409b32:	4649      	mov	r1, r9
  409b34:	2201      	movs	r2, #1
  409b36:	4620      	mov	r0, r4
  409b38:	f001 f8a2 	bl	40ac80 <__lshift>
  409b3c:	4641      	mov	r1, r8
  409b3e:	4681      	mov	r9, r0
  409b40:	f001 f8f0 	bl	40ad24 <__mcmp>
  409b44:	2800      	cmp	r0, #0
  409b46:	f340 8146 	ble.w	409dd6 <_dtoa_r+0xdce>
  409b4a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  409b4e:	f000 8106 	beq.w	409d5e <_dtoa_r+0xd56>
  409b52:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409b56:	46b3      	mov	fp, r6
  409b58:	f887 a000 	strb.w	sl, [r7]
  409b5c:	1c7d      	adds	r5, r7, #1
  409b5e:	9e06      	ldr	r6, [sp, #24]
  409b60:	e5d2      	b.n	409708 <_dtoa_r+0x700>
  409b62:	d104      	bne.n	409b6e <_dtoa_r+0xb66>
  409b64:	f01a 0f01 	tst.w	sl, #1
  409b68:	d001      	beq.n	409b6e <_dtoa_r+0xb66>
  409b6a:	e5bd      	b.n	4096e8 <_dtoa_r+0x6e0>
  409b6c:	4615      	mov	r5, r2
  409b6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409b72:	2b30      	cmp	r3, #48	; 0x30
  409b74:	f105 32ff 	add.w	r2, r5, #4294967295
  409b78:	d0f8      	beq.n	409b6c <_dtoa_r+0xb64>
  409b7a:	e5c5      	b.n	409708 <_dtoa_r+0x700>
  409b7c:	9904      	ldr	r1, [sp, #16]
  409b7e:	2230      	movs	r2, #48	; 0x30
  409b80:	700a      	strb	r2, [r1, #0]
  409b82:	9a02      	ldr	r2, [sp, #8]
  409b84:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409b88:	3201      	adds	r2, #1
  409b8a:	9202      	str	r2, [sp, #8]
  409b8c:	f7ff bbfc 	b.w	409388 <_dtoa_r+0x380>
  409b90:	f000 80bb 	beq.w	409d0a <_dtoa_r+0xd02>
  409b94:	9b02      	ldr	r3, [sp, #8]
  409b96:	425d      	negs	r5, r3
  409b98:	4b84      	ldr	r3, [pc, #528]	; (409dac <_dtoa_r+0xda4>)
  409b9a:	f005 020f 	and.w	r2, r5, #15
  409b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
  409ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409baa:	f7fc fa87 	bl	4060bc <__aeabi_dmul>
  409bae:	112d      	asrs	r5, r5, #4
  409bb0:	4607      	mov	r7, r0
  409bb2:	4688      	mov	r8, r1
  409bb4:	f000 812c 	beq.w	409e10 <_dtoa_r+0xe08>
  409bb8:	4e7d      	ldr	r6, [pc, #500]	; (409db0 <_dtoa_r+0xda8>)
  409bba:	f04f 0a02 	mov.w	sl, #2
  409bbe:	07eb      	lsls	r3, r5, #31
  409bc0:	d509      	bpl.n	409bd6 <_dtoa_r+0xbce>
  409bc2:	4638      	mov	r0, r7
  409bc4:	4641      	mov	r1, r8
  409bc6:	e9d6 2300 	ldrd	r2, r3, [r6]
  409bca:	f7fc fa77 	bl	4060bc <__aeabi_dmul>
  409bce:	f10a 0a01 	add.w	sl, sl, #1
  409bd2:	4607      	mov	r7, r0
  409bd4:	4688      	mov	r8, r1
  409bd6:	106d      	asrs	r5, r5, #1
  409bd8:	f106 0608 	add.w	r6, r6, #8
  409bdc:	d1ef      	bne.n	409bbe <_dtoa_r+0xbb6>
  409bde:	e608      	b.n	4097f2 <_dtoa_r+0x7ea>
  409be0:	6871      	ldr	r1, [r6, #4]
  409be2:	4620      	mov	r0, r4
  409be4:	f000 fea0 	bl	40a928 <_Balloc>
  409be8:	6933      	ldr	r3, [r6, #16]
  409bea:	3302      	adds	r3, #2
  409bec:	009a      	lsls	r2, r3, #2
  409bee:	4605      	mov	r5, r0
  409bf0:	f106 010c 	add.w	r1, r6, #12
  409bf4:	300c      	adds	r0, #12
  409bf6:	f7fd fb5f 	bl	4072b8 <memcpy>
  409bfa:	4629      	mov	r1, r5
  409bfc:	2201      	movs	r2, #1
  409bfe:	4620      	mov	r0, r4
  409c00:	f001 f83e 	bl	40ac80 <__lshift>
  409c04:	9006      	str	r0, [sp, #24]
  409c06:	e4b5      	b.n	409574 <_dtoa_r+0x56c>
  409c08:	2b39      	cmp	r3, #57	; 0x39
  409c0a:	f8cd b018 	str.w	fp, [sp, #24]
  409c0e:	46d0      	mov	r8, sl
  409c10:	f000 80a5 	beq.w	409d5e <_dtoa_r+0xd56>
  409c14:	f103 0a01 	add.w	sl, r3, #1
  409c18:	46b3      	mov	fp, r6
  409c1a:	f887 a000 	strb.w	sl, [r7]
  409c1e:	1c7d      	adds	r5, r7, #1
  409c20:	9e06      	ldr	r6, [sp, #24]
  409c22:	e571      	b.n	409708 <_dtoa_r+0x700>
  409c24:	465a      	mov	r2, fp
  409c26:	46d0      	mov	r8, sl
  409c28:	46b3      	mov	fp, r6
  409c2a:	469a      	mov	sl, r3
  409c2c:	4616      	mov	r6, r2
  409c2e:	e54f      	b.n	4096d0 <_dtoa_r+0x6c8>
  409c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409c32:	495e      	ldr	r1, [pc, #376]	; (409dac <_dtoa_r+0xda4>)
  409c34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409c38:	462a      	mov	r2, r5
  409c3a:	4633      	mov	r3, r6
  409c3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409c40:	f7fc fa3c 	bl	4060bc <__aeabi_dmul>
  409c44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409c48:	4638      	mov	r0, r7
  409c4a:	4641      	mov	r1, r8
  409c4c:	f001 fe40 	bl	40b8d0 <__aeabi_d2iz>
  409c50:	4605      	mov	r5, r0
  409c52:	f7fc f9cd 	bl	405ff0 <__aeabi_i2d>
  409c56:	460b      	mov	r3, r1
  409c58:	4602      	mov	r2, r0
  409c5a:	4641      	mov	r1, r8
  409c5c:	4638      	mov	r0, r7
  409c5e:	f7fc f879 	bl	405d54 <__aeabi_dsub>
  409c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409c64:	460f      	mov	r7, r1
  409c66:	9904      	ldr	r1, [sp, #16]
  409c68:	3530      	adds	r5, #48	; 0x30
  409c6a:	2b01      	cmp	r3, #1
  409c6c:	700d      	strb	r5, [r1, #0]
  409c6e:	4606      	mov	r6, r0
  409c70:	f101 0501 	add.w	r5, r1, #1
  409c74:	d026      	beq.n	409cc4 <_dtoa_r+0xcbc>
  409c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409c78:	9a04      	ldr	r2, [sp, #16]
  409c7a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409db8 <_dtoa_r+0xdb0>
  409c7e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409c82:	4413      	add	r3, r2
  409c84:	f04f 0a00 	mov.w	sl, #0
  409c88:	4699      	mov	r9, r3
  409c8a:	4652      	mov	r2, sl
  409c8c:	465b      	mov	r3, fp
  409c8e:	4630      	mov	r0, r6
  409c90:	4639      	mov	r1, r7
  409c92:	f7fc fa13 	bl	4060bc <__aeabi_dmul>
  409c96:	460f      	mov	r7, r1
  409c98:	4606      	mov	r6, r0
  409c9a:	f001 fe19 	bl	40b8d0 <__aeabi_d2iz>
  409c9e:	4680      	mov	r8, r0
  409ca0:	f7fc f9a6 	bl	405ff0 <__aeabi_i2d>
  409ca4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409ca8:	4602      	mov	r2, r0
  409caa:	460b      	mov	r3, r1
  409cac:	4630      	mov	r0, r6
  409cae:	4639      	mov	r1, r7
  409cb0:	f7fc f850 	bl	405d54 <__aeabi_dsub>
  409cb4:	f805 8b01 	strb.w	r8, [r5], #1
  409cb8:	454d      	cmp	r5, r9
  409cba:	4606      	mov	r6, r0
  409cbc:	460f      	mov	r7, r1
  409cbe:	d1e4      	bne.n	409c8a <_dtoa_r+0xc82>
  409cc0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409cc4:	4b3b      	ldr	r3, [pc, #236]	; (409db4 <_dtoa_r+0xdac>)
  409cc6:	2200      	movs	r2, #0
  409cc8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409ccc:	f7fc f844 	bl	405d58 <__adddf3>
  409cd0:	4632      	mov	r2, r6
  409cd2:	463b      	mov	r3, r7
  409cd4:	f7fc fc64 	bl	4065a0 <__aeabi_dcmplt>
  409cd8:	2800      	cmp	r0, #0
  409cda:	d046      	beq.n	409d6a <_dtoa_r+0xd62>
  409cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409cde:	9302      	str	r3, [sp, #8]
  409ce0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409ce4:	f7ff bb43 	b.w	40936e <_dtoa_r+0x366>
  409ce8:	f04f 0800 	mov.w	r8, #0
  409cec:	4646      	mov	r6, r8
  409cee:	e6a9      	b.n	409a44 <_dtoa_r+0xa3c>
  409cf0:	9b08      	ldr	r3, [sp, #32]
  409cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409cf4:	1a9d      	subs	r5, r3, r2
  409cf6:	2300      	movs	r3, #0
  409cf8:	f7ff bb71 	b.w	4093de <_dtoa_r+0x3d6>
  409cfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409cfe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409d00:	9d08      	ldr	r5, [sp, #32]
  409d02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409d06:	f7ff bb6a 	b.w	4093de <_dtoa_r+0x3d6>
  409d0a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409d0e:	f04f 0a02 	mov.w	sl, #2
  409d12:	e56e      	b.n	4097f2 <_dtoa_r+0x7ea>
  409d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409d16:	2b00      	cmp	r3, #0
  409d18:	f43f aeb8 	beq.w	409a8c <_dtoa_r+0xa84>
  409d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409d1e:	2b00      	cmp	r3, #0
  409d20:	f77f aede 	ble.w	409ae0 <_dtoa_r+0xad8>
  409d24:	2200      	movs	r2, #0
  409d26:	4b24      	ldr	r3, [pc, #144]	; (409db8 <_dtoa_r+0xdb0>)
  409d28:	4638      	mov	r0, r7
  409d2a:	4641      	mov	r1, r8
  409d2c:	f7fc f9c6 	bl	4060bc <__aeabi_dmul>
  409d30:	4607      	mov	r7, r0
  409d32:	4688      	mov	r8, r1
  409d34:	f10a 0001 	add.w	r0, sl, #1
  409d38:	f7fc f95a 	bl	405ff0 <__aeabi_i2d>
  409d3c:	463a      	mov	r2, r7
  409d3e:	4643      	mov	r3, r8
  409d40:	f7fc f9bc 	bl	4060bc <__aeabi_dmul>
  409d44:	2200      	movs	r2, #0
  409d46:	4b17      	ldr	r3, [pc, #92]	; (409da4 <_dtoa_r+0xd9c>)
  409d48:	f7fc f806 	bl	405d58 <__adddf3>
  409d4c:	9a02      	ldr	r2, [sp, #8]
  409d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409d50:	9312      	str	r3, [sp, #72]	; 0x48
  409d52:	3a01      	subs	r2, #1
  409d54:	4605      	mov	r5, r0
  409d56:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409d5a:	9215      	str	r2, [sp, #84]	; 0x54
  409d5c:	e56a      	b.n	409834 <_dtoa_r+0x82c>
  409d5e:	2239      	movs	r2, #57	; 0x39
  409d60:	46b3      	mov	fp, r6
  409d62:	703a      	strb	r2, [r7, #0]
  409d64:	9e06      	ldr	r6, [sp, #24]
  409d66:	1c7d      	adds	r5, r7, #1
  409d68:	e4c0      	b.n	4096ec <_dtoa_r+0x6e4>
  409d6a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  409d6e:	2000      	movs	r0, #0
  409d70:	4910      	ldr	r1, [pc, #64]	; (409db4 <_dtoa_r+0xdac>)
  409d72:	f7fb ffef 	bl	405d54 <__aeabi_dsub>
  409d76:	4632      	mov	r2, r6
  409d78:	463b      	mov	r3, r7
  409d7a:	f7fc fc2f 	bl	4065dc <__aeabi_dcmpgt>
  409d7e:	b908      	cbnz	r0, 409d84 <_dtoa_r+0xd7c>
  409d80:	e6ae      	b.n	409ae0 <_dtoa_r+0xad8>
  409d82:	4615      	mov	r5, r2
  409d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409d88:	2b30      	cmp	r3, #48	; 0x30
  409d8a:	f105 32ff 	add.w	r2, r5, #4294967295
  409d8e:	d0f8      	beq.n	409d82 <_dtoa_r+0xd7a>
  409d90:	e5d7      	b.n	409942 <_dtoa_r+0x93a>
  409d92:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409d98:	9302      	str	r3, [sp, #8]
  409d9a:	f7ff bae8 	b.w	40936e <_dtoa_r+0x366>
  409d9e:	970c      	str	r7, [sp, #48]	; 0x30
  409da0:	f7ff bba5 	b.w	4094ee <_dtoa_r+0x4e6>
  409da4:	401c0000 	.word	0x401c0000
  409da8:	40140000 	.word	0x40140000
  409dac:	0040c2c8 	.word	0x0040c2c8
  409db0:	0040c2a0 	.word	0x0040c2a0
  409db4:	3fe00000 	.word	0x3fe00000
  409db8:	40240000 	.word	0x40240000
  409dbc:	2b39      	cmp	r3, #57	; 0x39
  409dbe:	f8cd b018 	str.w	fp, [sp, #24]
  409dc2:	46d0      	mov	r8, sl
  409dc4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409dc8:	469a      	mov	sl, r3
  409dca:	d0c8      	beq.n	409d5e <_dtoa_r+0xd56>
  409dcc:	f1bb 0f00 	cmp.w	fp, #0
  409dd0:	f73f aebf 	bgt.w	409b52 <_dtoa_r+0xb4a>
  409dd4:	e6bf      	b.n	409b56 <_dtoa_r+0xb4e>
  409dd6:	f47f aebe 	bne.w	409b56 <_dtoa_r+0xb4e>
  409dda:	f01a 0f01 	tst.w	sl, #1
  409dde:	f43f aeba 	beq.w	409b56 <_dtoa_r+0xb4e>
  409de2:	e6b2      	b.n	409b4a <_dtoa_r+0xb42>
  409de4:	f04f 0800 	mov.w	r8, #0
  409de8:	4646      	mov	r6, r8
  409dea:	e5e9      	b.n	4099c0 <_dtoa_r+0x9b8>
  409dec:	4631      	mov	r1, r6
  409dee:	2300      	movs	r3, #0
  409df0:	220a      	movs	r2, #10
  409df2:	4620      	mov	r0, r4
  409df4:	f000 fdc8 	bl	40a988 <__multadd>
  409df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409dfa:	2b00      	cmp	r3, #0
  409dfc:	4606      	mov	r6, r0
  409dfe:	dd0a      	ble.n	409e16 <_dtoa_r+0xe0e>
  409e00:	930a      	str	r3, [sp, #40]	; 0x28
  409e02:	f7ff bbaa 	b.w	40955a <_dtoa_r+0x552>
  409e06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e08:	2b02      	cmp	r3, #2
  409e0a:	dc23      	bgt.n	409e54 <_dtoa_r+0xe4c>
  409e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e0e:	e43b      	b.n	409688 <_dtoa_r+0x680>
  409e10:	f04f 0a02 	mov.w	sl, #2
  409e14:	e4ed      	b.n	4097f2 <_dtoa_r+0x7ea>
  409e16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e18:	2b02      	cmp	r3, #2
  409e1a:	dc1b      	bgt.n	409e54 <_dtoa_r+0xe4c>
  409e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e1e:	e7ef      	b.n	409e00 <_dtoa_r+0xdf8>
  409e20:	2500      	movs	r5, #0
  409e22:	6465      	str	r5, [r4, #68]	; 0x44
  409e24:	4629      	mov	r1, r5
  409e26:	4620      	mov	r0, r4
  409e28:	f000 fd7e 	bl	40a928 <_Balloc>
  409e2c:	f04f 33ff 	mov.w	r3, #4294967295
  409e30:	930a      	str	r3, [sp, #40]	; 0x28
  409e32:	930f      	str	r3, [sp, #60]	; 0x3c
  409e34:	2301      	movs	r3, #1
  409e36:	9004      	str	r0, [sp, #16]
  409e38:	9525      	str	r5, [sp, #148]	; 0x94
  409e3a:	6420      	str	r0, [r4, #64]	; 0x40
  409e3c:	930b      	str	r3, [sp, #44]	; 0x2c
  409e3e:	f7ff b9dd 	b.w	4091fc <_dtoa_r+0x1f4>
  409e42:	2501      	movs	r5, #1
  409e44:	f7ff b9a5 	b.w	409192 <_dtoa_r+0x18a>
  409e48:	f43f ab69 	beq.w	40951e <_dtoa_r+0x516>
  409e4c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409e50:	f7ff bbf9 	b.w	409646 <_dtoa_r+0x63e>
  409e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e56:	930a      	str	r3, [sp, #40]	; 0x28
  409e58:	e5e5      	b.n	409a26 <_dtoa_r+0xa1e>
  409e5a:	bf00      	nop

00409e5c <__sflush_r>:
  409e5c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409e60:	b29a      	uxth	r2, r3
  409e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e66:	460d      	mov	r5, r1
  409e68:	0711      	lsls	r1, r2, #28
  409e6a:	4680      	mov	r8, r0
  409e6c:	d43a      	bmi.n	409ee4 <__sflush_r+0x88>
  409e6e:	686a      	ldr	r2, [r5, #4]
  409e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409e74:	2a00      	cmp	r2, #0
  409e76:	81ab      	strh	r3, [r5, #12]
  409e78:	dd6f      	ble.n	409f5a <__sflush_r+0xfe>
  409e7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409e7c:	2c00      	cmp	r4, #0
  409e7e:	d049      	beq.n	409f14 <__sflush_r+0xb8>
  409e80:	2200      	movs	r2, #0
  409e82:	b29b      	uxth	r3, r3
  409e84:	f8d8 6000 	ldr.w	r6, [r8]
  409e88:	f8c8 2000 	str.w	r2, [r8]
  409e8c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409e90:	d067      	beq.n	409f62 <__sflush_r+0x106>
  409e92:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409e94:	075f      	lsls	r7, r3, #29
  409e96:	d505      	bpl.n	409ea4 <__sflush_r+0x48>
  409e98:	6869      	ldr	r1, [r5, #4]
  409e9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409e9c:	1a52      	subs	r2, r2, r1
  409e9e:	b10b      	cbz	r3, 409ea4 <__sflush_r+0x48>
  409ea0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409ea2:	1ad2      	subs	r2, r2, r3
  409ea4:	2300      	movs	r3, #0
  409ea6:	69e9      	ldr	r1, [r5, #28]
  409ea8:	4640      	mov	r0, r8
  409eaa:	47a0      	blx	r4
  409eac:	1c44      	adds	r4, r0, #1
  409eae:	d03c      	beq.n	409f2a <__sflush_r+0xce>
  409eb0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  409eb4:	692a      	ldr	r2, [r5, #16]
  409eb6:	602a      	str	r2, [r5, #0]
  409eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409ebc:	2200      	movs	r2, #0
  409ebe:	81ab      	strh	r3, [r5, #12]
  409ec0:	04db      	lsls	r3, r3, #19
  409ec2:	606a      	str	r2, [r5, #4]
  409ec4:	d447      	bmi.n	409f56 <__sflush_r+0xfa>
  409ec6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409ec8:	f8c8 6000 	str.w	r6, [r8]
  409ecc:	b311      	cbz	r1, 409f14 <__sflush_r+0xb8>
  409ece:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409ed2:	4299      	cmp	r1, r3
  409ed4:	d002      	beq.n	409edc <__sflush_r+0x80>
  409ed6:	4640      	mov	r0, r8
  409ed8:	f000 f95a 	bl	40a190 <_free_r>
  409edc:	2000      	movs	r0, #0
  409ede:	6328      	str	r0, [r5, #48]	; 0x30
  409ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ee4:	692e      	ldr	r6, [r5, #16]
  409ee6:	b1ae      	cbz	r6, 409f14 <__sflush_r+0xb8>
  409ee8:	682c      	ldr	r4, [r5, #0]
  409eea:	602e      	str	r6, [r5, #0]
  409eec:	0791      	lsls	r1, r2, #30
  409eee:	bf0c      	ite	eq
  409ef0:	696b      	ldreq	r3, [r5, #20]
  409ef2:	2300      	movne	r3, #0
  409ef4:	1ba4      	subs	r4, r4, r6
  409ef6:	60ab      	str	r3, [r5, #8]
  409ef8:	e00a      	b.n	409f10 <__sflush_r+0xb4>
  409efa:	4623      	mov	r3, r4
  409efc:	4632      	mov	r2, r6
  409efe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409f00:	69e9      	ldr	r1, [r5, #28]
  409f02:	4640      	mov	r0, r8
  409f04:	47b8      	blx	r7
  409f06:	2800      	cmp	r0, #0
  409f08:	eba4 0400 	sub.w	r4, r4, r0
  409f0c:	4406      	add	r6, r0
  409f0e:	dd04      	ble.n	409f1a <__sflush_r+0xbe>
  409f10:	2c00      	cmp	r4, #0
  409f12:	dcf2      	bgt.n	409efa <__sflush_r+0x9e>
  409f14:	2000      	movs	r0, #0
  409f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f1a:	89ab      	ldrh	r3, [r5, #12]
  409f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f20:	81ab      	strh	r3, [r5, #12]
  409f22:	f04f 30ff 	mov.w	r0, #4294967295
  409f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f2a:	f8d8 4000 	ldr.w	r4, [r8]
  409f2e:	2c1d      	cmp	r4, #29
  409f30:	d8f3      	bhi.n	409f1a <__sflush_r+0xbe>
  409f32:	4b19      	ldr	r3, [pc, #100]	; (409f98 <__sflush_r+0x13c>)
  409f34:	40e3      	lsrs	r3, r4
  409f36:	43db      	mvns	r3, r3
  409f38:	f013 0301 	ands.w	r3, r3, #1
  409f3c:	d1ed      	bne.n	409f1a <__sflush_r+0xbe>
  409f3e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409f42:	606b      	str	r3, [r5, #4]
  409f44:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409f48:	6929      	ldr	r1, [r5, #16]
  409f4a:	81ab      	strh	r3, [r5, #12]
  409f4c:	04da      	lsls	r2, r3, #19
  409f4e:	6029      	str	r1, [r5, #0]
  409f50:	d5b9      	bpl.n	409ec6 <__sflush_r+0x6a>
  409f52:	2c00      	cmp	r4, #0
  409f54:	d1b7      	bne.n	409ec6 <__sflush_r+0x6a>
  409f56:	6528      	str	r0, [r5, #80]	; 0x50
  409f58:	e7b5      	b.n	409ec6 <__sflush_r+0x6a>
  409f5a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409f5c:	2a00      	cmp	r2, #0
  409f5e:	dc8c      	bgt.n	409e7a <__sflush_r+0x1e>
  409f60:	e7d8      	b.n	409f14 <__sflush_r+0xb8>
  409f62:	2301      	movs	r3, #1
  409f64:	69e9      	ldr	r1, [r5, #28]
  409f66:	4640      	mov	r0, r8
  409f68:	47a0      	blx	r4
  409f6a:	1c43      	adds	r3, r0, #1
  409f6c:	4602      	mov	r2, r0
  409f6e:	d002      	beq.n	409f76 <__sflush_r+0x11a>
  409f70:	89ab      	ldrh	r3, [r5, #12]
  409f72:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409f74:	e78e      	b.n	409e94 <__sflush_r+0x38>
  409f76:	f8d8 3000 	ldr.w	r3, [r8]
  409f7a:	2b00      	cmp	r3, #0
  409f7c:	d0f8      	beq.n	409f70 <__sflush_r+0x114>
  409f7e:	2b1d      	cmp	r3, #29
  409f80:	d001      	beq.n	409f86 <__sflush_r+0x12a>
  409f82:	2b16      	cmp	r3, #22
  409f84:	d102      	bne.n	409f8c <__sflush_r+0x130>
  409f86:	f8c8 6000 	str.w	r6, [r8]
  409f8a:	e7c3      	b.n	409f14 <__sflush_r+0xb8>
  409f8c:	89ab      	ldrh	r3, [r5, #12]
  409f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f92:	81ab      	strh	r3, [r5, #12]
  409f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f98:	20400001 	.word	0x20400001

00409f9c <_fflush_r>:
  409f9c:	b538      	push	{r3, r4, r5, lr}
  409f9e:	460d      	mov	r5, r1
  409fa0:	4604      	mov	r4, r0
  409fa2:	b108      	cbz	r0, 409fa8 <_fflush_r+0xc>
  409fa4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409fa6:	b1bb      	cbz	r3, 409fd8 <_fflush_r+0x3c>
  409fa8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409fac:	b188      	cbz	r0, 409fd2 <_fflush_r+0x36>
  409fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409fb0:	07db      	lsls	r3, r3, #31
  409fb2:	d401      	bmi.n	409fb8 <_fflush_r+0x1c>
  409fb4:	0581      	lsls	r1, r0, #22
  409fb6:	d517      	bpl.n	409fe8 <_fflush_r+0x4c>
  409fb8:	4620      	mov	r0, r4
  409fba:	4629      	mov	r1, r5
  409fbc:	f7ff ff4e 	bl	409e5c <__sflush_r>
  409fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409fc2:	07da      	lsls	r2, r3, #31
  409fc4:	4604      	mov	r4, r0
  409fc6:	d402      	bmi.n	409fce <_fflush_r+0x32>
  409fc8:	89ab      	ldrh	r3, [r5, #12]
  409fca:	059b      	lsls	r3, r3, #22
  409fcc:	d507      	bpl.n	409fde <_fflush_r+0x42>
  409fce:	4620      	mov	r0, r4
  409fd0:	bd38      	pop	{r3, r4, r5, pc}
  409fd2:	4604      	mov	r4, r0
  409fd4:	4620      	mov	r0, r4
  409fd6:	bd38      	pop	{r3, r4, r5, pc}
  409fd8:	f000 f838 	bl	40a04c <__sinit>
  409fdc:	e7e4      	b.n	409fa8 <_fflush_r+0xc>
  409fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409fe0:	f000 fb72 	bl	40a6c8 <__retarget_lock_release_recursive>
  409fe4:	4620      	mov	r0, r4
  409fe6:	bd38      	pop	{r3, r4, r5, pc}
  409fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409fea:	f000 fb6b 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  409fee:	e7e3      	b.n	409fb8 <_fflush_r+0x1c>

00409ff0 <_cleanup_r>:
  409ff0:	4901      	ldr	r1, [pc, #4]	; (409ff8 <_cleanup_r+0x8>)
  409ff2:	f000 bb2b 	b.w	40a64c <_fwalk_reent>
  409ff6:	bf00      	nop
  409ff8:	0040b4f9 	.word	0x0040b4f9

00409ffc <std.isra.0>:
  409ffc:	b510      	push	{r4, lr}
  409ffe:	2300      	movs	r3, #0
  40a000:	4604      	mov	r4, r0
  40a002:	8181      	strh	r1, [r0, #12]
  40a004:	81c2      	strh	r2, [r0, #14]
  40a006:	6003      	str	r3, [r0, #0]
  40a008:	6043      	str	r3, [r0, #4]
  40a00a:	6083      	str	r3, [r0, #8]
  40a00c:	6643      	str	r3, [r0, #100]	; 0x64
  40a00e:	6103      	str	r3, [r0, #16]
  40a010:	6143      	str	r3, [r0, #20]
  40a012:	6183      	str	r3, [r0, #24]
  40a014:	4619      	mov	r1, r3
  40a016:	2208      	movs	r2, #8
  40a018:	305c      	adds	r0, #92	; 0x5c
  40a01a:	f7fd f9e7 	bl	4073ec <memset>
  40a01e:	4807      	ldr	r0, [pc, #28]	; (40a03c <std.isra.0+0x40>)
  40a020:	4907      	ldr	r1, [pc, #28]	; (40a040 <std.isra.0+0x44>)
  40a022:	4a08      	ldr	r2, [pc, #32]	; (40a044 <std.isra.0+0x48>)
  40a024:	4b08      	ldr	r3, [pc, #32]	; (40a048 <std.isra.0+0x4c>)
  40a026:	6220      	str	r0, [r4, #32]
  40a028:	61e4      	str	r4, [r4, #28]
  40a02a:	6261      	str	r1, [r4, #36]	; 0x24
  40a02c:	62a2      	str	r2, [r4, #40]	; 0x28
  40a02e:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a030:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40a034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a038:	f000 bb40 	b.w	40a6bc <__retarget_lock_init_recursive>
  40a03c:	0040b269 	.word	0x0040b269
  40a040:	0040b28d 	.word	0x0040b28d
  40a044:	0040b2c9 	.word	0x0040b2c9
  40a048:	0040b2e9 	.word	0x0040b2e9

0040a04c <__sinit>:
  40a04c:	b510      	push	{r4, lr}
  40a04e:	4604      	mov	r4, r0
  40a050:	4812      	ldr	r0, [pc, #72]	; (40a09c <__sinit+0x50>)
  40a052:	f000 fb37 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  40a056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40a058:	b9d2      	cbnz	r2, 40a090 <__sinit+0x44>
  40a05a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40a05e:	4810      	ldr	r0, [pc, #64]	; (40a0a0 <__sinit+0x54>)
  40a060:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40a064:	2103      	movs	r1, #3
  40a066:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a06a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a06c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a070:	6860      	ldr	r0, [r4, #4]
  40a072:	2104      	movs	r1, #4
  40a074:	f7ff ffc2 	bl	409ffc <std.isra.0>
  40a078:	2201      	movs	r2, #1
  40a07a:	2109      	movs	r1, #9
  40a07c:	68a0      	ldr	r0, [r4, #8]
  40a07e:	f7ff ffbd 	bl	409ffc <std.isra.0>
  40a082:	2202      	movs	r2, #2
  40a084:	2112      	movs	r1, #18
  40a086:	68e0      	ldr	r0, [r4, #12]
  40a088:	f7ff ffb8 	bl	409ffc <std.isra.0>
  40a08c:	2301      	movs	r3, #1
  40a08e:	63a3      	str	r3, [r4, #56]	; 0x38
  40a090:	4802      	ldr	r0, [pc, #8]	; (40a09c <__sinit+0x50>)
  40a092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a096:	f000 bb17 	b.w	40a6c8 <__retarget_lock_release_recursive>
  40a09a:	bf00      	nop
  40a09c:	20400e34 	.word	0x20400e34
  40a0a0:	00409ff1 	.word	0x00409ff1

0040a0a4 <__sfp_lock_acquire>:
  40a0a4:	4801      	ldr	r0, [pc, #4]	; (40a0ac <__sfp_lock_acquire+0x8>)
  40a0a6:	f000 bb0d 	b.w	40a6c4 <__retarget_lock_acquire_recursive>
  40a0aa:	bf00      	nop
  40a0ac:	20400e48 	.word	0x20400e48

0040a0b0 <__sfp_lock_release>:
  40a0b0:	4801      	ldr	r0, [pc, #4]	; (40a0b8 <__sfp_lock_release+0x8>)
  40a0b2:	f000 bb09 	b.w	40a6c8 <__retarget_lock_release_recursive>
  40a0b6:	bf00      	nop
  40a0b8:	20400e48 	.word	0x20400e48

0040a0bc <__libc_fini_array>:
  40a0bc:	b538      	push	{r3, r4, r5, lr}
  40a0be:	4c0a      	ldr	r4, [pc, #40]	; (40a0e8 <__libc_fini_array+0x2c>)
  40a0c0:	4d0a      	ldr	r5, [pc, #40]	; (40a0ec <__libc_fini_array+0x30>)
  40a0c2:	1b64      	subs	r4, r4, r5
  40a0c4:	10a4      	asrs	r4, r4, #2
  40a0c6:	d00a      	beq.n	40a0de <__libc_fini_array+0x22>
  40a0c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a0cc:	3b01      	subs	r3, #1
  40a0ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a0d2:	3c01      	subs	r4, #1
  40a0d4:	f855 3904 	ldr.w	r3, [r5], #-4
  40a0d8:	4798      	blx	r3
  40a0da:	2c00      	cmp	r4, #0
  40a0dc:	d1f9      	bne.n	40a0d2 <__libc_fini_array+0x16>
  40a0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a0e2:	f002 b9ef 	b.w	40c4c4 <_fini>
  40a0e6:	bf00      	nop
  40a0e8:	0040c4d4 	.word	0x0040c4d4
  40a0ec:	0040c4d0 	.word	0x0040c4d0

0040a0f0 <_malloc_trim_r>:
  40a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a0f2:	4f24      	ldr	r7, [pc, #144]	; (40a184 <_malloc_trim_r+0x94>)
  40a0f4:	460c      	mov	r4, r1
  40a0f6:	4606      	mov	r6, r0
  40a0f8:	f7fd f9c6 	bl	407488 <__malloc_lock>
  40a0fc:	68bb      	ldr	r3, [r7, #8]
  40a0fe:	685d      	ldr	r5, [r3, #4]
  40a100:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a104:	310f      	adds	r1, #15
  40a106:	f025 0503 	bic.w	r5, r5, #3
  40a10a:	4429      	add	r1, r5
  40a10c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a110:	f021 010f 	bic.w	r1, r1, #15
  40a114:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a118:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a11c:	db07      	blt.n	40a12e <_malloc_trim_r+0x3e>
  40a11e:	2100      	movs	r1, #0
  40a120:	4630      	mov	r0, r6
  40a122:	f7fd fa27 	bl	407574 <_sbrk_r>
  40a126:	68bb      	ldr	r3, [r7, #8]
  40a128:	442b      	add	r3, r5
  40a12a:	4298      	cmp	r0, r3
  40a12c:	d004      	beq.n	40a138 <_malloc_trim_r+0x48>
  40a12e:	4630      	mov	r0, r6
  40a130:	f7fd f9b0 	bl	407494 <__malloc_unlock>
  40a134:	2000      	movs	r0, #0
  40a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a138:	4261      	negs	r1, r4
  40a13a:	4630      	mov	r0, r6
  40a13c:	f7fd fa1a 	bl	407574 <_sbrk_r>
  40a140:	3001      	adds	r0, #1
  40a142:	d00d      	beq.n	40a160 <_malloc_trim_r+0x70>
  40a144:	4b10      	ldr	r3, [pc, #64]	; (40a188 <_malloc_trim_r+0x98>)
  40a146:	68ba      	ldr	r2, [r7, #8]
  40a148:	6819      	ldr	r1, [r3, #0]
  40a14a:	1b2d      	subs	r5, r5, r4
  40a14c:	f045 0501 	orr.w	r5, r5, #1
  40a150:	4630      	mov	r0, r6
  40a152:	1b09      	subs	r1, r1, r4
  40a154:	6055      	str	r5, [r2, #4]
  40a156:	6019      	str	r1, [r3, #0]
  40a158:	f7fd f99c 	bl	407494 <__malloc_unlock>
  40a15c:	2001      	movs	r0, #1
  40a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a160:	2100      	movs	r1, #0
  40a162:	4630      	mov	r0, r6
  40a164:	f7fd fa06 	bl	407574 <_sbrk_r>
  40a168:	68ba      	ldr	r2, [r7, #8]
  40a16a:	1a83      	subs	r3, r0, r2
  40a16c:	2b0f      	cmp	r3, #15
  40a16e:	ddde      	ble.n	40a12e <_malloc_trim_r+0x3e>
  40a170:	4c06      	ldr	r4, [pc, #24]	; (40a18c <_malloc_trim_r+0x9c>)
  40a172:	4905      	ldr	r1, [pc, #20]	; (40a188 <_malloc_trim_r+0x98>)
  40a174:	6824      	ldr	r4, [r4, #0]
  40a176:	f043 0301 	orr.w	r3, r3, #1
  40a17a:	1b00      	subs	r0, r0, r4
  40a17c:	6053      	str	r3, [r2, #4]
  40a17e:	6008      	str	r0, [r1, #0]
  40a180:	e7d5      	b.n	40a12e <_malloc_trim_r+0x3e>
  40a182:	bf00      	nop
  40a184:	20400448 	.word	0x20400448
  40a188:	20400da0 	.word	0x20400da0
  40a18c:	20400850 	.word	0x20400850

0040a190 <_free_r>:
  40a190:	2900      	cmp	r1, #0
  40a192:	d044      	beq.n	40a21e <_free_r+0x8e>
  40a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a198:	460d      	mov	r5, r1
  40a19a:	4680      	mov	r8, r0
  40a19c:	f7fd f974 	bl	407488 <__malloc_lock>
  40a1a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a1a4:	4969      	ldr	r1, [pc, #420]	; (40a34c <_free_r+0x1bc>)
  40a1a6:	f027 0301 	bic.w	r3, r7, #1
  40a1aa:	f1a5 0408 	sub.w	r4, r5, #8
  40a1ae:	18e2      	adds	r2, r4, r3
  40a1b0:	688e      	ldr	r6, [r1, #8]
  40a1b2:	6850      	ldr	r0, [r2, #4]
  40a1b4:	42b2      	cmp	r2, r6
  40a1b6:	f020 0003 	bic.w	r0, r0, #3
  40a1ba:	d05e      	beq.n	40a27a <_free_r+0xea>
  40a1bc:	07fe      	lsls	r6, r7, #31
  40a1be:	6050      	str	r0, [r2, #4]
  40a1c0:	d40b      	bmi.n	40a1da <_free_r+0x4a>
  40a1c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a1c6:	1be4      	subs	r4, r4, r7
  40a1c8:	f101 0e08 	add.w	lr, r1, #8
  40a1cc:	68a5      	ldr	r5, [r4, #8]
  40a1ce:	4575      	cmp	r5, lr
  40a1d0:	443b      	add	r3, r7
  40a1d2:	d06d      	beq.n	40a2b0 <_free_r+0x120>
  40a1d4:	68e7      	ldr	r7, [r4, #12]
  40a1d6:	60ef      	str	r7, [r5, #12]
  40a1d8:	60bd      	str	r5, [r7, #8]
  40a1da:	1815      	adds	r5, r2, r0
  40a1dc:	686d      	ldr	r5, [r5, #4]
  40a1de:	07ed      	lsls	r5, r5, #31
  40a1e0:	d53e      	bpl.n	40a260 <_free_r+0xd0>
  40a1e2:	f043 0201 	orr.w	r2, r3, #1
  40a1e6:	6062      	str	r2, [r4, #4]
  40a1e8:	50e3      	str	r3, [r4, r3]
  40a1ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a1ee:	d217      	bcs.n	40a220 <_free_r+0x90>
  40a1f0:	08db      	lsrs	r3, r3, #3
  40a1f2:	1c58      	adds	r0, r3, #1
  40a1f4:	109a      	asrs	r2, r3, #2
  40a1f6:	684d      	ldr	r5, [r1, #4]
  40a1f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a1fc:	60a7      	str	r7, [r4, #8]
  40a1fe:	2301      	movs	r3, #1
  40a200:	4093      	lsls	r3, r2
  40a202:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a206:	432b      	orrs	r3, r5
  40a208:	3a08      	subs	r2, #8
  40a20a:	60e2      	str	r2, [r4, #12]
  40a20c:	604b      	str	r3, [r1, #4]
  40a20e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a212:	60fc      	str	r4, [r7, #12]
  40a214:	4640      	mov	r0, r8
  40a216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a21a:	f7fd b93b 	b.w	407494 <__malloc_unlock>
  40a21e:	4770      	bx	lr
  40a220:	0a5a      	lsrs	r2, r3, #9
  40a222:	2a04      	cmp	r2, #4
  40a224:	d852      	bhi.n	40a2cc <_free_r+0x13c>
  40a226:	099a      	lsrs	r2, r3, #6
  40a228:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a22c:	00ff      	lsls	r7, r7, #3
  40a22e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a232:	19c8      	adds	r0, r1, r7
  40a234:	59ca      	ldr	r2, [r1, r7]
  40a236:	3808      	subs	r0, #8
  40a238:	4290      	cmp	r0, r2
  40a23a:	d04f      	beq.n	40a2dc <_free_r+0x14c>
  40a23c:	6851      	ldr	r1, [r2, #4]
  40a23e:	f021 0103 	bic.w	r1, r1, #3
  40a242:	428b      	cmp	r3, r1
  40a244:	d232      	bcs.n	40a2ac <_free_r+0x11c>
  40a246:	6892      	ldr	r2, [r2, #8]
  40a248:	4290      	cmp	r0, r2
  40a24a:	d1f7      	bne.n	40a23c <_free_r+0xac>
  40a24c:	68c3      	ldr	r3, [r0, #12]
  40a24e:	60a0      	str	r0, [r4, #8]
  40a250:	60e3      	str	r3, [r4, #12]
  40a252:	609c      	str	r4, [r3, #8]
  40a254:	60c4      	str	r4, [r0, #12]
  40a256:	4640      	mov	r0, r8
  40a258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a25c:	f7fd b91a 	b.w	407494 <__malloc_unlock>
  40a260:	6895      	ldr	r5, [r2, #8]
  40a262:	4f3b      	ldr	r7, [pc, #236]	; (40a350 <_free_r+0x1c0>)
  40a264:	42bd      	cmp	r5, r7
  40a266:	4403      	add	r3, r0
  40a268:	d040      	beq.n	40a2ec <_free_r+0x15c>
  40a26a:	68d0      	ldr	r0, [r2, #12]
  40a26c:	60e8      	str	r0, [r5, #12]
  40a26e:	f043 0201 	orr.w	r2, r3, #1
  40a272:	6085      	str	r5, [r0, #8]
  40a274:	6062      	str	r2, [r4, #4]
  40a276:	50e3      	str	r3, [r4, r3]
  40a278:	e7b7      	b.n	40a1ea <_free_r+0x5a>
  40a27a:	07ff      	lsls	r7, r7, #31
  40a27c:	4403      	add	r3, r0
  40a27e:	d407      	bmi.n	40a290 <_free_r+0x100>
  40a280:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a284:	1aa4      	subs	r4, r4, r2
  40a286:	4413      	add	r3, r2
  40a288:	68a0      	ldr	r0, [r4, #8]
  40a28a:	68e2      	ldr	r2, [r4, #12]
  40a28c:	60c2      	str	r2, [r0, #12]
  40a28e:	6090      	str	r0, [r2, #8]
  40a290:	4a30      	ldr	r2, [pc, #192]	; (40a354 <_free_r+0x1c4>)
  40a292:	6812      	ldr	r2, [r2, #0]
  40a294:	f043 0001 	orr.w	r0, r3, #1
  40a298:	4293      	cmp	r3, r2
  40a29a:	6060      	str	r0, [r4, #4]
  40a29c:	608c      	str	r4, [r1, #8]
  40a29e:	d3b9      	bcc.n	40a214 <_free_r+0x84>
  40a2a0:	4b2d      	ldr	r3, [pc, #180]	; (40a358 <_free_r+0x1c8>)
  40a2a2:	4640      	mov	r0, r8
  40a2a4:	6819      	ldr	r1, [r3, #0]
  40a2a6:	f7ff ff23 	bl	40a0f0 <_malloc_trim_r>
  40a2aa:	e7b3      	b.n	40a214 <_free_r+0x84>
  40a2ac:	4610      	mov	r0, r2
  40a2ae:	e7cd      	b.n	40a24c <_free_r+0xbc>
  40a2b0:	1811      	adds	r1, r2, r0
  40a2b2:	6849      	ldr	r1, [r1, #4]
  40a2b4:	07c9      	lsls	r1, r1, #31
  40a2b6:	d444      	bmi.n	40a342 <_free_r+0x1b2>
  40a2b8:	6891      	ldr	r1, [r2, #8]
  40a2ba:	68d2      	ldr	r2, [r2, #12]
  40a2bc:	60ca      	str	r2, [r1, #12]
  40a2be:	4403      	add	r3, r0
  40a2c0:	f043 0001 	orr.w	r0, r3, #1
  40a2c4:	6091      	str	r1, [r2, #8]
  40a2c6:	6060      	str	r0, [r4, #4]
  40a2c8:	50e3      	str	r3, [r4, r3]
  40a2ca:	e7a3      	b.n	40a214 <_free_r+0x84>
  40a2cc:	2a14      	cmp	r2, #20
  40a2ce:	d816      	bhi.n	40a2fe <_free_r+0x16e>
  40a2d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a2d4:	00ff      	lsls	r7, r7, #3
  40a2d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a2da:	e7aa      	b.n	40a232 <_free_r+0xa2>
  40a2dc:	10aa      	asrs	r2, r5, #2
  40a2de:	2301      	movs	r3, #1
  40a2e0:	684d      	ldr	r5, [r1, #4]
  40a2e2:	4093      	lsls	r3, r2
  40a2e4:	432b      	orrs	r3, r5
  40a2e6:	604b      	str	r3, [r1, #4]
  40a2e8:	4603      	mov	r3, r0
  40a2ea:	e7b0      	b.n	40a24e <_free_r+0xbe>
  40a2ec:	f043 0201 	orr.w	r2, r3, #1
  40a2f0:	614c      	str	r4, [r1, #20]
  40a2f2:	610c      	str	r4, [r1, #16]
  40a2f4:	60e5      	str	r5, [r4, #12]
  40a2f6:	60a5      	str	r5, [r4, #8]
  40a2f8:	6062      	str	r2, [r4, #4]
  40a2fa:	50e3      	str	r3, [r4, r3]
  40a2fc:	e78a      	b.n	40a214 <_free_r+0x84>
  40a2fe:	2a54      	cmp	r2, #84	; 0x54
  40a300:	d806      	bhi.n	40a310 <_free_r+0x180>
  40a302:	0b1a      	lsrs	r2, r3, #12
  40a304:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a308:	00ff      	lsls	r7, r7, #3
  40a30a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a30e:	e790      	b.n	40a232 <_free_r+0xa2>
  40a310:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a314:	d806      	bhi.n	40a324 <_free_r+0x194>
  40a316:	0bda      	lsrs	r2, r3, #15
  40a318:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a31c:	00ff      	lsls	r7, r7, #3
  40a31e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a322:	e786      	b.n	40a232 <_free_r+0xa2>
  40a324:	f240 5054 	movw	r0, #1364	; 0x554
  40a328:	4282      	cmp	r2, r0
  40a32a:	d806      	bhi.n	40a33a <_free_r+0x1aa>
  40a32c:	0c9a      	lsrs	r2, r3, #18
  40a32e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a332:	00ff      	lsls	r7, r7, #3
  40a334:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a338:	e77b      	b.n	40a232 <_free_r+0xa2>
  40a33a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a33e:	257e      	movs	r5, #126	; 0x7e
  40a340:	e777      	b.n	40a232 <_free_r+0xa2>
  40a342:	f043 0101 	orr.w	r1, r3, #1
  40a346:	6061      	str	r1, [r4, #4]
  40a348:	6013      	str	r3, [r2, #0]
  40a34a:	e763      	b.n	40a214 <_free_r+0x84>
  40a34c:	20400448 	.word	0x20400448
  40a350:	20400450 	.word	0x20400450
  40a354:	20400854 	.word	0x20400854
  40a358:	20400dd0 	.word	0x20400dd0

0040a35c <__sfvwrite_r>:
  40a35c:	6893      	ldr	r3, [r2, #8]
  40a35e:	2b00      	cmp	r3, #0
  40a360:	d073      	beq.n	40a44a <__sfvwrite_r+0xee>
  40a362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a366:	898b      	ldrh	r3, [r1, #12]
  40a368:	b083      	sub	sp, #12
  40a36a:	460c      	mov	r4, r1
  40a36c:	0719      	lsls	r1, r3, #28
  40a36e:	9000      	str	r0, [sp, #0]
  40a370:	4616      	mov	r6, r2
  40a372:	d526      	bpl.n	40a3c2 <__sfvwrite_r+0x66>
  40a374:	6922      	ldr	r2, [r4, #16]
  40a376:	b322      	cbz	r2, 40a3c2 <__sfvwrite_r+0x66>
  40a378:	f013 0002 	ands.w	r0, r3, #2
  40a37c:	6835      	ldr	r5, [r6, #0]
  40a37e:	d02c      	beq.n	40a3da <__sfvwrite_r+0x7e>
  40a380:	f04f 0900 	mov.w	r9, #0
  40a384:	4fb0      	ldr	r7, [pc, #704]	; (40a648 <__sfvwrite_r+0x2ec>)
  40a386:	46c8      	mov	r8, r9
  40a388:	46b2      	mov	sl, r6
  40a38a:	45b8      	cmp	r8, r7
  40a38c:	4643      	mov	r3, r8
  40a38e:	464a      	mov	r2, r9
  40a390:	bf28      	it	cs
  40a392:	463b      	movcs	r3, r7
  40a394:	9800      	ldr	r0, [sp, #0]
  40a396:	f1b8 0f00 	cmp.w	r8, #0
  40a39a:	d050      	beq.n	40a43e <__sfvwrite_r+0xe2>
  40a39c:	69e1      	ldr	r1, [r4, #28]
  40a39e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a3a0:	47b0      	blx	r6
  40a3a2:	2800      	cmp	r0, #0
  40a3a4:	dd58      	ble.n	40a458 <__sfvwrite_r+0xfc>
  40a3a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a3aa:	1a1b      	subs	r3, r3, r0
  40a3ac:	4481      	add	r9, r0
  40a3ae:	eba8 0800 	sub.w	r8, r8, r0
  40a3b2:	f8ca 3008 	str.w	r3, [sl, #8]
  40a3b6:	2b00      	cmp	r3, #0
  40a3b8:	d1e7      	bne.n	40a38a <__sfvwrite_r+0x2e>
  40a3ba:	2000      	movs	r0, #0
  40a3bc:	b003      	add	sp, #12
  40a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3c2:	4621      	mov	r1, r4
  40a3c4:	9800      	ldr	r0, [sp, #0]
  40a3c6:	f7fe fd17 	bl	408df8 <__swsetup_r>
  40a3ca:	2800      	cmp	r0, #0
  40a3cc:	f040 8133 	bne.w	40a636 <__sfvwrite_r+0x2da>
  40a3d0:	89a3      	ldrh	r3, [r4, #12]
  40a3d2:	6835      	ldr	r5, [r6, #0]
  40a3d4:	f013 0002 	ands.w	r0, r3, #2
  40a3d8:	d1d2      	bne.n	40a380 <__sfvwrite_r+0x24>
  40a3da:	f013 0901 	ands.w	r9, r3, #1
  40a3de:	d145      	bne.n	40a46c <__sfvwrite_r+0x110>
  40a3e0:	464f      	mov	r7, r9
  40a3e2:	9601      	str	r6, [sp, #4]
  40a3e4:	b337      	cbz	r7, 40a434 <__sfvwrite_r+0xd8>
  40a3e6:	059a      	lsls	r2, r3, #22
  40a3e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a3ec:	f140 8083 	bpl.w	40a4f6 <__sfvwrite_r+0x19a>
  40a3f0:	4547      	cmp	r7, r8
  40a3f2:	46c3      	mov	fp, r8
  40a3f4:	f0c0 80ab 	bcc.w	40a54e <__sfvwrite_r+0x1f2>
  40a3f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a3fc:	f040 80ac 	bne.w	40a558 <__sfvwrite_r+0x1fc>
  40a400:	6820      	ldr	r0, [r4, #0]
  40a402:	46ba      	mov	sl, r7
  40a404:	465a      	mov	r2, fp
  40a406:	4649      	mov	r1, r9
  40a408:	f000 fa2a 	bl	40a860 <memmove>
  40a40c:	68a2      	ldr	r2, [r4, #8]
  40a40e:	6823      	ldr	r3, [r4, #0]
  40a410:	eba2 0208 	sub.w	r2, r2, r8
  40a414:	445b      	add	r3, fp
  40a416:	60a2      	str	r2, [r4, #8]
  40a418:	6023      	str	r3, [r4, #0]
  40a41a:	9a01      	ldr	r2, [sp, #4]
  40a41c:	6893      	ldr	r3, [r2, #8]
  40a41e:	eba3 030a 	sub.w	r3, r3, sl
  40a422:	44d1      	add	r9, sl
  40a424:	eba7 070a 	sub.w	r7, r7, sl
  40a428:	6093      	str	r3, [r2, #8]
  40a42a:	2b00      	cmp	r3, #0
  40a42c:	d0c5      	beq.n	40a3ba <__sfvwrite_r+0x5e>
  40a42e:	89a3      	ldrh	r3, [r4, #12]
  40a430:	2f00      	cmp	r7, #0
  40a432:	d1d8      	bne.n	40a3e6 <__sfvwrite_r+0x8a>
  40a434:	f8d5 9000 	ldr.w	r9, [r5]
  40a438:	686f      	ldr	r7, [r5, #4]
  40a43a:	3508      	adds	r5, #8
  40a43c:	e7d2      	b.n	40a3e4 <__sfvwrite_r+0x88>
  40a43e:	f8d5 9000 	ldr.w	r9, [r5]
  40a442:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a446:	3508      	adds	r5, #8
  40a448:	e79f      	b.n	40a38a <__sfvwrite_r+0x2e>
  40a44a:	2000      	movs	r0, #0
  40a44c:	4770      	bx	lr
  40a44e:	4621      	mov	r1, r4
  40a450:	9800      	ldr	r0, [sp, #0]
  40a452:	f7ff fda3 	bl	409f9c <_fflush_r>
  40a456:	b370      	cbz	r0, 40a4b6 <__sfvwrite_r+0x15a>
  40a458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a460:	f04f 30ff 	mov.w	r0, #4294967295
  40a464:	81a3      	strh	r3, [r4, #12]
  40a466:	b003      	add	sp, #12
  40a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a46c:	4681      	mov	r9, r0
  40a46e:	4633      	mov	r3, r6
  40a470:	464e      	mov	r6, r9
  40a472:	46a8      	mov	r8, r5
  40a474:	469a      	mov	sl, r3
  40a476:	464d      	mov	r5, r9
  40a478:	b34e      	cbz	r6, 40a4ce <__sfvwrite_r+0x172>
  40a47a:	b380      	cbz	r0, 40a4de <__sfvwrite_r+0x182>
  40a47c:	6820      	ldr	r0, [r4, #0]
  40a47e:	6923      	ldr	r3, [r4, #16]
  40a480:	6962      	ldr	r2, [r4, #20]
  40a482:	45b1      	cmp	r9, r6
  40a484:	46cb      	mov	fp, r9
  40a486:	bf28      	it	cs
  40a488:	46b3      	movcs	fp, r6
  40a48a:	4298      	cmp	r0, r3
  40a48c:	465f      	mov	r7, fp
  40a48e:	d904      	bls.n	40a49a <__sfvwrite_r+0x13e>
  40a490:	68a3      	ldr	r3, [r4, #8]
  40a492:	4413      	add	r3, r2
  40a494:	459b      	cmp	fp, r3
  40a496:	f300 80a6 	bgt.w	40a5e6 <__sfvwrite_r+0x28a>
  40a49a:	4593      	cmp	fp, r2
  40a49c:	db4b      	blt.n	40a536 <__sfvwrite_r+0x1da>
  40a49e:	4613      	mov	r3, r2
  40a4a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a4a2:	69e1      	ldr	r1, [r4, #28]
  40a4a4:	9800      	ldr	r0, [sp, #0]
  40a4a6:	462a      	mov	r2, r5
  40a4a8:	47b8      	blx	r7
  40a4aa:	1e07      	subs	r7, r0, #0
  40a4ac:	ddd4      	ble.n	40a458 <__sfvwrite_r+0xfc>
  40a4ae:	ebb9 0907 	subs.w	r9, r9, r7
  40a4b2:	d0cc      	beq.n	40a44e <__sfvwrite_r+0xf2>
  40a4b4:	2001      	movs	r0, #1
  40a4b6:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a4ba:	1bdb      	subs	r3, r3, r7
  40a4bc:	443d      	add	r5, r7
  40a4be:	1bf6      	subs	r6, r6, r7
  40a4c0:	f8ca 3008 	str.w	r3, [sl, #8]
  40a4c4:	2b00      	cmp	r3, #0
  40a4c6:	f43f af78 	beq.w	40a3ba <__sfvwrite_r+0x5e>
  40a4ca:	2e00      	cmp	r6, #0
  40a4cc:	d1d5      	bne.n	40a47a <__sfvwrite_r+0x11e>
  40a4ce:	f108 0308 	add.w	r3, r8, #8
  40a4d2:	e913 0060 	ldmdb	r3, {r5, r6}
  40a4d6:	4698      	mov	r8, r3
  40a4d8:	3308      	adds	r3, #8
  40a4da:	2e00      	cmp	r6, #0
  40a4dc:	d0f9      	beq.n	40a4d2 <__sfvwrite_r+0x176>
  40a4de:	4632      	mov	r2, r6
  40a4e0:	210a      	movs	r1, #10
  40a4e2:	4628      	mov	r0, r5
  40a4e4:	f000 f96c 	bl	40a7c0 <memchr>
  40a4e8:	2800      	cmp	r0, #0
  40a4ea:	f000 80a1 	beq.w	40a630 <__sfvwrite_r+0x2d4>
  40a4ee:	3001      	adds	r0, #1
  40a4f0:	eba0 0905 	sub.w	r9, r0, r5
  40a4f4:	e7c2      	b.n	40a47c <__sfvwrite_r+0x120>
  40a4f6:	6820      	ldr	r0, [r4, #0]
  40a4f8:	6923      	ldr	r3, [r4, #16]
  40a4fa:	4298      	cmp	r0, r3
  40a4fc:	d802      	bhi.n	40a504 <__sfvwrite_r+0x1a8>
  40a4fe:	6963      	ldr	r3, [r4, #20]
  40a500:	429f      	cmp	r7, r3
  40a502:	d25d      	bcs.n	40a5c0 <__sfvwrite_r+0x264>
  40a504:	45b8      	cmp	r8, r7
  40a506:	bf28      	it	cs
  40a508:	46b8      	movcs	r8, r7
  40a50a:	4642      	mov	r2, r8
  40a50c:	4649      	mov	r1, r9
  40a50e:	f000 f9a7 	bl	40a860 <memmove>
  40a512:	68a3      	ldr	r3, [r4, #8]
  40a514:	6822      	ldr	r2, [r4, #0]
  40a516:	eba3 0308 	sub.w	r3, r3, r8
  40a51a:	4442      	add	r2, r8
  40a51c:	60a3      	str	r3, [r4, #8]
  40a51e:	6022      	str	r2, [r4, #0]
  40a520:	b10b      	cbz	r3, 40a526 <__sfvwrite_r+0x1ca>
  40a522:	46c2      	mov	sl, r8
  40a524:	e779      	b.n	40a41a <__sfvwrite_r+0xbe>
  40a526:	4621      	mov	r1, r4
  40a528:	9800      	ldr	r0, [sp, #0]
  40a52a:	f7ff fd37 	bl	409f9c <_fflush_r>
  40a52e:	2800      	cmp	r0, #0
  40a530:	d192      	bne.n	40a458 <__sfvwrite_r+0xfc>
  40a532:	46c2      	mov	sl, r8
  40a534:	e771      	b.n	40a41a <__sfvwrite_r+0xbe>
  40a536:	465a      	mov	r2, fp
  40a538:	4629      	mov	r1, r5
  40a53a:	f000 f991 	bl	40a860 <memmove>
  40a53e:	68a2      	ldr	r2, [r4, #8]
  40a540:	6823      	ldr	r3, [r4, #0]
  40a542:	eba2 020b 	sub.w	r2, r2, fp
  40a546:	445b      	add	r3, fp
  40a548:	60a2      	str	r2, [r4, #8]
  40a54a:	6023      	str	r3, [r4, #0]
  40a54c:	e7af      	b.n	40a4ae <__sfvwrite_r+0x152>
  40a54e:	6820      	ldr	r0, [r4, #0]
  40a550:	46b8      	mov	r8, r7
  40a552:	46ba      	mov	sl, r7
  40a554:	46bb      	mov	fp, r7
  40a556:	e755      	b.n	40a404 <__sfvwrite_r+0xa8>
  40a558:	6962      	ldr	r2, [r4, #20]
  40a55a:	6820      	ldr	r0, [r4, #0]
  40a55c:	6921      	ldr	r1, [r4, #16]
  40a55e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a562:	eba0 0a01 	sub.w	sl, r0, r1
  40a566:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a56a:	f10a 0001 	add.w	r0, sl, #1
  40a56e:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a572:	4438      	add	r0, r7
  40a574:	4540      	cmp	r0, r8
  40a576:	4642      	mov	r2, r8
  40a578:	bf84      	itt	hi
  40a57a:	4680      	movhi	r8, r0
  40a57c:	4642      	movhi	r2, r8
  40a57e:	055b      	lsls	r3, r3, #21
  40a580:	d544      	bpl.n	40a60c <__sfvwrite_r+0x2b0>
  40a582:	4611      	mov	r1, r2
  40a584:	9800      	ldr	r0, [sp, #0]
  40a586:	f7fc fbe7 	bl	406d58 <_malloc_r>
  40a58a:	4683      	mov	fp, r0
  40a58c:	2800      	cmp	r0, #0
  40a58e:	d055      	beq.n	40a63c <__sfvwrite_r+0x2e0>
  40a590:	4652      	mov	r2, sl
  40a592:	6921      	ldr	r1, [r4, #16]
  40a594:	f7fc fe90 	bl	4072b8 <memcpy>
  40a598:	89a3      	ldrh	r3, [r4, #12]
  40a59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a5a2:	81a3      	strh	r3, [r4, #12]
  40a5a4:	eb0b 000a 	add.w	r0, fp, sl
  40a5a8:	eba8 030a 	sub.w	r3, r8, sl
  40a5ac:	f8c4 b010 	str.w	fp, [r4, #16]
  40a5b0:	f8c4 8014 	str.w	r8, [r4, #20]
  40a5b4:	6020      	str	r0, [r4, #0]
  40a5b6:	60a3      	str	r3, [r4, #8]
  40a5b8:	46b8      	mov	r8, r7
  40a5ba:	46ba      	mov	sl, r7
  40a5bc:	46bb      	mov	fp, r7
  40a5be:	e721      	b.n	40a404 <__sfvwrite_r+0xa8>
  40a5c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a5c4:	42b9      	cmp	r1, r7
  40a5c6:	bf28      	it	cs
  40a5c8:	4639      	movcs	r1, r7
  40a5ca:	464a      	mov	r2, r9
  40a5cc:	fb91 f1f3 	sdiv	r1, r1, r3
  40a5d0:	9800      	ldr	r0, [sp, #0]
  40a5d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a5d4:	fb03 f301 	mul.w	r3, r3, r1
  40a5d8:	69e1      	ldr	r1, [r4, #28]
  40a5da:	47b0      	blx	r6
  40a5dc:	f1b0 0a00 	subs.w	sl, r0, #0
  40a5e0:	f73f af1b 	bgt.w	40a41a <__sfvwrite_r+0xbe>
  40a5e4:	e738      	b.n	40a458 <__sfvwrite_r+0xfc>
  40a5e6:	461a      	mov	r2, r3
  40a5e8:	4629      	mov	r1, r5
  40a5ea:	9301      	str	r3, [sp, #4]
  40a5ec:	f000 f938 	bl	40a860 <memmove>
  40a5f0:	6822      	ldr	r2, [r4, #0]
  40a5f2:	9b01      	ldr	r3, [sp, #4]
  40a5f4:	9800      	ldr	r0, [sp, #0]
  40a5f6:	441a      	add	r2, r3
  40a5f8:	6022      	str	r2, [r4, #0]
  40a5fa:	4621      	mov	r1, r4
  40a5fc:	f7ff fcce 	bl	409f9c <_fflush_r>
  40a600:	9b01      	ldr	r3, [sp, #4]
  40a602:	2800      	cmp	r0, #0
  40a604:	f47f af28 	bne.w	40a458 <__sfvwrite_r+0xfc>
  40a608:	461f      	mov	r7, r3
  40a60a:	e750      	b.n	40a4ae <__sfvwrite_r+0x152>
  40a60c:	9800      	ldr	r0, [sp, #0]
  40a60e:	f000 fc85 	bl	40af1c <_realloc_r>
  40a612:	4683      	mov	fp, r0
  40a614:	2800      	cmp	r0, #0
  40a616:	d1c5      	bne.n	40a5a4 <__sfvwrite_r+0x248>
  40a618:	9d00      	ldr	r5, [sp, #0]
  40a61a:	6921      	ldr	r1, [r4, #16]
  40a61c:	4628      	mov	r0, r5
  40a61e:	f7ff fdb7 	bl	40a190 <_free_r>
  40a622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a626:	220c      	movs	r2, #12
  40a628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a62c:	602a      	str	r2, [r5, #0]
  40a62e:	e715      	b.n	40a45c <__sfvwrite_r+0x100>
  40a630:	f106 0901 	add.w	r9, r6, #1
  40a634:	e722      	b.n	40a47c <__sfvwrite_r+0x120>
  40a636:	f04f 30ff 	mov.w	r0, #4294967295
  40a63a:	e6bf      	b.n	40a3bc <__sfvwrite_r+0x60>
  40a63c:	9a00      	ldr	r2, [sp, #0]
  40a63e:	230c      	movs	r3, #12
  40a640:	6013      	str	r3, [r2, #0]
  40a642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a646:	e709      	b.n	40a45c <__sfvwrite_r+0x100>
  40a648:	7ffffc00 	.word	0x7ffffc00

0040a64c <_fwalk_reent>:
  40a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a650:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a654:	d01f      	beq.n	40a696 <_fwalk_reent+0x4a>
  40a656:	4688      	mov	r8, r1
  40a658:	4606      	mov	r6, r0
  40a65a:	f04f 0900 	mov.w	r9, #0
  40a65e:	687d      	ldr	r5, [r7, #4]
  40a660:	68bc      	ldr	r4, [r7, #8]
  40a662:	3d01      	subs	r5, #1
  40a664:	d411      	bmi.n	40a68a <_fwalk_reent+0x3e>
  40a666:	89a3      	ldrh	r3, [r4, #12]
  40a668:	2b01      	cmp	r3, #1
  40a66a:	f105 35ff 	add.w	r5, r5, #4294967295
  40a66e:	d908      	bls.n	40a682 <_fwalk_reent+0x36>
  40a670:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a674:	3301      	adds	r3, #1
  40a676:	4621      	mov	r1, r4
  40a678:	4630      	mov	r0, r6
  40a67a:	d002      	beq.n	40a682 <_fwalk_reent+0x36>
  40a67c:	47c0      	blx	r8
  40a67e:	ea49 0900 	orr.w	r9, r9, r0
  40a682:	1c6b      	adds	r3, r5, #1
  40a684:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a688:	d1ed      	bne.n	40a666 <_fwalk_reent+0x1a>
  40a68a:	683f      	ldr	r7, [r7, #0]
  40a68c:	2f00      	cmp	r7, #0
  40a68e:	d1e6      	bne.n	40a65e <_fwalk_reent+0x12>
  40a690:	4648      	mov	r0, r9
  40a692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a696:	46b9      	mov	r9, r7
  40a698:	4648      	mov	r0, r9
  40a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a69e:	bf00      	nop

0040a6a0 <_localeconv_r>:
  40a6a0:	4a04      	ldr	r2, [pc, #16]	; (40a6b4 <_localeconv_r+0x14>)
  40a6a2:	4b05      	ldr	r3, [pc, #20]	; (40a6b8 <_localeconv_r+0x18>)
  40a6a4:	6812      	ldr	r2, [r2, #0]
  40a6a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a6a8:	2800      	cmp	r0, #0
  40a6aa:	bf08      	it	eq
  40a6ac:	4618      	moveq	r0, r3
  40a6ae:	30f0      	adds	r0, #240	; 0xf0
  40a6b0:	4770      	bx	lr
  40a6b2:	bf00      	nop
  40a6b4:	20400018 	.word	0x20400018
  40a6b8:	2040085c 	.word	0x2040085c

0040a6bc <__retarget_lock_init_recursive>:
  40a6bc:	4770      	bx	lr
  40a6be:	bf00      	nop

0040a6c0 <__retarget_lock_close_recursive>:
  40a6c0:	4770      	bx	lr
  40a6c2:	bf00      	nop

0040a6c4 <__retarget_lock_acquire_recursive>:
  40a6c4:	4770      	bx	lr
  40a6c6:	bf00      	nop

0040a6c8 <__retarget_lock_release_recursive>:
  40a6c8:	4770      	bx	lr
  40a6ca:	bf00      	nop

0040a6cc <__swhatbuf_r>:
  40a6cc:	b570      	push	{r4, r5, r6, lr}
  40a6ce:	460c      	mov	r4, r1
  40a6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a6d4:	2900      	cmp	r1, #0
  40a6d6:	b090      	sub	sp, #64	; 0x40
  40a6d8:	4615      	mov	r5, r2
  40a6da:	461e      	mov	r6, r3
  40a6dc:	db14      	blt.n	40a708 <__swhatbuf_r+0x3c>
  40a6de:	aa01      	add	r2, sp, #4
  40a6e0:	f000 fff0 	bl	40b6c4 <_fstat_r>
  40a6e4:	2800      	cmp	r0, #0
  40a6e6:	db0f      	blt.n	40a708 <__swhatbuf_r+0x3c>
  40a6e8:	9a02      	ldr	r2, [sp, #8]
  40a6ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a6ee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a6f2:	fab2 f282 	clz	r2, r2
  40a6f6:	0952      	lsrs	r2, r2, #5
  40a6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a6fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a700:	6032      	str	r2, [r6, #0]
  40a702:	602b      	str	r3, [r5, #0]
  40a704:	b010      	add	sp, #64	; 0x40
  40a706:	bd70      	pop	{r4, r5, r6, pc}
  40a708:	89a2      	ldrh	r2, [r4, #12]
  40a70a:	2300      	movs	r3, #0
  40a70c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a710:	6033      	str	r3, [r6, #0]
  40a712:	d004      	beq.n	40a71e <__swhatbuf_r+0x52>
  40a714:	2240      	movs	r2, #64	; 0x40
  40a716:	4618      	mov	r0, r3
  40a718:	602a      	str	r2, [r5, #0]
  40a71a:	b010      	add	sp, #64	; 0x40
  40a71c:	bd70      	pop	{r4, r5, r6, pc}
  40a71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a722:	602b      	str	r3, [r5, #0]
  40a724:	b010      	add	sp, #64	; 0x40
  40a726:	bd70      	pop	{r4, r5, r6, pc}

0040a728 <__smakebuf_r>:
  40a728:	898a      	ldrh	r2, [r1, #12]
  40a72a:	0792      	lsls	r2, r2, #30
  40a72c:	460b      	mov	r3, r1
  40a72e:	d506      	bpl.n	40a73e <__smakebuf_r+0x16>
  40a730:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a734:	2101      	movs	r1, #1
  40a736:	601a      	str	r2, [r3, #0]
  40a738:	611a      	str	r2, [r3, #16]
  40a73a:	6159      	str	r1, [r3, #20]
  40a73c:	4770      	bx	lr
  40a73e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a740:	b083      	sub	sp, #12
  40a742:	ab01      	add	r3, sp, #4
  40a744:	466a      	mov	r2, sp
  40a746:	460c      	mov	r4, r1
  40a748:	4606      	mov	r6, r0
  40a74a:	f7ff ffbf 	bl	40a6cc <__swhatbuf_r>
  40a74e:	9900      	ldr	r1, [sp, #0]
  40a750:	4605      	mov	r5, r0
  40a752:	4630      	mov	r0, r6
  40a754:	f7fc fb00 	bl	406d58 <_malloc_r>
  40a758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a75c:	b1d8      	cbz	r0, 40a796 <__smakebuf_r+0x6e>
  40a75e:	9a01      	ldr	r2, [sp, #4]
  40a760:	4f15      	ldr	r7, [pc, #84]	; (40a7b8 <__smakebuf_r+0x90>)
  40a762:	9900      	ldr	r1, [sp, #0]
  40a764:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a76a:	81a3      	strh	r3, [r4, #12]
  40a76c:	6020      	str	r0, [r4, #0]
  40a76e:	6120      	str	r0, [r4, #16]
  40a770:	6161      	str	r1, [r4, #20]
  40a772:	b91a      	cbnz	r2, 40a77c <__smakebuf_r+0x54>
  40a774:	432b      	orrs	r3, r5
  40a776:	81a3      	strh	r3, [r4, #12]
  40a778:	b003      	add	sp, #12
  40a77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a77c:	4630      	mov	r0, r6
  40a77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a782:	f000 ffb3 	bl	40b6ec <_isatty_r>
  40a786:	b1a0      	cbz	r0, 40a7b2 <__smakebuf_r+0x8a>
  40a788:	89a3      	ldrh	r3, [r4, #12]
  40a78a:	f023 0303 	bic.w	r3, r3, #3
  40a78e:	f043 0301 	orr.w	r3, r3, #1
  40a792:	b21b      	sxth	r3, r3
  40a794:	e7ee      	b.n	40a774 <__smakebuf_r+0x4c>
  40a796:	059a      	lsls	r2, r3, #22
  40a798:	d4ee      	bmi.n	40a778 <__smakebuf_r+0x50>
  40a79a:	f023 0303 	bic.w	r3, r3, #3
  40a79e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a7a2:	f043 0302 	orr.w	r3, r3, #2
  40a7a6:	2101      	movs	r1, #1
  40a7a8:	81a3      	strh	r3, [r4, #12]
  40a7aa:	6022      	str	r2, [r4, #0]
  40a7ac:	6122      	str	r2, [r4, #16]
  40a7ae:	6161      	str	r1, [r4, #20]
  40a7b0:	e7e2      	b.n	40a778 <__smakebuf_r+0x50>
  40a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a7b6:	e7dd      	b.n	40a774 <__smakebuf_r+0x4c>
  40a7b8:	00409ff1 	.word	0x00409ff1
  40a7bc:	00000000 	.word	0x00000000

0040a7c0 <memchr>:
  40a7c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a7c4:	2a10      	cmp	r2, #16
  40a7c6:	db2b      	blt.n	40a820 <memchr+0x60>
  40a7c8:	f010 0f07 	tst.w	r0, #7
  40a7cc:	d008      	beq.n	40a7e0 <memchr+0x20>
  40a7ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a7d2:	3a01      	subs	r2, #1
  40a7d4:	428b      	cmp	r3, r1
  40a7d6:	d02d      	beq.n	40a834 <memchr+0x74>
  40a7d8:	f010 0f07 	tst.w	r0, #7
  40a7dc:	b342      	cbz	r2, 40a830 <memchr+0x70>
  40a7de:	d1f6      	bne.n	40a7ce <memchr+0xe>
  40a7e0:	b4f0      	push	{r4, r5, r6, r7}
  40a7e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a7e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a7ea:	f022 0407 	bic.w	r4, r2, #7
  40a7ee:	f07f 0700 	mvns.w	r7, #0
  40a7f2:	2300      	movs	r3, #0
  40a7f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a7f8:	3c08      	subs	r4, #8
  40a7fa:	ea85 0501 	eor.w	r5, r5, r1
  40a7fe:	ea86 0601 	eor.w	r6, r6, r1
  40a802:	fa85 f547 	uadd8	r5, r5, r7
  40a806:	faa3 f587 	sel	r5, r3, r7
  40a80a:	fa86 f647 	uadd8	r6, r6, r7
  40a80e:	faa5 f687 	sel	r6, r5, r7
  40a812:	b98e      	cbnz	r6, 40a838 <memchr+0x78>
  40a814:	d1ee      	bne.n	40a7f4 <memchr+0x34>
  40a816:	bcf0      	pop	{r4, r5, r6, r7}
  40a818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a81c:	f002 0207 	and.w	r2, r2, #7
  40a820:	b132      	cbz	r2, 40a830 <memchr+0x70>
  40a822:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a826:	3a01      	subs	r2, #1
  40a828:	ea83 0301 	eor.w	r3, r3, r1
  40a82c:	b113      	cbz	r3, 40a834 <memchr+0x74>
  40a82e:	d1f8      	bne.n	40a822 <memchr+0x62>
  40a830:	2000      	movs	r0, #0
  40a832:	4770      	bx	lr
  40a834:	3801      	subs	r0, #1
  40a836:	4770      	bx	lr
  40a838:	2d00      	cmp	r5, #0
  40a83a:	bf06      	itte	eq
  40a83c:	4635      	moveq	r5, r6
  40a83e:	3803      	subeq	r0, #3
  40a840:	3807      	subne	r0, #7
  40a842:	f015 0f01 	tst.w	r5, #1
  40a846:	d107      	bne.n	40a858 <memchr+0x98>
  40a848:	3001      	adds	r0, #1
  40a84a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a84e:	bf02      	ittt	eq
  40a850:	3001      	addeq	r0, #1
  40a852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a856:	3001      	addeq	r0, #1
  40a858:	bcf0      	pop	{r4, r5, r6, r7}
  40a85a:	3801      	subs	r0, #1
  40a85c:	4770      	bx	lr
  40a85e:	bf00      	nop

0040a860 <memmove>:
  40a860:	4288      	cmp	r0, r1
  40a862:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a864:	d90d      	bls.n	40a882 <memmove+0x22>
  40a866:	188b      	adds	r3, r1, r2
  40a868:	4298      	cmp	r0, r3
  40a86a:	d20a      	bcs.n	40a882 <memmove+0x22>
  40a86c:	1884      	adds	r4, r0, r2
  40a86e:	2a00      	cmp	r2, #0
  40a870:	d051      	beq.n	40a916 <memmove+0xb6>
  40a872:	4622      	mov	r2, r4
  40a874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a878:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a87c:	4299      	cmp	r1, r3
  40a87e:	d1f9      	bne.n	40a874 <memmove+0x14>
  40a880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a882:	2a0f      	cmp	r2, #15
  40a884:	d948      	bls.n	40a918 <memmove+0xb8>
  40a886:	ea41 0300 	orr.w	r3, r1, r0
  40a88a:	079b      	lsls	r3, r3, #30
  40a88c:	d146      	bne.n	40a91c <memmove+0xbc>
  40a88e:	f100 0410 	add.w	r4, r0, #16
  40a892:	f101 0310 	add.w	r3, r1, #16
  40a896:	4615      	mov	r5, r2
  40a898:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a89c:	f844 6c10 	str.w	r6, [r4, #-16]
  40a8a0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a8a4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a8a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a8ac:	f844 6c08 	str.w	r6, [r4, #-8]
  40a8b0:	3d10      	subs	r5, #16
  40a8b2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a8b6:	f844 6c04 	str.w	r6, [r4, #-4]
  40a8ba:	2d0f      	cmp	r5, #15
  40a8bc:	f103 0310 	add.w	r3, r3, #16
  40a8c0:	f104 0410 	add.w	r4, r4, #16
  40a8c4:	d8e8      	bhi.n	40a898 <memmove+0x38>
  40a8c6:	f1a2 0310 	sub.w	r3, r2, #16
  40a8ca:	f023 030f 	bic.w	r3, r3, #15
  40a8ce:	f002 0e0f 	and.w	lr, r2, #15
  40a8d2:	3310      	adds	r3, #16
  40a8d4:	f1be 0f03 	cmp.w	lr, #3
  40a8d8:	4419      	add	r1, r3
  40a8da:	4403      	add	r3, r0
  40a8dc:	d921      	bls.n	40a922 <memmove+0xc2>
  40a8de:	1f1e      	subs	r6, r3, #4
  40a8e0:	460d      	mov	r5, r1
  40a8e2:	4674      	mov	r4, lr
  40a8e4:	3c04      	subs	r4, #4
  40a8e6:	f855 7b04 	ldr.w	r7, [r5], #4
  40a8ea:	f846 7f04 	str.w	r7, [r6, #4]!
  40a8ee:	2c03      	cmp	r4, #3
  40a8f0:	d8f8      	bhi.n	40a8e4 <memmove+0x84>
  40a8f2:	f1ae 0404 	sub.w	r4, lr, #4
  40a8f6:	f024 0403 	bic.w	r4, r4, #3
  40a8fa:	3404      	adds	r4, #4
  40a8fc:	4421      	add	r1, r4
  40a8fe:	4423      	add	r3, r4
  40a900:	f002 0203 	and.w	r2, r2, #3
  40a904:	b162      	cbz	r2, 40a920 <memmove+0xc0>
  40a906:	3b01      	subs	r3, #1
  40a908:	440a      	add	r2, r1
  40a90a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a90e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a912:	428a      	cmp	r2, r1
  40a914:	d1f9      	bne.n	40a90a <memmove+0xaa>
  40a916:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a918:	4603      	mov	r3, r0
  40a91a:	e7f3      	b.n	40a904 <memmove+0xa4>
  40a91c:	4603      	mov	r3, r0
  40a91e:	e7f2      	b.n	40a906 <memmove+0xa6>
  40a920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a922:	4672      	mov	r2, lr
  40a924:	e7ee      	b.n	40a904 <memmove+0xa4>
  40a926:	bf00      	nop

0040a928 <_Balloc>:
  40a928:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a92a:	b570      	push	{r4, r5, r6, lr}
  40a92c:	4605      	mov	r5, r0
  40a92e:	460c      	mov	r4, r1
  40a930:	b14b      	cbz	r3, 40a946 <_Balloc+0x1e>
  40a932:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40a936:	b180      	cbz	r0, 40a95a <_Balloc+0x32>
  40a938:	6802      	ldr	r2, [r0, #0]
  40a93a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40a93e:	2300      	movs	r3, #0
  40a940:	6103      	str	r3, [r0, #16]
  40a942:	60c3      	str	r3, [r0, #12]
  40a944:	bd70      	pop	{r4, r5, r6, pc}
  40a946:	2221      	movs	r2, #33	; 0x21
  40a948:	2104      	movs	r1, #4
  40a94a:	f000 fd93 	bl	40b474 <_calloc_r>
  40a94e:	64e8      	str	r0, [r5, #76]	; 0x4c
  40a950:	4603      	mov	r3, r0
  40a952:	2800      	cmp	r0, #0
  40a954:	d1ed      	bne.n	40a932 <_Balloc+0xa>
  40a956:	2000      	movs	r0, #0
  40a958:	bd70      	pop	{r4, r5, r6, pc}
  40a95a:	2101      	movs	r1, #1
  40a95c:	fa01 f604 	lsl.w	r6, r1, r4
  40a960:	1d72      	adds	r2, r6, #5
  40a962:	4628      	mov	r0, r5
  40a964:	0092      	lsls	r2, r2, #2
  40a966:	f000 fd85 	bl	40b474 <_calloc_r>
  40a96a:	2800      	cmp	r0, #0
  40a96c:	d0f3      	beq.n	40a956 <_Balloc+0x2e>
  40a96e:	6044      	str	r4, [r0, #4]
  40a970:	6086      	str	r6, [r0, #8]
  40a972:	e7e4      	b.n	40a93e <_Balloc+0x16>

0040a974 <_Bfree>:
  40a974:	b131      	cbz	r1, 40a984 <_Bfree+0x10>
  40a976:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a978:	684a      	ldr	r2, [r1, #4]
  40a97a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40a97e:	6008      	str	r0, [r1, #0]
  40a980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40a984:	4770      	bx	lr
  40a986:	bf00      	nop

0040a988 <__multadd>:
  40a988:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a98a:	690c      	ldr	r4, [r1, #16]
  40a98c:	b083      	sub	sp, #12
  40a98e:	460d      	mov	r5, r1
  40a990:	4606      	mov	r6, r0
  40a992:	f101 0e14 	add.w	lr, r1, #20
  40a996:	2700      	movs	r7, #0
  40a998:	f8de 0000 	ldr.w	r0, [lr]
  40a99c:	b281      	uxth	r1, r0
  40a99e:	fb02 3301 	mla	r3, r2, r1, r3
  40a9a2:	0c01      	lsrs	r1, r0, #16
  40a9a4:	0c18      	lsrs	r0, r3, #16
  40a9a6:	fb02 0101 	mla	r1, r2, r1, r0
  40a9aa:	b29b      	uxth	r3, r3
  40a9ac:	3701      	adds	r7, #1
  40a9ae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40a9b2:	42bc      	cmp	r4, r7
  40a9b4:	f84e 3b04 	str.w	r3, [lr], #4
  40a9b8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40a9bc:	dcec      	bgt.n	40a998 <__multadd+0x10>
  40a9be:	b13b      	cbz	r3, 40a9d0 <__multadd+0x48>
  40a9c0:	68aa      	ldr	r2, [r5, #8]
  40a9c2:	4294      	cmp	r4, r2
  40a9c4:	da07      	bge.n	40a9d6 <__multadd+0x4e>
  40a9c6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40a9ca:	3401      	adds	r4, #1
  40a9cc:	6153      	str	r3, [r2, #20]
  40a9ce:	612c      	str	r4, [r5, #16]
  40a9d0:	4628      	mov	r0, r5
  40a9d2:	b003      	add	sp, #12
  40a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a9d6:	6869      	ldr	r1, [r5, #4]
  40a9d8:	9301      	str	r3, [sp, #4]
  40a9da:	3101      	adds	r1, #1
  40a9dc:	4630      	mov	r0, r6
  40a9de:	f7ff ffa3 	bl	40a928 <_Balloc>
  40a9e2:	692a      	ldr	r2, [r5, #16]
  40a9e4:	3202      	adds	r2, #2
  40a9e6:	f105 010c 	add.w	r1, r5, #12
  40a9ea:	4607      	mov	r7, r0
  40a9ec:	0092      	lsls	r2, r2, #2
  40a9ee:	300c      	adds	r0, #12
  40a9f0:	f7fc fc62 	bl	4072b8 <memcpy>
  40a9f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40a9f6:	6869      	ldr	r1, [r5, #4]
  40a9f8:	9b01      	ldr	r3, [sp, #4]
  40a9fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40a9fe:	6028      	str	r0, [r5, #0]
  40aa00:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40aa04:	463d      	mov	r5, r7
  40aa06:	e7de      	b.n	40a9c6 <__multadd+0x3e>

0040aa08 <__hi0bits>:
  40aa08:	0c02      	lsrs	r2, r0, #16
  40aa0a:	0412      	lsls	r2, r2, #16
  40aa0c:	4603      	mov	r3, r0
  40aa0e:	b9b2      	cbnz	r2, 40aa3e <__hi0bits+0x36>
  40aa10:	0403      	lsls	r3, r0, #16
  40aa12:	2010      	movs	r0, #16
  40aa14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40aa18:	bf04      	itt	eq
  40aa1a:	021b      	lsleq	r3, r3, #8
  40aa1c:	3008      	addeq	r0, #8
  40aa1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40aa22:	bf04      	itt	eq
  40aa24:	011b      	lsleq	r3, r3, #4
  40aa26:	3004      	addeq	r0, #4
  40aa28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40aa2c:	bf04      	itt	eq
  40aa2e:	009b      	lsleq	r3, r3, #2
  40aa30:	3002      	addeq	r0, #2
  40aa32:	2b00      	cmp	r3, #0
  40aa34:	db02      	blt.n	40aa3c <__hi0bits+0x34>
  40aa36:	005b      	lsls	r3, r3, #1
  40aa38:	d403      	bmi.n	40aa42 <__hi0bits+0x3a>
  40aa3a:	2020      	movs	r0, #32
  40aa3c:	4770      	bx	lr
  40aa3e:	2000      	movs	r0, #0
  40aa40:	e7e8      	b.n	40aa14 <__hi0bits+0xc>
  40aa42:	3001      	adds	r0, #1
  40aa44:	4770      	bx	lr
  40aa46:	bf00      	nop

0040aa48 <__lo0bits>:
  40aa48:	6803      	ldr	r3, [r0, #0]
  40aa4a:	f013 0207 	ands.w	r2, r3, #7
  40aa4e:	4601      	mov	r1, r0
  40aa50:	d007      	beq.n	40aa62 <__lo0bits+0x1a>
  40aa52:	07da      	lsls	r2, r3, #31
  40aa54:	d421      	bmi.n	40aa9a <__lo0bits+0x52>
  40aa56:	0798      	lsls	r0, r3, #30
  40aa58:	d421      	bmi.n	40aa9e <__lo0bits+0x56>
  40aa5a:	089b      	lsrs	r3, r3, #2
  40aa5c:	600b      	str	r3, [r1, #0]
  40aa5e:	2002      	movs	r0, #2
  40aa60:	4770      	bx	lr
  40aa62:	b298      	uxth	r0, r3
  40aa64:	b198      	cbz	r0, 40aa8e <__lo0bits+0x46>
  40aa66:	4610      	mov	r0, r2
  40aa68:	f013 0fff 	tst.w	r3, #255	; 0xff
  40aa6c:	bf04      	itt	eq
  40aa6e:	0a1b      	lsreq	r3, r3, #8
  40aa70:	3008      	addeq	r0, #8
  40aa72:	071a      	lsls	r2, r3, #28
  40aa74:	bf04      	itt	eq
  40aa76:	091b      	lsreq	r3, r3, #4
  40aa78:	3004      	addeq	r0, #4
  40aa7a:	079a      	lsls	r2, r3, #30
  40aa7c:	bf04      	itt	eq
  40aa7e:	089b      	lsreq	r3, r3, #2
  40aa80:	3002      	addeq	r0, #2
  40aa82:	07da      	lsls	r2, r3, #31
  40aa84:	d407      	bmi.n	40aa96 <__lo0bits+0x4e>
  40aa86:	085b      	lsrs	r3, r3, #1
  40aa88:	d104      	bne.n	40aa94 <__lo0bits+0x4c>
  40aa8a:	2020      	movs	r0, #32
  40aa8c:	4770      	bx	lr
  40aa8e:	0c1b      	lsrs	r3, r3, #16
  40aa90:	2010      	movs	r0, #16
  40aa92:	e7e9      	b.n	40aa68 <__lo0bits+0x20>
  40aa94:	3001      	adds	r0, #1
  40aa96:	600b      	str	r3, [r1, #0]
  40aa98:	4770      	bx	lr
  40aa9a:	2000      	movs	r0, #0
  40aa9c:	4770      	bx	lr
  40aa9e:	085b      	lsrs	r3, r3, #1
  40aaa0:	600b      	str	r3, [r1, #0]
  40aaa2:	2001      	movs	r0, #1
  40aaa4:	4770      	bx	lr
  40aaa6:	bf00      	nop

0040aaa8 <__i2b>:
  40aaa8:	b510      	push	{r4, lr}
  40aaaa:	460c      	mov	r4, r1
  40aaac:	2101      	movs	r1, #1
  40aaae:	f7ff ff3b 	bl	40a928 <_Balloc>
  40aab2:	2201      	movs	r2, #1
  40aab4:	6144      	str	r4, [r0, #20]
  40aab6:	6102      	str	r2, [r0, #16]
  40aab8:	bd10      	pop	{r4, pc}
  40aaba:	bf00      	nop

0040aabc <__multiply>:
  40aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aac0:	690c      	ldr	r4, [r1, #16]
  40aac2:	6915      	ldr	r5, [r2, #16]
  40aac4:	42ac      	cmp	r4, r5
  40aac6:	b083      	sub	sp, #12
  40aac8:	468b      	mov	fp, r1
  40aaca:	4616      	mov	r6, r2
  40aacc:	da04      	bge.n	40aad8 <__multiply+0x1c>
  40aace:	4622      	mov	r2, r4
  40aad0:	46b3      	mov	fp, r6
  40aad2:	462c      	mov	r4, r5
  40aad4:	460e      	mov	r6, r1
  40aad6:	4615      	mov	r5, r2
  40aad8:	f8db 3008 	ldr.w	r3, [fp, #8]
  40aadc:	f8db 1004 	ldr.w	r1, [fp, #4]
  40aae0:	eb04 0805 	add.w	r8, r4, r5
  40aae4:	4598      	cmp	r8, r3
  40aae6:	bfc8      	it	gt
  40aae8:	3101      	addgt	r1, #1
  40aaea:	f7ff ff1d 	bl	40a928 <_Balloc>
  40aaee:	f100 0914 	add.w	r9, r0, #20
  40aaf2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40aaf6:	45d1      	cmp	r9, sl
  40aaf8:	9000      	str	r0, [sp, #0]
  40aafa:	d205      	bcs.n	40ab08 <__multiply+0x4c>
  40aafc:	464b      	mov	r3, r9
  40aafe:	2100      	movs	r1, #0
  40ab00:	f843 1b04 	str.w	r1, [r3], #4
  40ab04:	459a      	cmp	sl, r3
  40ab06:	d8fb      	bhi.n	40ab00 <__multiply+0x44>
  40ab08:	f106 0c14 	add.w	ip, r6, #20
  40ab0c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40ab10:	f10b 0b14 	add.w	fp, fp, #20
  40ab14:	459c      	cmp	ip, r3
  40ab16:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40ab1a:	d24c      	bcs.n	40abb6 <__multiply+0xfa>
  40ab1c:	f8cd a004 	str.w	sl, [sp, #4]
  40ab20:	469a      	mov	sl, r3
  40ab22:	f8dc 5000 	ldr.w	r5, [ip]
  40ab26:	b2af      	uxth	r7, r5
  40ab28:	b1ef      	cbz	r7, 40ab66 <__multiply+0xaa>
  40ab2a:	2100      	movs	r1, #0
  40ab2c:	464d      	mov	r5, r9
  40ab2e:	465e      	mov	r6, fp
  40ab30:	460c      	mov	r4, r1
  40ab32:	f856 2b04 	ldr.w	r2, [r6], #4
  40ab36:	6828      	ldr	r0, [r5, #0]
  40ab38:	b293      	uxth	r3, r2
  40ab3a:	b281      	uxth	r1, r0
  40ab3c:	fb07 1303 	mla	r3, r7, r3, r1
  40ab40:	0c12      	lsrs	r2, r2, #16
  40ab42:	0c01      	lsrs	r1, r0, #16
  40ab44:	4423      	add	r3, r4
  40ab46:	fb07 1102 	mla	r1, r7, r2, r1
  40ab4a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40ab4e:	b29b      	uxth	r3, r3
  40ab50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40ab54:	45b6      	cmp	lr, r6
  40ab56:	f845 3b04 	str.w	r3, [r5], #4
  40ab5a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40ab5e:	d8e8      	bhi.n	40ab32 <__multiply+0x76>
  40ab60:	602c      	str	r4, [r5, #0]
  40ab62:	f8dc 5000 	ldr.w	r5, [ip]
  40ab66:	0c2d      	lsrs	r5, r5, #16
  40ab68:	d01d      	beq.n	40aba6 <__multiply+0xea>
  40ab6a:	f8d9 3000 	ldr.w	r3, [r9]
  40ab6e:	4648      	mov	r0, r9
  40ab70:	461c      	mov	r4, r3
  40ab72:	4659      	mov	r1, fp
  40ab74:	2200      	movs	r2, #0
  40ab76:	880e      	ldrh	r6, [r1, #0]
  40ab78:	0c24      	lsrs	r4, r4, #16
  40ab7a:	fb05 4406 	mla	r4, r5, r6, r4
  40ab7e:	4422      	add	r2, r4
  40ab80:	b29b      	uxth	r3, r3
  40ab82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ab86:	f840 3b04 	str.w	r3, [r0], #4
  40ab8a:	f851 3b04 	ldr.w	r3, [r1], #4
  40ab8e:	6804      	ldr	r4, [r0, #0]
  40ab90:	0c1b      	lsrs	r3, r3, #16
  40ab92:	b2a6      	uxth	r6, r4
  40ab94:	fb05 6303 	mla	r3, r5, r3, r6
  40ab98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40ab9c:	458e      	cmp	lr, r1
  40ab9e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40aba2:	d8e8      	bhi.n	40ab76 <__multiply+0xba>
  40aba4:	6003      	str	r3, [r0, #0]
  40aba6:	f10c 0c04 	add.w	ip, ip, #4
  40abaa:	45e2      	cmp	sl, ip
  40abac:	f109 0904 	add.w	r9, r9, #4
  40abb0:	d8b7      	bhi.n	40ab22 <__multiply+0x66>
  40abb2:	f8dd a004 	ldr.w	sl, [sp, #4]
  40abb6:	f1b8 0f00 	cmp.w	r8, #0
  40abba:	dd0b      	ble.n	40abd4 <__multiply+0x118>
  40abbc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40abc0:	f1aa 0a04 	sub.w	sl, sl, #4
  40abc4:	b11b      	cbz	r3, 40abce <__multiply+0x112>
  40abc6:	e005      	b.n	40abd4 <__multiply+0x118>
  40abc8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40abcc:	b913      	cbnz	r3, 40abd4 <__multiply+0x118>
  40abce:	f1b8 0801 	subs.w	r8, r8, #1
  40abd2:	d1f9      	bne.n	40abc8 <__multiply+0x10c>
  40abd4:	9800      	ldr	r0, [sp, #0]
  40abd6:	f8c0 8010 	str.w	r8, [r0, #16]
  40abda:	b003      	add	sp, #12
  40abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040abe0 <__pow5mult>:
  40abe0:	f012 0303 	ands.w	r3, r2, #3
  40abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40abe8:	4614      	mov	r4, r2
  40abea:	4607      	mov	r7, r0
  40abec:	d12e      	bne.n	40ac4c <__pow5mult+0x6c>
  40abee:	460d      	mov	r5, r1
  40abf0:	10a4      	asrs	r4, r4, #2
  40abf2:	d01c      	beq.n	40ac2e <__pow5mult+0x4e>
  40abf4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40abf6:	b396      	cbz	r6, 40ac5e <__pow5mult+0x7e>
  40abf8:	07e3      	lsls	r3, r4, #31
  40abfa:	f04f 0800 	mov.w	r8, #0
  40abfe:	d406      	bmi.n	40ac0e <__pow5mult+0x2e>
  40ac00:	1064      	asrs	r4, r4, #1
  40ac02:	d014      	beq.n	40ac2e <__pow5mult+0x4e>
  40ac04:	6830      	ldr	r0, [r6, #0]
  40ac06:	b1a8      	cbz	r0, 40ac34 <__pow5mult+0x54>
  40ac08:	4606      	mov	r6, r0
  40ac0a:	07e3      	lsls	r3, r4, #31
  40ac0c:	d5f8      	bpl.n	40ac00 <__pow5mult+0x20>
  40ac0e:	4632      	mov	r2, r6
  40ac10:	4629      	mov	r1, r5
  40ac12:	4638      	mov	r0, r7
  40ac14:	f7ff ff52 	bl	40aabc <__multiply>
  40ac18:	b1b5      	cbz	r5, 40ac48 <__pow5mult+0x68>
  40ac1a:	686a      	ldr	r2, [r5, #4]
  40ac1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ac1e:	1064      	asrs	r4, r4, #1
  40ac20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ac24:	6029      	str	r1, [r5, #0]
  40ac26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40ac2a:	4605      	mov	r5, r0
  40ac2c:	d1ea      	bne.n	40ac04 <__pow5mult+0x24>
  40ac2e:	4628      	mov	r0, r5
  40ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ac34:	4632      	mov	r2, r6
  40ac36:	4631      	mov	r1, r6
  40ac38:	4638      	mov	r0, r7
  40ac3a:	f7ff ff3f 	bl	40aabc <__multiply>
  40ac3e:	6030      	str	r0, [r6, #0]
  40ac40:	f8c0 8000 	str.w	r8, [r0]
  40ac44:	4606      	mov	r6, r0
  40ac46:	e7e0      	b.n	40ac0a <__pow5mult+0x2a>
  40ac48:	4605      	mov	r5, r0
  40ac4a:	e7d9      	b.n	40ac00 <__pow5mult+0x20>
  40ac4c:	1e5a      	subs	r2, r3, #1
  40ac4e:	4d0b      	ldr	r5, [pc, #44]	; (40ac7c <__pow5mult+0x9c>)
  40ac50:	2300      	movs	r3, #0
  40ac52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ac56:	f7ff fe97 	bl	40a988 <__multadd>
  40ac5a:	4605      	mov	r5, r0
  40ac5c:	e7c8      	b.n	40abf0 <__pow5mult+0x10>
  40ac5e:	2101      	movs	r1, #1
  40ac60:	4638      	mov	r0, r7
  40ac62:	f7ff fe61 	bl	40a928 <_Balloc>
  40ac66:	f240 2171 	movw	r1, #625	; 0x271
  40ac6a:	2201      	movs	r2, #1
  40ac6c:	2300      	movs	r3, #0
  40ac6e:	6141      	str	r1, [r0, #20]
  40ac70:	6102      	str	r2, [r0, #16]
  40ac72:	4606      	mov	r6, r0
  40ac74:	64b8      	str	r0, [r7, #72]	; 0x48
  40ac76:	6003      	str	r3, [r0, #0]
  40ac78:	e7be      	b.n	40abf8 <__pow5mult+0x18>
  40ac7a:	bf00      	nop
  40ac7c:	0040c390 	.word	0x0040c390

0040ac80 <__lshift>:
  40ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ac84:	4691      	mov	r9, r2
  40ac86:	690a      	ldr	r2, [r1, #16]
  40ac88:	688b      	ldr	r3, [r1, #8]
  40ac8a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40ac8e:	eb04 0802 	add.w	r8, r4, r2
  40ac92:	f108 0501 	add.w	r5, r8, #1
  40ac96:	429d      	cmp	r5, r3
  40ac98:	460e      	mov	r6, r1
  40ac9a:	4607      	mov	r7, r0
  40ac9c:	6849      	ldr	r1, [r1, #4]
  40ac9e:	dd04      	ble.n	40acaa <__lshift+0x2a>
  40aca0:	005b      	lsls	r3, r3, #1
  40aca2:	429d      	cmp	r5, r3
  40aca4:	f101 0101 	add.w	r1, r1, #1
  40aca8:	dcfa      	bgt.n	40aca0 <__lshift+0x20>
  40acaa:	4638      	mov	r0, r7
  40acac:	f7ff fe3c 	bl	40a928 <_Balloc>
  40acb0:	2c00      	cmp	r4, #0
  40acb2:	f100 0314 	add.w	r3, r0, #20
  40acb6:	dd06      	ble.n	40acc6 <__lshift+0x46>
  40acb8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40acbc:	2100      	movs	r1, #0
  40acbe:	f843 1b04 	str.w	r1, [r3], #4
  40acc2:	429a      	cmp	r2, r3
  40acc4:	d1fb      	bne.n	40acbe <__lshift+0x3e>
  40acc6:	6934      	ldr	r4, [r6, #16]
  40acc8:	f106 0114 	add.w	r1, r6, #20
  40accc:	f019 091f 	ands.w	r9, r9, #31
  40acd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40acd4:	d01d      	beq.n	40ad12 <__lshift+0x92>
  40acd6:	f1c9 0c20 	rsb	ip, r9, #32
  40acda:	2200      	movs	r2, #0
  40acdc:	680c      	ldr	r4, [r1, #0]
  40acde:	fa04 f409 	lsl.w	r4, r4, r9
  40ace2:	4314      	orrs	r4, r2
  40ace4:	f843 4b04 	str.w	r4, [r3], #4
  40ace8:	f851 2b04 	ldr.w	r2, [r1], #4
  40acec:	458e      	cmp	lr, r1
  40acee:	fa22 f20c 	lsr.w	r2, r2, ip
  40acf2:	d8f3      	bhi.n	40acdc <__lshift+0x5c>
  40acf4:	601a      	str	r2, [r3, #0]
  40acf6:	b10a      	cbz	r2, 40acfc <__lshift+0x7c>
  40acf8:	f108 0502 	add.w	r5, r8, #2
  40acfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40acfe:	6872      	ldr	r2, [r6, #4]
  40ad00:	3d01      	subs	r5, #1
  40ad02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ad06:	6105      	str	r5, [r0, #16]
  40ad08:	6031      	str	r1, [r6, #0]
  40ad0a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ad0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ad12:	3b04      	subs	r3, #4
  40ad14:	f851 2b04 	ldr.w	r2, [r1], #4
  40ad18:	f843 2f04 	str.w	r2, [r3, #4]!
  40ad1c:	458e      	cmp	lr, r1
  40ad1e:	d8f9      	bhi.n	40ad14 <__lshift+0x94>
  40ad20:	e7ec      	b.n	40acfc <__lshift+0x7c>
  40ad22:	bf00      	nop

0040ad24 <__mcmp>:
  40ad24:	b430      	push	{r4, r5}
  40ad26:	690b      	ldr	r3, [r1, #16]
  40ad28:	4605      	mov	r5, r0
  40ad2a:	6900      	ldr	r0, [r0, #16]
  40ad2c:	1ac0      	subs	r0, r0, r3
  40ad2e:	d10f      	bne.n	40ad50 <__mcmp+0x2c>
  40ad30:	009b      	lsls	r3, r3, #2
  40ad32:	3514      	adds	r5, #20
  40ad34:	3114      	adds	r1, #20
  40ad36:	4419      	add	r1, r3
  40ad38:	442b      	add	r3, r5
  40ad3a:	e001      	b.n	40ad40 <__mcmp+0x1c>
  40ad3c:	429d      	cmp	r5, r3
  40ad3e:	d207      	bcs.n	40ad50 <__mcmp+0x2c>
  40ad40:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40ad44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ad48:	4294      	cmp	r4, r2
  40ad4a:	d0f7      	beq.n	40ad3c <__mcmp+0x18>
  40ad4c:	d302      	bcc.n	40ad54 <__mcmp+0x30>
  40ad4e:	2001      	movs	r0, #1
  40ad50:	bc30      	pop	{r4, r5}
  40ad52:	4770      	bx	lr
  40ad54:	f04f 30ff 	mov.w	r0, #4294967295
  40ad58:	e7fa      	b.n	40ad50 <__mcmp+0x2c>
  40ad5a:	bf00      	nop

0040ad5c <__mdiff>:
  40ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ad60:	690f      	ldr	r7, [r1, #16]
  40ad62:	460e      	mov	r6, r1
  40ad64:	6911      	ldr	r1, [r2, #16]
  40ad66:	1a7f      	subs	r7, r7, r1
  40ad68:	2f00      	cmp	r7, #0
  40ad6a:	4690      	mov	r8, r2
  40ad6c:	d117      	bne.n	40ad9e <__mdiff+0x42>
  40ad6e:	0089      	lsls	r1, r1, #2
  40ad70:	f106 0514 	add.w	r5, r6, #20
  40ad74:	f102 0e14 	add.w	lr, r2, #20
  40ad78:	186b      	adds	r3, r5, r1
  40ad7a:	4471      	add	r1, lr
  40ad7c:	e001      	b.n	40ad82 <__mdiff+0x26>
  40ad7e:	429d      	cmp	r5, r3
  40ad80:	d25c      	bcs.n	40ae3c <__mdiff+0xe0>
  40ad82:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ad86:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ad8a:	42a2      	cmp	r2, r4
  40ad8c:	d0f7      	beq.n	40ad7e <__mdiff+0x22>
  40ad8e:	d25e      	bcs.n	40ae4e <__mdiff+0xf2>
  40ad90:	4633      	mov	r3, r6
  40ad92:	462c      	mov	r4, r5
  40ad94:	4646      	mov	r6, r8
  40ad96:	4675      	mov	r5, lr
  40ad98:	4698      	mov	r8, r3
  40ad9a:	2701      	movs	r7, #1
  40ad9c:	e005      	b.n	40adaa <__mdiff+0x4e>
  40ad9e:	db58      	blt.n	40ae52 <__mdiff+0xf6>
  40ada0:	f106 0514 	add.w	r5, r6, #20
  40ada4:	f108 0414 	add.w	r4, r8, #20
  40ada8:	2700      	movs	r7, #0
  40adaa:	6871      	ldr	r1, [r6, #4]
  40adac:	f7ff fdbc 	bl	40a928 <_Balloc>
  40adb0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40adb4:	6936      	ldr	r6, [r6, #16]
  40adb6:	60c7      	str	r7, [r0, #12]
  40adb8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40adbc:	46a6      	mov	lr, r4
  40adbe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40adc2:	f100 0414 	add.w	r4, r0, #20
  40adc6:	2300      	movs	r3, #0
  40adc8:	f85e 1b04 	ldr.w	r1, [lr], #4
  40adcc:	f855 8b04 	ldr.w	r8, [r5], #4
  40add0:	b28a      	uxth	r2, r1
  40add2:	fa13 f388 	uxtah	r3, r3, r8
  40add6:	0c09      	lsrs	r1, r1, #16
  40add8:	1a9a      	subs	r2, r3, r2
  40adda:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40adde:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ade2:	b292      	uxth	r2, r2
  40ade4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ade8:	45f4      	cmp	ip, lr
  40adea:	f844 2b04 	str.w	r2, [r4], #4
  40adee:	ea4f 4323 	mov.w	r3, r3, asr #16
  40adf2:	d8e9      	bhi.n	40adc8 <__mdiff+0x6c>
  40adf4:	42af      	cmp	r7, r5
  40adf6:	d917      	bls.n	40ae28 <__mdiff+0xcc>
  40adf8:	46a4      	mov	ip, r4
  40adfa:	46ae      	mov	lr, r5
  40adfc:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ae00:	fa13 f382 	uxtah	r3, r3, r2
  40ae04:	1419      	asrs	r1, r3, #16
  40ae06:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ae0a:	b29b      	uxth	r3, r3
  40ae0c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ae10:	4577      	cmp	r7, lr
  40ae12:	f84c 2b04 	str.w	r2, [ip], #4
  40ae16:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ae1a:	d8ef      	bhi.n	40adfc <__mdiff+0xa0>
  40ae1c:	43ed      	mvns	r5, r5
  40ae1e:	442f      	add	r7, r5
  40ae20:	f027 0703 	bic.w	r7, r7, #3
  40ae24:	3704      	adds	r7, #4
  40ae26:	443c      	add	r4, r7
  40ae28:	3c04      	subs	r4, #4
  40ae2a:	b922      	cbnz	r2, 40ae36 <__mdiff+0xda>
  40ae2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ae30:	3e01      	subs	r6, #1
  40ae32:	2b00      	cmp	r3, #0
  40ae34:	d0fa      	beq.n	40ae2c <__mdiff+0xd0>
  40ae36:	6106      	str	r6, [r0, #16]
  40ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ae3c:	2100      	movs	r1, #0
  40ae3e:	f7ff fd73 	bl	40a928 <_Balloc>
  40ae42:	2201      	movs	r2, #1
  40ae44:	2300      	movs	r3, #0
  40ae46:	6102      	str	r2, [r0, #16]
  40ae48:	6143      	str	r3, [r0, #20]
  40ae4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ae4e:	4674      	mov	r4, lr
  40ae50:	e7ab      	b.n	40adaa <__mdiff+0x4e>
  40ae52:	4633      	mov	r3, r6
  40ae54:	f106 0414 	add.w	r4, r6, #20
  40ae58:	f102 0514 	add.w	r5, r2, #20
  40ae5c:	4616      	mov	r6, r2
  40ae5e:	2701      	movs	r7, #1
  40ae60:	4698      	mov	r8, r3
  40ae62:	e7a2      	b.n	40adaa <__mdiff+0x4e>

0040ae64 <__d2b>:
  40ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ae68:	b082      	sub	sp, #8
  40ae6a:	2101      	movs	r1, #1
  40ae6c:	461c      	mov	r4, r3
  40ae6e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ae72:	4615      	mov	r5, r2
  40ae74:	9e08      	ldr	r6, [sp, #32]
  40ae76:	f7ff fd57 	bl	40a928 <_Balloc>
  40ae7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ae7e:	4680      	mov	r8, r0
  40ae80:	b10f      	cbz	r7, 40ae86 <__d2b+0x22>
  40ae82:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ae86:	9401      	str	r4, [sp, #4]
  40ae88:	b31d      	cbz	r5, 40aed2 <__d2b+0x6e>
  40ae8a:	a802      	add	r0, sp, #8
  40ae8c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ae90:	f7ff fdda 	bl	40aa48 <__lo0bits>
  40ae94:	2800      	cmp	r0, #0
  40ae96:	d134      	bne.n	40af02 <__d2b+0x9e>
  40ae98:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ae9c:	f8c8 2014 	str.w	r2, [r8, #20]
  40aea0:	2b00      	cmp	r3, #0
  40aea2:	bf0c      	ite	eq
  40aea4:	2101      	moveq	r1, #1
  40aea6:	2102      	movne	r1, #2
  40aea8:	f8c8 3018 	str.w	r3, [r8, #24]
  40aeac:	f8c8 1010 	str.w	r1, [r8, #16]
  40aeb0:	b9df      	cbnz	r7, 40aeea <__d2b+0x86>
  40aeb2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40aeb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40aeba:	6030      	str	r0, [r6, #0]
  40aebc:	6918      	ldr	r0, [r3, #16]
  40aebe:	f7ff fda3 	bl	40aa08 <__hi0bits>
  40aec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aec4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40aec8:	6018      	str	r0, [r3, #0]
  40aeca:	4640      	mov	r0, r8
  40aecc:	b002      	add	sp, #8
  40aece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aed2:	a801      	add	r0, sp, #4
  40aed4:	f7ff fdb8 	bl	40aa48 <__lo0bits>
  40aed8:	9b01      	ldr	r3, [sp, #4]
  40aeda:	f8c8 3014 	str.w	r3, [r8, #20]
  40aede:	2101      	movs	r1, #1
  40aee0:	3020      	adds	r0, #32
  40aee2:	f8c8 1010 	str.w	r1, [r8, #16]
  40aee6:	2f00      	cmp	r7, #0
  40aee8:	d0e3      	beq.n	40aeb2 <__d2b+0x4e>
  40aeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aeec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40aef0:	4407      	add	r7, r0
  40aef2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40aef6:	6037      	str	r7, [r6, #0]
  40aef8:	6018      	str	r0, [r3, #0]
  40aefa:	4640      	mov	r0, r8
  40aefc:	b002      	add	sp, #8
  40aefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af02:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40af06:	f1c0 0220 	rsb	r2, r0, #32
  40af0a:	fa03 f202 	lsl.w	r2, r3, r2
  40af0e:	430a      	orrs	r2, r1
  40af10:	40c3      	lsrs	r3, r0
  40af12:	9301      	str	r3, [sp, #4]
  40af14:	f8c8 2014 	str.w	r2, [r8, #20]
  40af18:	e7c2      	b.n	40aea0 <__d2b+0x3c>
  40af1a:	bf00      	nop

0040af1c <_realloc_r>:
  40af1c:	2900      	cmp	r1, #0
  40af1e:	f000 8095 	beq.w	40b04c <_realloc_r+0x130>
  40af22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af26:	460d      	mov	r5, r1
  40af28:	4616      	mov	r6, r2
  40af2a:	b083      	sub	sp, #12
  40af2c:	4680      	mov	r8, r0
  40af2e:	f106 070b 	add.w	r7, r6, #11
  40af32:	f7fc faa9 	bl	407488 <__malloc_lock>
  40af36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40af3a:	2f16      	cmp	r7, #22
  40af3c:	f02e 0403 	bic.w	r4, lr, #3
  40af40:	f1a5 0908 	sub.w	r9, r5, #8
  40af44:	d83c      	bhi.n	40afc0 <_realloc_r+0xa4>
  40af46:	2210      	movs	r2, #16
  40af48:	4617      	mov	r7, r2
  40af4a:	42be      	cmp	r6, r7
  40af4c:	d83d      	bhi.n	40afca <_realloc_r+0xae>
  40af4e:	4294      	cmp	r4, r2
  40af50:	da43      	bge.n	40afda <_realloc_r+0xbe>
  40af52:	4bc4      	ldr	r3, [pc, #784]	; (40b264 <_realloc_r+0x348>)
  40af54:	6899      	ldr	r1, [r3, #8]
  40af56:	eb09 0004 	add.w	r0, r9, r4
  40af5a:	4288      	cmp	r0, r1
  40af5c:	f000 80b4 	beq.w	40b0c8 <_realloc_r+0x1ac>
  40af60:	6843      	ldr	r3, [r0, #4]
  40af62:	f023 0101 	bic.w	r1, r3, #1
  40af66:	4401      	add	r1, r0
  40af68:	6849      	ldr	r1, [r1, #4]
  40af6a:	07c9      	lsls	r1, r1, #31
  40af6c:	d54c      	bpl.n	40b008 <_realloc_r+0xec>
  40af6e:	f01e 0f01 	tst.w	lr, #1
  40af72:	f000 809b 	beq.w	40b0ac <_realloc_r+0x190>
  40af76:	4631      	mov	r1, r6
  40af78:	4640      	mov	r0, r8
  40af7a:	f7fb feed 	bl	406d58 <_malloc_r>
  40af7e:	4606      	mov	r6, r0
  40af80:	2800      	cmp	r0, #0
  40af82:	d03a      	beq.n	40affa <_realloc_r+0xde>
  40af84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40af88:	f023 0301 	bic.w	r3, r3, #1
  40af8c:	444b      	add	r3, r9
  40af8e:	f1a0 0208 	sub.w	r2, r0, #8
  40af92:	429a      	cmp	r2, r3
  40af94:	f000 8121 	beq.w	40b1da <_realloc_r+0x2be>
  40af98:	1f22      	subs	r2, r4, #4
  40af9a:	2a24      	cmp	r2, #36	; 0x24
  40af9c:	f200 8107 	bhi.w	40b1ae <_realloc_r+0x292>
  40afa0:	2a13      	cmp	r2, #19
  40afa2:	f200 80db 	bhi.w	40b15c <_realloc_r+0x240>
  40afa6:	4603      	mov	r3, r0
  40afa8:	462a      	mov	r2, r5
  40afaa:	6811      	ldr	r1, [r2, #0]
  40afac:	6019      	str	r1, [r3, #0]
  40afae:	6851      	ldr	r1, [r2, #4]
  40afb0:	6059      	str	r1, [r3, #4]
  40afb2:	6892      	ldr	r2, [r2, #8]
  40afb4:	609a      	str	r2, [r3, #8]
  40afb6:	4629      	mov	r1, r5
  40afb8:	4640      	mov	r0, r8
  40afba:	f7ff f8e9 	bl	40a190 <_free_r>
  40afbe:	e01c      	b.n	40affa <_realloc_r+0xde>
  40afc0:	f027 0707 	bic.w	r7, r7, #7
  40afc4:	2f00      	cmp	r7, #0
  40afc6:	463a      	mov	r2, r7
  40afc8:	dabf      	bge.n	40af4a <_realloc_r+0x2e>
  40afca:	2600      	movs	r6, #0
  40afcc:	230c      	movs	r3, #12
  40afce:	4630      	mov	r0, r6
  40afd0:	f8c8 3000 	str.w	r3, [r8]
  40afd4:	b003      	add	sp, #12
  40afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afda:	462e      	mov	r6, r5
  40afdc:	1be3      	subs	r3, r4, r7
  40afde:	2b0f      	cmp	r3, #15
  40afe0:	d81e      	bhi.n	40b020 <_realloc_r+0x104>
  40afe2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40afe6:	f003 0301 	and.w	r3, r3, #1
  40afea:	4323      	orrs	r3, r4
  40afec:	444c      	add	r4, r9
  40afee:	f8c9 3004 	str.w	r3, [r9, #4]
  40aff2:	6863      	ldr	r3, [r4, #4]
  40aff4:	f043 0301 	orr.w	r3, r3, #1
  40aff8:	6063      	str	r3, [r4, #4]
  40affa:	4640      	mov	r0, r8
  40affc:	f7fc fa4a 	bl	407494 <__malloc_unlock>
  40b000:	4630      	mov	r0, r6
  40b002:	b003      	add	sp, #12
  40b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b008:	f023 0303 	bic.w	r3, r3, #3
  40b00c:	18e1      	adds	r1, r4, r3
  40b00e:	4291      	cmp	r1, r2
  40b010:	db1f      	blt.n	40b052 <_realloc_r+0x136>
  40b012:	68c3      	ldr	r3, [r0, #12]
  40b014:	6882      	ldr	r2, [r0, #8]
  40b016:	462e      	mov	r6, r5
  40b018:	60d3      	str	r3, [r2, #12]
  40b01a:	460c      	mov	r4, r1
  40b01c:	609a      	str	r2, [r3, #8]
  40b01e:	e7dd      	b.n	40afdc <_realloc_r+0xc0>
  40b020:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b024:	eb09 0107 	add.w	r1, r9, r7
  40b028:	f002 0201 	and.w	r2, r2, #1
  40b02c:	444c      	add	r4, r9
  40b02e:	f043 0301 	orr.w	r3, r3, #1
  40b032:	4317      	orrs	r7, r2
  40b034:	f8c9 7004 	str.w	r7, [r9, #4]
  40b038:	604b      	str	r3, [r1, #4]
  40b03a:	6863      	ldr	r3, [r4, #4]
  40b03c:	f043 0301 	orr.w	r3, r3, #1
  40b040:	3108      	adds	r1, #8
  40b042:	6063      	str	r3, [r4, #4]
  40b044:	4640      	mov	r0, r8
  40b046:	f7ff f8a3 	bl	40a190 <_free_r>
  40b04a:	e7d6      	b.n	40affa <_realloc_r+0xde>
  40b04c:	4611      	mov	r1, r2
  40b04e:	f7fb be83 	b.w	406d58 <_malloc_r>
  40b052:	f01e 0f01 	tst.w	lr, #1
  40b056:	d18e      	bne.n	40af76 <_realloc_r+0x5a>
  40b058:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b05c:	eba9 0a01 	sub.w	sl, r9, r1
  40b060:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b064:	f021 0103 	bic.w	r1, r1, #3
  40b068:	440b      	add	r3, r1
  40b06a:	4423      	add	r3, r4
  40b06c:	4293      	cmp	r3, r2
  40b06e:	db25      	blt.n	40b0bc <_realloc_r+0x1a0>
  40b070:	68c2      	ldr	r2, [r0, #12]
  40b072:	6881      	ldr	r1, [r0, #8]
  40b074:	4656      	mov	r6, sl
  40b076:	60ca      	str	r2, [r1, #12]
  40b078:	6091      	str	r1, [r2, #8]
  40b07a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b07e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b082:	1f22      	subs	r2, r4, #4
  40b084:	2a24      	cmp	r2, #36	; 0x24
  40b086:	60c1      	str	r1, [r0, #12]
  40b088:	6088      	str	r0, [r1, #8]
  40b08a:	f200 8094 	bhi.w	40b1b6 <_realloc_r+0x29a>
  40b08e:	2a13      	cmp	r2, #19
  40b090:	d96f      	bls.n	40b172 <_realloc_r+0x256>
  40b092:	6829      	ldr	r1, [r5, #0]
  40b094:	f8ca 1008 	str.w	r1, [sl, #8]
  40b098:	6869      	ldr	r1, [r5, #4]
  40b09a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b09e:	2a1b      	cmp	r2, #27
  40b0a0:	f200 80a2 	bhi.w	40b1e8 <_realloc_r+0x2cc>
  40b0a4:	3508      	adds	r5, #8
  40b0a6:	f10a 0210 	add.w	r2, sl, #16
  40b0aa:	e063      	b.n	40b174 <_realloc_r+0x258>
  40b0ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b0b0:	eba9 0a03 	sub.w	sl, r9, r3
  40b0b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b0b8:	f021 0103 	bic.w	r1, r1, #3
  40b0bc:	1863      	adds	r3, r4, r1
  40b0be:	4293      	cmp	r3, r2
  40b0c0:	f6ff af59 	blt.w	40af76 <_realloc_r+0x5a>
  40b0c4:	4656      	mov	r6, sl
  40b0c6:	e7d8      	b.n	40b07a <_realloc_r+0x15e>
  40b0c8:	6841      	ldr	r1, [r0, #4]
  40b0ca:	f021 0b03 	bic.w	fp, r1, #3
  40b0ce:	44a3      	add	fp, r4
  40b0d0:	f107 0010 	add.w	r0, r7, #16
  40b0d4:	4583      	cmp	fp, r0
  40b0d6:	da56      	bge.n	40b186 <_realloc_r+0x26a>
  40b0d8:	f01e 0f01 	tst.w	lr, #1
  40b0dc:	f47f af4b 	bne.w	40af76 <_realloc_r+0x5a>
  40b0e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b0e4:	eba9 0a01 	sub.w	sl, r9, r1
  40b0e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b0ec:	f021 0103 	bic.w	r1, r1, #3
  40b0f0:	448b      	add	fp, r1
  40b0f2:	4558      	cmp	r0, fp
  40b0f4:	dce2      	bgt.n	40b0bc <_realloc_r+0x1a0>
  40b0f6:	4656      	mov	r6, sl
  40b0f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b0fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b100:	1f22      	subs	r2, r4, #4
  40b102:	2a24      	cmp	r2, #36	; 0x24
  40b104:	60c1      	str	r1, [r0, #12]
  40b106:	6088      	str	r0, [r1, #8]
  40b108:	f200 808f 	bhi.w	40b22a <_realloc_r+0x30e>
  40b10c:	2a13      	cmp	r2, #19
  40b10e:	f240 808a 	bls.w	40b226 <_realloc_r+0x30a>
  40b112:	6829      	ldr	r1, [r5, #0]
  40b114:	f8ca 1008 	str.w	r1, [sl, #8]
  40b118:	6869      	ldr	r1, [r5, #4]
  40b11a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b11e:	2a1b      	cmp	r2, #27
  40b120:	f200 808a 	bhi.w	40b238 <_realloc_r+0x31c>
  40b124:	3508      	adds	r5, #8
  40b126:	f10a 0210 	add.w	r2, sl, #16
  40b12a:	6829      	ldr	r1, [r5, #0]
  40b12c:	6011      	str	r1, [r2, #0]
  40b12e:	6869      	ldr	r1, [r5, #4]
  40b130:	6051      	str	r1, [r2, #4]
  40b132:	68a9      	ldr	r1, [r5, #8]
  40b134:	6091      	str	r1, [r2, #8]
  40b136:	eb0a 0107 	add.w	r1, sl, r7
  40b13a:	ebab 0207 	sub.w	r2, fp, r7
  40b13e:	f042 0201 	orr.w	r2, r2, #1
  40b142:	6099      	str	r1, [r3, #8]
  40b144:	604a      	str	r2, [r1, #4]
  40b146:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b14a:	f003 0301 	and.w	r3, r3, #1
  40b14e:	431f      	orrs	r7, r3
  40b150:	4640      	mov	r0, r8
  40b152:	f8ca 7004 	str.w	r7, [sl, #4]
  40b156:	f7fc f99d 	bl	407494 <__malloc_unlock>
  40b15a:	e751      	b.n	40b000 <_realloc_r+0xe4>
  40b15c:	682b      	ldr	r3, [r5, #0]
  40b15e:	6003      	str	r3, [r0, #0]
  40b160:	686b      	ldr	r3, [r5, #4]
  40b162:	6043      	str	r3, [r0, #4]
  40b164:	2a1b      	cmp	r2, #27
  40b166:	d82d      	bhi.n	40b1c4 <_realloc_r+0x2a8>
  40b168:	f100 0308 	add.w	r3, r0, #8
  40b16c:	f105 0208 	add.w	r2, r5, #8
  40b170:	e71b      	b.n	40afaa <_realloc_r+0x8e>
  40b172:	4632      	mov	r2, r6
  40b174:	6829      	ldr	r1, [r5, #0]
  40b176:	6011      	str	r1, [r2, #0]
  40b178:	6869      	ldr	r1, [r5, #4]
  40b17a:	6051      	str	r1, [r2, #4]
  40b17c:	68a9      	ldr	r1, [r5, #8]
  40b17e:	6091      	str	r1, [r2, #8]
  40b180:	461c      	mov	r4, r3
  40b182:	46d1      	mov	r9, sl
  40b184:	e72a      	b.n	40afdc <_realloc_r+0xc0>
  40b186:	eb09 0107 	add.w	r1, r9, r7
  40b18a:	ebab 0b07 	sub.w	fp, fp, r7
  40b18e:	f04b 0201 	orr.w	r2, fp, #1
  40b192:	6099      	str	r1, [r3, #8]
  40b194:	604a      	str	r2, [r1, #4]
  40b196:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b19a:	f003 0301 	and.w	r3, r3, #1
  40b19e:	431f      	orrs	r7, r3
  40b1a0:	4640      	mov	r0, r8
  40b1a2:	f845 7c04 	str.w	r7, [r5, #-4]
  40b1a6:	f7fc f975 	bl	407494 <__malloc_unlock>
  40b1aa:	462e      	mov	r6, r5
  40b1ac:	e728      	b.n	40b000 <_realloc_r+0xe4>
  40b1ae:	4629      	mov	r1, r5
  40b1b0:	f7ff fb56 	bl	40a860 <memmove>
  40b1b4:	e6ff      	b.n	40afb6 <_realloc_r+0x9a>
  40b1b6:	4629      	mov	r1, r5
  40b1b8:	4630      	mov	r0, r6
  40b1ba:	461c      	mov	r4, r3
  40b1bc:	46d1      	mov	r9, sl
  40b1be:	f7ff fb4f 	bl	40a860 <memmove>
  40b1c2:	e70b      	b.n	40afdc <_realloc_r+0xc0>
  40b1c4:	68ab      	ldr	r3, [r5, #8]
  40b1c6:	6083      	str	r3, [r0, #8]
  40b1c8:	68eb      	ldr	r3, [r5, #12]
  40b1ca:	60c3      	str	r3, [r0, #12]
  40b1cc:	2a24      	cmp	r2, #36	; 0x24
  40b1ce:	d017      	beq.n	40b200 <_realloc_r+0x2e4>
  40b1d0:	f100 0310 	add.w	r3, r0, #16
  40b1d4:	f105 0210 	add.w	r2, r5, #16
  40b1d8:	e6e7      	b.n	40afaa <_realloc_r+0x8e>
  40b1da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b1de:	f023 0303 	bic.w	r3, r3, #3
  40b1e2:	441c      	add	r4, r3
  40b1e4:	462e      	mov	r6, r5
  40b1e6:	e6f9      	b.n	40afdc <_realloc_r+0xc0>
  40b1e8:	68a9      	ldr	r1, [r5, #8]
  40b1ea:	f8ca 1010 	str.w	r1, [sl, #16]
  40b1ee:	68e9      	ldr	r1, [r5, #12]
  40b1f0:	f8ca 1014 	str.w	r1, [sl, #20]
  40b1f4:	2a24      	cmp	r2, #36	; 0x24
  40b1f6:	d00c      	beq.n	40b212 <_realloc_r+0x2f6>
  40b1f8:	3510      	adds	r5, #16
  40b1fa:	f10a 0218 	add.w	r2, sl, #24
  40b1fe:	e7b9      	b.n	40b174 <_realloc_r+0x258>
  40b200:	692b      	ldr	r3, [r5, #16]
  40b202:	6103      	str	r3, [r0, #16]
  40b204:	696b      	ldr	r3, [r5, #20]
  40b206:	6143      	str	r3, [r0, #20]
  40b208:	f105 0218 	add.w	r2, r5, #24
  40b20c:	f100 0318 	add.w	r3, r0, #24
  40b210:	e6cb      	b.n	40afaa <_realloc_r+0x8e>
  40b212:	692a      	ldr	r2, [r5, #16]
  40b214:	f8ca 2018 	str.w	r2, [sl, #24]
  40b218:	696a      	ldr	r2, [r5, #20]
  40b21a:	f8ca 201c 	str.w	r2, [sl, #28]
  40b21e:	3518      	adds	r5, #24
  40b220:	f10a 0220 	add.w	r2, sl, #32
  40b224:	e7a6      	b.n	40b174 <_realloc_r+0x258>
  40b226:	4632      	mov	r2, r6
  40b228:	e77f      	b.n	40b12a <_realloc_r+0x20e>
  40b22a:	4629      	mov	r1, r5
  40b22c:	4630      	mov	r0, r6
  40b22e:	9301      	str	r3, [sp, #4]
  40b230:	f7ff fb16 	bl	40a860 <memmove>
  40b234:	9b01      	ldr	r3, [sp, #4]
  40b236:	e77e      	b.n	40b136 <_realloc_r+0x21a>
  40b238:	68a9      	ldr	r1, [r5, #8]
  40b23a:	f8ca 1010 	str.w	r1, [sl, #16]
  40b23e:	68e9      	ldr	r1, [r5, #12]
  40b240:	f8ca 1014 	str.w	r1, [sl, #20]
  40b244:	2a24      	cmp	r2, #36	; 0x24
  40b246:	d003      	beq.n	40b250 <_realloc_r+0x334>
  40b248:	3510      	adds	r5, #16
  40b24a:	f10a 0218 	add.w	r2, sl, #24
  40b24e:	e76c      	b.n	40b12a <_realloc_r+0x20e>
  40b250:	692a      	ldr	r2, [r5, #16]
  40b252:	f8ca 2018 	str.w	r2, [sl, #24]
  40b256:	696a      	ldr	r2, [r5, #20]
  40b258:	f8ca 201c 	str.w	r2, [sl, #28]
  40b25c:	3518      	adds	r5, #24
  40b25e:	f10a 0220 	add.w	r2, sl, #32
  40b262:	e762      	b.n	40b12a <_realloc_r+0x20e>
  40b264:	20400448 	.word	0x20400448

0040b268 <__sread>:
  40b268:	b510      	push	{r4, lr}
  40b26a:	460c      	mov	r4, r1
  40b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b270:	f000 fa88 	bl	40b784 <_read_r>
  40b274:	2800      	cmp	r0, #0
  40b276:	db03      	blt.n	40b280 <__sread+0x18>
  40b278:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b27a:	4403      	add	r3, r0
  40b27c:	6523      	str	r3, [r4, #80]	; 0x50
  40b27e:	bd10      	pop	{r4, pc}
  40b280:	89a3      	ldrh	r3, [r4, #12]
  40b282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b286:	81a3      	strh	r3, [r4, #12]
  40b288:	bd10      	pop	{r4, pc}
  40b28a:	bf00      	nop

0040b28c <__swrite>:
  40b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b290:	4616      	mov	r6, r2
  40b292:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b296:	461f      	mov	r7, r3
  40b298:	05d3      	lsls	r3, r2, #23
  40b29a:	460c      	mov	r4, r1
  40b29c:	4605      	mov	r5, r0
  40b29e:	d507      	bpl.n	40b2b0 <__swrite+0x24>
  40b2a0:	2200      	movs	r2, #0
  40b2a2:	2302      	movs	r3, #2
  40b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b2a8:	f000 fa40 	bl	40b72c <_lseek_r>
  40b2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b2b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b2b8:	81a2      	strh	r2, [r4, #12]
  40b2ba:	463b      	mov	r3, r7
  40b2bc:	4632      	mov	r2, r6
  40b2be:	4628      	mov	r0, r5
  40b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b2c4:	f000 b85e 	b.w	40b384 <_write_r>

0040b2c8 <__sseek>:
  40b2c8:	b510      	push	{r4, lr}
  40b2ca:	460c      	mov	r4, r1
  40b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b2d0:	f000 fa2c 	bl	40b72c <_lseek_r>
  40b2d4:	89a3      	ldrh	r3, [r4, #12]
  40b2d6:	1c42      	adds	r2, r0, #1
  40b2d8:	bf0e      	itee	eq
  40b2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b2e2:	6520      	strne	r0, [r4, #80]	; 0x50
  40b2e4:	81a3      	strh	r3, [r4, #12]
  40b2e6:	bd10      	pop	{r4, pc}

0040b2e8 <__sclose>:
  40b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b2ec:	f000 b8f2 	b.w	40b4d4 <_close_r>

0040b2f0 <__sprint_r.part.0>:
  40b2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b2f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b2f6:	049c      	lsls	r4, r3, #18
  40b2f8:	4693      	mov	fp, r2
  40b2fa:	d52f      	bpl.n	40b35c <__sprint_r.part.0+0x6c>
  40b2fc:	6893      	ldr	r3, [r2, #8]
  40b2fe:	6812      	ldr	r2, [r2, #0]
  40b300:	b353      	cbz	r3, 40b358 <__sprint_r.part.0+0x68>
  40b302:	460e      	mov	r6, r1
  40b304:	4607      	mov	r7, r0
  40b306:	f102 0908 	add.w	r9, r2, #8
  40b30a:	e919 0420 	ldmdb	r9, {r5, sl}
  40b30e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40b312:	d017      	beq.n	40b344 <__sprint_r.part.0+0x54>
  40b314:	3d04      	subs	r5, #4
  40b316:	2400      	movs	r4, #0
  40b318:	e001      	b.n	40b31e <__sprint_r.part.0+0x2e>
  40b31a:	45a0      	cmp	r8, r4
  40b31c:	d010      	beq.n	40b340 <__sprint_r.part.0+0x50>
  40b31e:	4632      	mov	r2, r6
  40b320:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40b324:	4638      	mov	r0, r7
  40b326:	f000 f999 	bl	40b65c <_fputwc_r>
  40b32a:	1c43      	adds	r3, r0, #1
  40b32c:	f104 0401 	add.w	r4, r4, #1
  40b330:	d1f3      	bne.n	40b31a <__sprint_r.part.0+0x2a>
  40b332:	2300      	movs	r3, #0
  40b334:	f8cb 3008 	str.w	r3, [fp, #8]
  40b338:	f8cb 3004 	str.w	r3, [fp, #4]
  40b33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b340:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b344:	f02a 0a03 	bic.w	sl, sl, #3
  40b348:	eba3 030a 	sub.w	r3, r3, sl
  40b34c:	f8cb 3008 	str.w	r3, [fp, #8]
  40b350:	f109 0908 	add.w	r9, r9, #8
  40b354:	2b00      	cmp	r3, #0
  40b356:	d1d8      	bne.n	40b30a <__sprint_r.part.0+0x1a>
  40b358:	2000      	movs	r0, #0
  40b35a:	e7ea      	b.n	40b332 <__sprint_r.part.0+0x42>
  40b35c:	f7fe fffe 	bl	40a35c <__sfvwrite_r>
  40b360:	2300      	movs	r3, #0
  40b362:	f8cb 3008 	str.w	r3, [fp, #8]
  40b366:	f8cb 3004 	str.w	r3, [fp, #4]
  40b36a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b36e:	bf00      	nop

0040b370 <__sprint_r>:
  40b370:	6893      	ldr	r3, [r2, #8]
  40b372:	b10b      	cbz	r3, 40b378 <__sprint_r+0x8>
  40b374:	f7ff bfbc 	b.w	40b2f0 <__sprint_r.part.0>
  40b378:	b410      	push	{r4}
  40b37a:	4618      	mov	r0, r3
  40b37c:	6053      	str	r3, [r2, #4]
  40b37e:	bc10      	pop	{r4}
  40b380:	4770      	bx	lr
  40b382:	bf00      	nop

0040b384 <_write_r>:
  40b384:	b570      	push	{r4, r5, r6, lr}
  40b386:	460d      	mov	r5, r1
  40b388:	4c08      	ldr	r4, [pc, #32]	; (40b3ac <_write_r+0x28>)
  40b38a:	4611      	mov	r1, r2
  40b38c:	4606      	mov	r6, r0
  40b38e:	461a      	mov	r2, r3
  40b390:	4628      	mov	r0, r5
  40b392:	2300      	movs	r3, #0
  40b394:	6023      	str	r3, [r4, #0]
  40b396:	f7f6 f8ab 	bl	4014f0 <_write>
  40b39a:	1c43      	adds	r3, r0, #1
  40b39c:	d000      	beq.n	40b3a0 <_write_r+0x1c>
  40b39e:	bd70      	pop	{r4, r5, r6, pc}
  40b3a0:	6823      	ldr	r3, [r4, #0]
  40b3a2:	2b00      	cmp	r3, #0
  40b3a4:	d0fb      	beq.n	40b39e <_write_r+0x1a>
  40b3a6:	6033      	str	r3, [r6, #0]
  40b3a8:	bd70      	pop	{r4, r5, r6, pc}
  40b3aa:	bf00      	nop
  40b3ac:	20400e4c 	.word	0x20400e4c

0040b3b0 <__register_exitproc>:
  40b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b3b4:	4d2c      	ldr	r5, [pc, #176]	; (40b468 <__register_exitproc+0xb8>)
  40b3b6:	4606      	mov	r6, r0
  40b3b8:	6828      	ldr	r0, [r5, #0]
  40b3ba:	4698      	mov	r8, r3
  40b3bc:	460f      	mov	r7, r1
  40b3be:	4691      	mov	r9, r2
  40b3c0:	f7ff f980 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  40b3c4:	4b29      	ldr	r3, [pc, #164]	; (40b46c <__register_exitproc+0xbc>)
  40b3c6:	681c      	ldr	r4, [r3, #0]
  40b3c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40b3cc:	2b00      	cmp	r3, #0
  40b3ce:	d03e      	beq.n	40b44e <__register_exitproc+0x9e>
  40b3d0:	685a      	ldr	r2, [r3, #4]
  40b3d2:	2a1f      	cmp	r2, #31
  40b3d4:	dc1c      	bgt.n	40b410 <__register_exitproc+0x60>
  40b3d6:	f102 0e01 	add.w	lr, r2, #1
  40b3da:	b176      	cbz	r6, 40b3fa <__register_exitproc+0x4a>
  40b3dc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40b3e0:	2401      	movs	r4, #1
  40b3e2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40b3e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40b3ea:	4094      	lsls	r4, r2
  40b3ec:	4320      	orrs	r0, r4
  40b3ee:	2e02      	cmp	r6, #2
  40b3f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40b3f4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40b3f8:	d023      	beq.n	40b442 <__register_exitproc+0x92>
  40b3fa:	3202      	adds	r2, #2
  40b3fc:	f8c3 e004 	str.w	lr, [r3, #4]
  40b400:	6828      	ldr	r0, [r5, #0]
  40b402:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40b406:	f7ff f95f 	bl	40a6c8 <__retarget_lock_release_recursive>
  40b40a:	2000      	movs	r0, #0
  40b40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b410:	4b17      	ldr	r3, [pc, #92]	; (40b470 <__register_exitproc+0xc0>)
  40b412:	b30b      	cbz	r3, 40b458 <__register_exitproc+0xa8>
  40b414:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b418:	f7fb fc8e 	bl	406d38 <malloc>
  40b41c:	4603      	mov	r3, r0
  40b41e:	b1d8      	cbz	r0, 40b458 <__register_exitproc+0xa8>
  40b420:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40b424:	6002      	str	r2, [r0, #0]
  40b426:	2100      	movs	r1, #0
  40b428:	6041      	str	r1, [r0, #4]
  40b42a:	460a      	mov	r2, r1
  40b42c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40b430:	f04f 0e01 	mov.w	lr, #1
  40b434:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40b438:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40b43c:	2e00      	cmp	r6, #0
  40b43e:	d0dc      	beq.n	40b3fa <__register_exitproc+0x4a>
  40b440:	e7cc      	b.n	40b3dc <__register_exitproc+0x2c>
  40b442:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40b446:	430c      	orrs	r4, r1
  40b448:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40b44c:	e7d5      	b.n	40b3fa <__register_exitproc+0x4a>
  40b44e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40b452:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40b456:	e7bb      	b.n	40b3d0 <__register_exitproc+0x20>
  40b458:	6828      	ldr	r0, [r5, #0]
  40b45a:	f7ff f935 	bl	40a6c8 <__retarget_lock_release_recursive>
  40b45e:	f04f 30ff 	mov.w	r0, #4294967295
  40b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b466:	bf00      	nop
  40b468:	20400858 	.word	0x20400858
  40b46c:	0040c224 	.word	0x0040c224
  40b470:	00406d39 	.word	0x00406d39

0040b474 <_calloc_r>:
  40b474:	b510      	push	{r4, lr}
  40b476:	fb02 f101 	mul.w	r1, r2, r1
  40b47a:	f7fb fc6d 	bl	406d58 <_malloc_r>
  40b47e:	4604      	mov	r4, r0
  40b480:	b1d8      	cbz	r0, 40b4ba <_calloc_r+0x46>
  40b482:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b486:	f022 0203 	bic.w	r2, r2, #3
  40b48a:	3a04      	subs	r2, #4
  40b48c:	2a24      	cmp	r2, #36	; 0x24
  40b48e:	d818      	bhi.n	40b4c2 <_calloc_r+0x4e>
  40b490:	2a13      	cmp	r2, #19
  40b492:	d914      	bls.n	40b4be <_calloc_r+0x4a>
  40b494:	2300      	movs	r3, #0
  40b496:	2a1b      	cmp	r2, #27
  40b498:	6003      	str	r3, [r0, #0]
  40b49a:	6043      	str	r3, [r0, #4]
  40b49c:	d916      	bls.n	40b4cc <_calloc_r+0x58>
  40b49e:	2a24      	cmp	r2, #36	; 0x24
  40b4a0:	6083      	str	r3, [r0, #8]
  40b4a2:	60c3      	str	r3, [r0, #12]
  40b4a4:	bf11      	iteee	ne
  40b4a6:	f100 0210 	addne.w	r2, r0, #16
  40b4aa:	6103      	streq	r3, [r0, #16]
  40b4ac:	6143      	streq	r3, [r0, #20]
  40b4ae:	f100 0218 	addeq.w	r2, r0, #24
  40b4b2:	2300      	movs	r3, #0
  40b4b4:	6013      	str	r3, [r2, #0]
  40b4b6:	6053      	str	r3, [r2, #4]
  40b4b8:	6093      	str	r3, [r2, #8]
  40b4ba:	4620      	mov	r0, r4
  40b4bc:	bd10      	pop	{r4, pc}
  40b4be:	4602      	mov	r2, r0
  40b4c0:	e7f7      	b.n	40b4b2 <_calloc_r+0x3e>
  40b4c2:	2100      	movs	r1, #0
  40b4c4:	f7fb ff92 	bl	4073ec <memset>
  40b4c8:	4620      	mov	r0, r4
  40b4ca:	bd10      	pop	{r4, pc}
  40b4cc:	f100 0208 	add.w	r2, r0, #8
  40b4d0:	e7ef      	b.n	40b4b2 <_calloc_r+0x3e>
  40b4d2:	bf00      	nop

0040b4d4 <_close_r>:
  40b4d4:	b538      	push	{r3, r4, r5, lr}
  40b4d6:	4c07      	ldr	r4, [pc, #28]	; (40b4f4 <_close_r+0x20>)
  40b4d8:	2300      	movs	r3, #0
  40b4da:	4605      	mov	r5, r0
  40b4dc:	4608      	mov	r0, r1
  40b4de:	6023      	str	r3, [r4, #0]
  40b4e0:	f7f6 fcbe 	bl	401e60 <_close>
  40b4e4:	1c43      	adds	r3, r0, #1
  40b4e6:	d000      	beq.n	40b4ea <_close_r+0x16>
  40b4e8:	bd38      	pop	{r3, r4, r5, pc}
  40b4ea:	6823      	ldr	r3, [r4, #0]
  40b4ec:	2b00      	cmp	r3, #0
  40b4ee:	d0fb      	beq.n	40b4e8 <_close_r+0x14>
  40b4f0:	602b      	str	r3, [r5, #0]
  40b4f2:	bd38      	pop	{r3, r4, r5, pc}
  40b4f4:	20400e4c 	.word	0x20400e4c

0040b4f8 <_fclose_r>:
  40b4f8:	b570      	push	{r4, r5, r6, lr}
  40b4fa:	b159      	cbz	r1, 40b514 <_fclose_r+0x1c>
  40b4fc:	4605      	mov	r5, r0
  40b4fe:	460c      	mov	r4, r1
  40b500:	b110      	cbz	r0, 40b508 <_fclose_r+0x10>
  40b502:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b504:	2b00      	cmp	r3, #0
  40b506:	d03c      	beq.n	40b582 <_fclose_r+0x8a>
  40b508:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b50a:	07d8      	lsls	r0, r3, #31
  40b50c:	d505      	bpl.n	40b51a <_fclose_r+0x22>
  40b50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b512:	b92b      	cbnz	r3, 40b520 <_fclose_r+0x28>
  40b514:	2600      	movs	r6, #0
  40b516:	4630      	mov	r0, r6
  40b518:	bd70      	pop	{r4, r5, r6, pc}
  40b51a:	89a3      	ldrh	r3, [r4, #12]
  40b51c:	0599      	lsls	r1, r3, #22
  40b51e:	d53c      	bpl.n	40b59a <_fclose_r+0xa2>
  40b520:	4621      	mov	r1, r4
  40b522:	4628      	mov	r0, r5
  40b524:	f7fe fc9a 	bl	409e5c <__sflush_r>
  40b528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b52a:	4606      	mov	r6, r0
  40b52c:	b133      	cbz	r3, 40b53c <_fclose_r+0x44>
  40b52e:	69e1      	ldr	r1, [r4, #28]
  40b530:	4628      	mov	r0, r5
  40b532:	4798      	blx	r3
  40b534:	2800      	cmp	r0, #0
  40b536:	bfb8      	it	lt
  40b538:	f04f 36ff 	movlt.w	r6, #4294967295
  40b53c:	89a3      	ldrh	r3, [r4, #12]
  40b53e:	061a      	lsls	r2, r3, #24
  40b540:	d422      	bmi.n	40b588 <_fclose_r+0x90>
  40b542:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b544:	b141      	cbz	r1, 40b558 <_fclose_r+0x60>
  40b546:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b54a:	4299      	cmp	r1, r3
  40b54c:	d002      	beq.n	40b554 <_fclose_r+0x5c>
  40b54e:	4628      	mov	r0, r5
  40b550:	f7fe fe1e 	bl	40a190 <_free_r>
  40b554:	2300      	movs	r3, #0
  40b556:	6323      	str	r3, [r4, #48]	; 0x30
  40b558:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40b55a:	b121      	cbz	r1, 40b566 <_fclose_r+0x6e>
  40b55c:	4628      	mov	r0, r5
  40b55e:	f7fe fe17 	bl	40a190 <_free_r>
  40b562:	2300      	movs	r3, #0
  40b564:	6463      	str	r3, [r4, #68]	; 0x44
  40b566:	f7fe fd9d 	bl	40a0a4 <__sfp_lock_acquire>
  40b56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b56c:	2200      	movs	r2, #0
  40b56e:	07db      	lsls	r3, r3, #31
  40b570:	81a2      	strh	r2, [r4, #12]
  40b572:	d50e      	bpl.n	40b592 <_fclose_r+0x9a>
  40b574:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b576:	f7ff f8a3 	bl	40a6c0 <__retarget_lock_close_recursive>
  40b57a:	f7fe fd99 	bl	40a0b0 <__sfp_lock_release>
  40b57e:	4630      	mov	r0, r6
  40b580:	bd70      	pop	{r4, r5, r6, pc}
  40b582:	f7fe fd63 	bl	40a04c <__sinit>
  40b586:	e7bf      	b.n	40b508 <_fclose_r+0x10>
  40b588:	6921      	ldr	r1, [r4, #16]
  40b58a:	4628      	mov	r0, r5
  40b58c:	f7fe fe00 	bl	40a190 <_free_r>
  40b590:	e7d7      	b.n	40b542 <_fclose_r+0x4a>
  40b592:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b594:	f7ff f898 	bl	40a6c8 <__retarget_lock_release_recursive>
  40b598:	e7ec      	b.n	40b574 <_fclose_r+0x7c>
  40b59a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b59c:	f7ff f892 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  40b5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b5a4:	2b00      	cmp	r3, #0
  40b5a6:	d1bb      	bne.n	40b520 <_fclose_r+0x28>
  40b5a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40b5aa:	f016 0601 	ands.w	r6, r6, #1
  40b5ae:	d1b1      	bne.n	40b514 <_fclose_r+0x1c>
  40b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b5b2:	f7ff f889 	bl	40a6c8 <__retarget_lock_release_recursive>
  40b5b6:	4630      	mov	r0, r6
  40b5b8:	bd70      	pop	{r4, r5, r6, pc}
  40b5ba:	bf00      	nop

0040b5bc <__fputwc>:
  40b5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b5c0:	b082      	sub	sp, #8
  40b5c2:	4680      	mov	r8, r0
  40b5c4:	4689      	mov	r9, r1
  40b5c6:	4614      	mov	r4, r2
  40b5c8:	f000 f8a2 	bl	40b710 <__locale_mb_cur_max>
  40b5cc:	2801      	cmp	r0, #1
  40b5ce:	d036      	beq.n	40b63e <__fputwc+0x82>
  40b5d0:	464a      	mov	r2, r9
  40b5d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b5d6:	a901      	add	r1, sp, #4
  40b5d8:	4640      	mov	r0, r8
  40b5da:	f000 f941 	bl	40b860 <_wcrtomb_r>
  40b5de:	1c42      	adds	r2, r0, #1
  40b5e0:	4606      	mov	r6, r0
  40b5e2:	d025      	beq.n	40b630 <__fputwc+0x74>
  40b5e4:	b3a8      	cbz	r0, 40b652 <__fputwc+0x96>
  40b5e6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40b5ea:	2500      	movs	r5, #0
  40b5ec:	f10d 0a04 	add.w	sl, sp, #4
  40b5f0:	e009      	b.n	40b606 <__fputwc+0x4a>
  40b5f2:	6823      	ldr	r3, [r4, #0]
  40b5f4:	1c5a      	adds	r2, r3, #1
  40b5f6:	6022      	str	r2, [r4, #0]
  40b5f8:	f883 e000 	strb.w	lr, [r3]
  40b5fc:	3501      	adds	r5, #1
  40b5fe:	42b5      	cmp	r5, r6
  40b600:	d227      	bcs.n	40b652 <__fputwc+0x96>
  40b602:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40b606:	68a3      	ldr	r3, [r4, #8]
  40b608:	3b01      	subs	r3, #1
  40b60a:	2b00      	cmp	r3, #0
  40b60c:	60a3      	str	r3, [r4, #8]
  40b60e:	daf0      	bge.n	40b5f2 <__fputwc+0x36>
  40b610:	69a7      	ldr	r7, [r4, #24]
  40b612:	42bb      	cmp	r3, r7
  40b614:	4671      	mov	r1, lr
  40b616:	4622      	mov	r2, r4
  40b618:	4640      	mov	r0, r8
  40b61a:	db02      	blt.n	40b622 <__fputwc+0x66>
  40b61c:	f1be 0f0a 	cmp.w	lr, #10
  40b620:	d1e7      	bne.n	40b5f2 <__fputwc+0x36>
  40b622:	f000 f8c5 	bl	40b7b0 <__swbuf_r>
  40b626:	1c43      	adds	r3, r0, #1
  40b628:	d1e8      	bne.n	40b5fc <__fputwc+0x40>
  40b62a:	b002      	add	sp, #8
  40b62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b630:	89a3      	ldrh	r3, [r4, #12]
  40b632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b636:	81a3      	strh	r3, [r4, #12]
  40b638:	b002      	add	sp, #8
  40b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b63e:	f109 33ff 	add.w	r3, r9, #4294967295
  40b642:	2bfe      	cmp	r3, #254	; 0xfe
  40b644:	d8c4      	bhi.n	40b5d0 <__fputwc+0x14>
  40b646:	fa5f fe89 	uxtb.w	lr, r9
  40b64a:	4606      	mov	r6, r0
  40b64c:	f88d e004 	strb.w	lr, [sp, #4]
  40b650:	e7cb      	b.n	40b5ea <__fputwc+0x2e>
  40b652:	4648      	mov	r0, r9
  40b654:	b002      	add	sp, #8
  40b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b65a:	bf00      	nop

0040b65c <_fputwc_r>:
  40b65c:	b530      	push	{r4, r5, lr}
  40b65e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40b660:	f013 0f01 	tst.w	r3, #1
  40b664:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b668:	4614      	mov	r4, r2
  40b66a:	b083      	sub	sp, #12
  40b66c:	4605      	mov	r5, r0
  40b66e:	b29a      	uxth	r2, r3
  40b670:	d101      	bne.n	40b676 <_fputwc_r+0x1a>
  40b672:	0590      	lsls	r0, r2, #22
  40b674:	d51c      	bpl.n	40b6b0 <_fputwc_r+0x54>
  40b676:	0490      	lsls	r0, r2, #18
  40b678:	d406      	bmi.n	40b688 <_fputwc_r+0x2c>
  40b67a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40b67c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b684:	81a3      	strh	r3, [r4, #12]
  40b686:	6662      	str	r2, [r4, #100]	; 0x64
  40b688:	4628      	mov	r0, r5
  40b68a:	4622      	mov	r2, r4
  40b68c:	f7ff ff96 	bl	40b5bc <__fputwc>
  40b690:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b692:	07da      	lsls	r2, r3, #31
  40b694:	4605      	mov	r5, r0
  40b696:	d402      	bmi.n	40b69e <_fputwc_r+0x42>
  40b698:	89a3      	ldrh	r3, [r4, #12]
  40b69a:	059b      	lsls	r3, r3, #22
  40b69c:	d502      	bpl.n	40b6a4 <_fputwc_r+0x48>
  40b69e:	4628      	mov	r0, r5
  40b6a0:	b003      	add	sp, #12
  40b6a2:	bd30      	pop	{r4, r5, pc}
  40b6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b6a6:	f7ff f80f 	bl	40a6c8 <__retarget_lock_release_recursive>
  40b6aa:	4628      	mov	r0, r5
  40b6ac:	b003      	add	sp, #12
  40b6ae:	bd30      	pop	{r4, r5, pc}
  40b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b6b2:	9101      	str	r1, [sp, #4]
  40b6b4:	f7ff f806 	bl	40a6c4 <__retarget_lock_acquire_recursive>
  40b6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b6bc:	9901      	ldr	r1, [sp, #4]
  40b6be:	b29a      	uxth	r2, r3
  40b6c0:	e7d9      	b.n	40b676 <_fputwc_r+0x1a>
  40b6c2:	bf00      	nop

0040b6c4 <_fstat_r>:
  40b6c4:	b538      	push	{r3, r4, r5, lr}
  40b6c6:	460b      	mov	r3, r1
  40b6c8:	4c07      	ldr	r4, [pc, #28]	; (40b6e8 <_fstat_r+0x24>)
  40b6ca:	4605      	mov	r5, r0
  40b6cc:	4611      	mov	r1, r2
  40b6ce:	4618      	mov	r0, r3
  40b6d0:	2300      	movs	r3, #0
  40b6d2:	6023      	str	r3, [r4, #0]
  40b6d4:	f7f6 fbc7 	bl	401e66 <_fstat>
  40b6d8:	1c43      	adds	r3, r0, #1
  40b6da:	d000      	beq.n	40b6de <_fstat_r+0x1a>
  40b6dc:	bd38      	pop	{r3, r4, r5, pc}
  40b6de:	6823      	ldr	r3, [r4, #0]
  40b6e0:	2b00      	cmp	r3, #0
  40b6e2:	d0fb      	beq.n	40b6dc <_fstat_r+0x18>
  40b6e4:	602b      	str	r3, [r5, #0]
  40b6e6:	bd38      	pop	{r3, r4, r5, pc}
  40b6e8:	20400e4c 	.word	0x20400e4c

0040b6ec <_isatty_r>:
  40b6ec:	b538      	push	{r3, r4, r5, lr}
  40b6ee:	4c07      	ldr	r4, [pc, #28]	; (40b70c <_isatty_r+0x20>)
  40b6f0:	2300      	movs	r3, #0
  40b6f2:	4605      	mov	r5, r0
  40b6f4:	4608      	mov	r0, r1
  40b6f6:	6023      	str	r3, [r4, #0]
  40b6f8:	f7f6 fbba 	bl	401e70 <_isatty>
  40b6fc:	1c43      	adds	r3, r0, #1
  40b6fe:	d000      	beq.n	40b702 <_isatty_r+0x16>
  40b700:	bd38      	pop	{r3, r4, r5, pc}
  40b702:	6823      	ldr	r3, [r4, #0]
  40b704:	2b00      	cmp	r3, #0
  40b706:	d0fb      	beq.n	40b700 <_isatty_r+0x14>
  40b708:	602b      	str	r3, [r5, #0]
  40b70a:	bd38      	pop	{r3, r4, r5, pc}
  40b70c:	20400e4c 	.word	0x20400e4c

0040b710 <__locale_mb_cur_max>:
  40b710:	4b04      	ldr	r3, [pc, #16]	; (40b724 <__locale_mb_cur_max+0x14>)
  40b712:	4a05      	ldr	r2, [pc, #20]	; (40b728 <__locale_mb_cur_max+0x18>)
  40b714:	681b      	ldr	r3, [r3, #0]
  40b716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b718:	2b00      	cmp	r3, #0
  40b71a:	bf08      	it	eq
  40b71c:	4613      	moveq	r3, r2
  40b71e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b722:	4770      	bx	lr
  40b724:	20400018 	.word	0x20400018
  40b728:	2040085c 	.word	0x2040085c

0040b72c <_lseek_r>:
  40b72c:	b570      	push	{r4, r5, r6, lr}
  40b72e:	460d      	mov	r5, r1
  40b730:	4c08      	ldr	r4, [pc, #32]	; (40b754 <_lseek_r+0x28>)
  40b732:	4611      	mov	r1, r2
  40b734:	4606      	mov	r6, r0
  40b736:	461a      	mov	r2, r3
  40b738:	4628      	mov	r0, r5
  40b73a:	2300      	movs	r3, #0
  40b73c:	6023      	str	r3, [r4, #0]
  40b73e:	f7f6 fb99 	bl	401e74 <_lseek>
  40b742:	1c43      	adds	r3, r0, #1
  40b744:	d000      	beq.n	40b748 <_lseek_r+0x1c>
  40b746:	bd70      	pop	{r4, r5, r6, pc}
  40b748:	6823      	ldr	r3, [r4, #0]
  40b74a:	2b00      	cmp	r3, #0
  40b74c:	d0fb      	beq.n	40b746 <_lseek_r+0x1a>
  40b74e:	6033      	str	r3, [r6, #0]
  40b750:	bd70      	pop	{r4, r5, r6, pc}
  40b752:	bf00      	nop
  40b754:	20400e4c 	.word	0x20400e4c

0040b758 <__ascii_mbtowc>:
  40b758:	b082      	sub	sp, #8
  40b75a:	b149      	cbz	r1, 40b770 <__ascii_mbtowc+0x18>
  40b75c:	b15a      	cbz	r2, 40b776 <__ascii_mbtowc+0x1e>
  40b75e:	b16b      	cbz	r3, 40b77c <__ascii_mbtowc+0x24>
  40b760:	7813      	ldrb	r3, [r2, #0]
  40b762:	600b      	str	r3, [r1, #0]
  40b764:	7812      	ldrb	r2, [r2, #0]
  40b766:	1c10      	adds	r0, r2, #0
  40b768:	bf18      	it	ne
  40b76a:	2001      	movne	r0, #1
  40b76c:	b002      	add	sp, #8
  40b76e:	4770      	bx	lr
  40b770:	a901      	add	r1, sp, #4
  40b772:	2a00      	cmp	r2, #0
  40b774:	d1f3      	bne.n	40b75e <__ascii_mbtowc+0x6>
  40b776:	4610      	mov	r0, r2
  40b778:	b002      	add	sp, #8
  40b77a:	4770      	bx	lr
  40b77c:	f06f 0001 	mvn.w	r0, #1
  40b780:	e7f4      	b.n	40b76c <__ascii_mbtowc+0x14>
  40b782:	bf00      	nop

0040b784 <_read_r>:
  40b784:	b570      	push	{r4, r5, r6, lr}
  40b786:	460d      	mov	r5, r1
  40b788:	4c08      	ldr	r4, [pc, #32]	; (40b7ac <_read_r+0x28>)
  40b78a:	4611      	mov	r1, r2
  40b78c:	4606      	mov	r6, r0
  40b78e:	461a      	mov	r2, r3
  40b790:	4628      	mov	r0, r5
  40b792:	2300      	movs	r3, #0
  40b794:	6023      	str	r3, [r4, #0]
  40b796:	f7f5 fe8d 	bl	4014b4 <_read>
  40b79a:	1c43      	adds	r3, r0, #1
  40b79c:	d000      	beq.n	40b7a0 <_read_r+0x1c>
  40b79e:	bd70      	pop	{r4, r5, r6, pc}
  40b7a0:	6823      	ldr	r3, [r4, #0]
  40b7a2:	2b00      	cmp	r3, #0
  40b7a4:	d0fb      	beq.n	40b79e <_read_r+0x1a>
  40b7a6:	6033      	str	r3, [r6, #0]
  40b7a8:	bd70      	pop	{r4, r5, r6, pc}
  40b7aa:	bf00      	nop
  40b7ac:	20400e4c 	.word	0x20400e4c

0040b7b0 <__swbuf_r>:
  40b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b7b2:	460d      	mov	r5, r1
  40b7b4:	4614      	mov	r4, r2
  40b7b6:	4606      	mov	r6, r0
  40b7b8:	b110      	cbz	r0, 40b7c0 <__swbuf_r+0x10>
  40b7ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b7bc:	2b00      	cmp	r3, #0
  40b7be:	d04b      	beq.n	40b858 <__swbuf_r+0xa8>
  40b7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b7c4:	69a3      	ldr	r3, [r4, #24]
  40b7c6:	60a3      	str	r3, [r4, #8]
  40b7c8:	b291      	uxth	r1, r2
  40b7ca:	0708      	lsls	r0, r1, #28
  40b7cc:	d539      	bpl.n	40b842 <__swbuf_r+0x92>
  40b7ce:	6923      	ldr	r3, [r4, #16]
  40b7d0:	2b00      	cmp	r3, #0
  40b7d2:	d036      	beq.n	40b842 <__swbuf_r+0x92>
  40b7d4:	b2ed      	uxtb	r5, r5
  40b7d6:	0489      	lsls	r1, r1, #18
  40b7d8:	462f      	mov	r7, r5
  40b7da:	d515      	bpl.n	40b808 <__swbuf_r+0x58>
  40b7dc:	6822      	ldr	r2, [r4, #0]
  40b7de:	6961      	ldr	r1, [r4, #20]
  40b7e0:	1ad3      	subs	r3, r2, r3
  40b7e2:	428b      	cmp	r3, r1
  40b7e4:	da1c      	bge.n	40b820 <__swbuf_r+0x70>
  40b7e6:	3301      	adds	r3, #1
  40b7e8:	68a1      	ldr	r1, [r4, #8]
  40b7ea:	1c50      	adds	r0, r2, #1
  40b7ec:	3901      	subs	r1, #1
  40b7ee:	60a1      	str	r1, [r4, #8]
  40b7f0:	6020      	str	r0, [r4, #0]
  40b7f2:	7015      	strb	r5, [r2, #0]
  40b7f4:	6962      	ldr	r2, [r4, #20]
  40b7f6:	429a      	cmp	r2, r3
  40b7f8:	d01a      	beq.n	40b830 <__swbuf_r+0x80>
  40b7fa:	89a3      	ldrh	r3, [r4, #12]
  40b7fc:	07db      	lsls	r3, r3, #31
  40b7fe:	d501      	bpl.n	40b804 <__swbuf_r+0x54>
  40b800:	2d0a      	cmp	r5, #10
  40b802:	d015      	beq.n	40b830 <__swbuf_r+0x80>
  40b804:	4638      	mov	r0, r7
  40b806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b808:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b80a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b80e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b812:	81a2      	strh	r2, [r4, #12]
  40b814:	6822      	ldr	r2, [r4, #0]
  40b816:	6661      	str	r1, [r4, #100]	; 0x64
  40b818:	6961      	ldr	r1, [r4, #20]
  40b81a:	1ad3      	subs	r3, r2, r3
  40b81c:	428b      	cmp	r3, r1
  40b81e:	dbe2      	blt.n	40b7e6 <__swbuf_r+0x36>
  40b820:	4621      	mov	r1, r4
  40b822:	4630      	mov	r0, r6
  40b824:	f7fe fbba 	bl	409f9c <_fflush_r>
  40b828:	b940      	cbnz	r0, 40b83c <__swbuf_r+0x8c>
  40b82a:	6822      	ldr	r2, [r4, #0]
  40b82c:	2301      	movs	r3, #1
  40b82e:	e7db      	b.n	40b7e8 <__swbuf_r+0x38>
  40b830:	4621      	mov	r1, r4
  40b832:	4630      	mov	r0, r6
  40b834:	f7fe fbb2 	bl	409f9c <_fflush_r>
  40b838:	2800      	cmp	r0, #0
  40b83a:	d0e3      	beq.n	40b804 <__swbuf_r+0x54>
  40b83c:	f04f 37ff 	mov.w	r7, #4294967295
  40b840:	e7e0      	b.n	40b804 <__swbuf_r+0x54>
  40b842:	4621      	mov	r1, r4
  40b844:	4630      	mov	r0, r6
  40b846:	f7fd fad7 	bl	408df8 <__swsetup_r>
  40b84a:	2800      	cmp	r0, #0
  40b84c:	d1f6      	bne.n	40b83c <__swbuf_r+0x8c>
  40b84e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b852:	6923      	ldr	r3, [r4, #16]
  40b854:	b291      	uxth	r1, r2
  40b856:	e7bd      	b.n	40b7d4 <__swbuf_r+0x24>
  40b858:	f7fe fbf8 	bl	40a04c <__sinit>
  40b85c:	e7b0      	b.n	40b7c0 <__swbuf_r+0x10>
  40b85e:	bf00      	nop

0040b860 <_wcrtomb_r>:
  40b860:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b862:	4606      	mov	r6, r0
  40b864:	b085      	sub	sp, #20
  40b866:	461f      	mov	r7, r3
  40b868:	b189      	cbz	r1, 40b88e <_wcrtomb_r+0x2e>
  40b86a:	4c10      	ldr	r4, [pc, #64]	; (40b8ac <_wcrtomb_r+0x4c>)
  40b86c:	4d10      	ldr	r5, [pc, #64]	; (40b8b0 <_wcrtomb_r+0x50>)
  40b86e:	6824      	ldr	r4, [r4, #0]
  40b870:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40b872:	2c00      	cmp	r4, #0
  40b874:	bf08      	it	eq
  40b876:	462c      	moveq	r4, r5
  40b878:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40b87c:	47a0      	blx	r4
  40b87e:	1c43      	adds	r3, r0, #1
  40b880:	d103      	bne.n	40b88a <_wcrtomb_r+0x2a>
  40b882:	2200      	movs	r2, #0
  40b884:	238a      	movs	r3, #138	; 0x8a
  40b886:	603a      	str	r2, [r7, #0]
  40b888:	6033      	str	r3, [r6, #0]
  40b88a:	b005      	add	sp, #20
  40b88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b88e:	460c      	mov	r4, r1
  40b890:	4906      	ldr	r1, [pc, #24]	; (40b8ac <_wcrtomb_r+0x4c>)
  40b892:	4a07      	ldr	r2, [pc, #28]	; (40b8b0 <_wcrtomb_r+0x50>)
  40b894:	6809      	ldr	r1, [r1, #0]
  40b896:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40b898:	2900      	cmp	r1, #0
  40b89a:	bf08      	it	eq
  40b89c:	4611      	moveq	r1, r2
  40b89e:	4622      	mov	r2, r4
  40b8a0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40b8a4:	a901      	add	r1, sp, #4
  40b8a6:	47a0      	blx	r4
  40b8a8:	e7e9      	b.n	40b87e <_wcrtomb_r+0x1e>
  40b8aa:	bf00      	nop
  40b8ac:	20400018 	.word	0x20400018
  40b8b0:	2040085c 	.word	0x2040085c

0040b8b4 <__ascii_wctomb>:
  40b8b4:	b121      	cbz	r1, 40b8c0 <__ascii_wctomb+0xc>
  40b8b6:	2aff      	cmp	r2, #255	; 0xff
  40b8b8:	d804      	bhi.n	40b8c4 <__ascii_wctomb+0x10>
  40b8ba:	700a      	strb	r2, [r1, #0]
  40b8bc:	2001      	movs	r0, #1
  40b8be:	4770      	bx	lr
  40b8c0:	4608      	mov	r0, r1
  40b8c2:	4770      	bx	lr
  40b8c4:	238a      	movs	r3, #138	; 0x8a
  40b8c6:	6003      	str	r3, [r0, #0]
  40b8c8:	f04f 30ff 	mov.w	r0, #4294967295
  40b8cc:	4770      	bx	lr
  40b8ce:	bf00      	nop

0040b8d0 <__aeabi_d2iz>:
  40b8d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b8d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b8d8:	d215      	bcs.n	40b906 <__aeabi_d2iz+0x36>
  40b8da:	d511      	bpl.n	40b900 <__aeabi_d2iz+0x30>
  40b8dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b8e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b8e4:	d912      	bls.n	40b90c <__aeabi_d2iz+0x3c>
  40b8e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b8ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b8ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b8f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b8f6:	fa23 f002 	lsr.w	r0, r3, r2
  40b8fa:	bf18      	it	ne
  40b8fc:	4240      	negne	r0, r0
  40b8fe:	4770      	bx	lr
  40b900:	f04f 0000 	mov.w	r0, #0
  40b904:	4770      	bx	lr
  40b906:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b90a:	d105      	bne.n	40b918 <__aeabi_d2iz+0x48>
  40b90c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b910:	bf08      	it	eq
  40b912:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b916:	4770      	bx	lr
  40b918:	f04f 0000 	mov.w	r0, #0
  40b91c:	4770      	bx	lr
  40b91e:	bf00      	nop

0040b920 <__aeabi_uldivmod>:
  40b920:	b953      	cbnz	r3, 40b938 <__aeabi_uldivmod+0x18>
  40b922:	b94a      	cbnz	r2, 40b938 <__aeabi_uldivmod+0x18>
  40b924:	2900      	cmp	r1, #0
  40b926:	bf08      	it	eq
  40b928:	2800      	cmpeq	r0, #0
  40b92a:	bf1c      	itt	ne
  40b92c:	f04f 31ff 	movne.w	r1, #4294967295
  40b930:	f04f 30ff 	movne.w	r0, #4294967295
  40b934:	f000 b97a 	b.w	40bc2c <__aeabi_idiv0>
  40b938:	f1ad 0c08 	sub.w	ip, sp, #8
  40b93c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b940:	f000 f806 	bl	40b950 <__udivmoddi4>
  40b944:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b94c:	b004      	add	sp, #16
  40b94e:	4770      	bx	lr

0040b950 <__udivmoddi4>:
  40b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b954:	468c      	mov	ip, r1
  40b956:	460d      	mov	r5, r1
  40b958:	4604      	mov	r4, r0
  40b95a:	9e08      	ldr	r6, [sp, #32]
  40b95c:	2b00      	cmp	r3, #0
  40b95e:	d151      	bne.n	40ba04 <__udivmoddi4+0xb4>
  40b960:	428a      	cmp	r2, r1
  40b962:	4617      	mov	r7, r2
  40b964:	d96d      	bls.n	40ba42 <__udivmoddi4+0xf2>
  40b966:	fab2 fe82 	clz	lr, r2
  40b96a:	f1be 0f00 	cmp.w	lr, #0
  40b96e:	d00b      	beq.n	40b988 <__udivmoddi4+0x38>
  40b970:	f1ce 0c20 	rsb	ip, lr, #32
  40b974:	fa01 f50e 	lsl.w	r5, r1, lr
  40b978:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b97c:	fa02 f70e 	lsl.w	r7, r2, lr
  40b980:	ea4c 0c05 	orr.w	ip, ip, r5
  40b984:	fa00 f40e 	lsl.w	r4, r0, lr
  40b988:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40b98c:	0c25      	lsrs	r5, r4, #16
  40b98e:	fbbc f8fa 	udiv	r8, ip, sl
  40b992:	fa1f f987 	uxth.w	r9, r7
  40b996:	fb0a cc18 	mls	ip, sl, r8, ip
  40b99a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40b99e:	fb08 f309 	mul.w	r3, r8, r9
  40b9a2:	42ab      	cmp	r3, r5
  40b9a4:	d90a      	bls.n	40b9bc <__udivmoddi4+0x6c>
  40b9a6:	19ed      	adds	r5, r5, r7
  40b9a8:	f108 32ff 	add.w	r2, r8, #4294967295
  40b9ac:	f080 8123 	bcs.w	40bbf6 <__udivmoddi4+0x2a6>
  40b9b0:	42ab      	cmp	r3, r5
  40b9b2:	f240 8120 	bls.w	40bbf6 <__udivmoddi4+0x2a6>
  40b9b6:	f1a8 0802 	sub.w	r8, r8, #2
  40b9ba:	443d      	add	r5, r7
  40b9bc:	1aed      	subs	r5, r5, r3
  40b9be:	b2a4      	uxth	r4, r4
  40b9c0:	fbb5 f0fa 	udiv	r0, r5, sl
  40b9c4:	fb0a 5510 	mls	r5, sl, r0, r5
  40b9c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40b9cc:	fb00 f909 	mul.w	r9, r0, r9
  40b9d0:	45a1      	cmp	r9, r4
  40b9d2:	d909      	bls.n	40b9e8 <__udivmoddi4+0x98>
  40b9d4:	19e4      	adds	r4, r4, r7
  40b9d6:	f100 33ff 	add.w	r3, r0, #4294967295
  40b9da:	f080 810a 	bcs.w	40bbf2 <__udivmoddi4+0x2a2>
  40b9de:	45a1      	cmp	r9, r4
  40b9e0:	f240 8107 	bls.w	40bbf2 <__udivmoddi4+0x2a2>
  40b9e4:	3802      	subs	r0, #2
  40b9e6:	443c      	add	r4, r7
  40b9e8:	eba4 0409 	sub.w	r4, r4, r9
  40b9ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b9f0:	2100      	movs	r1, #0
  40b9f2:	2e00      	cmp	r6, #0
  40b9f4:	d061      	beq.n	40baba <__udivmoddi4+0x16a>
  40b9f6:	fa24 f40e 	lsr.w	r4, r4, lr
  40b9fa:	2300      	movs	r3, #0
  40b9fc:	6034      	str	r4, [r6, #0]
  40b9fe:	6073      	str	r3, [r6, #4]
  40ba00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba04:	428b      	cmp	r3, r1
  40ba06:	d907      	bls.n	40ba18 <__udivmoddi4+0xc8>
  40ba08:	2e00      	cmp	r6, #0
  40ba0a:	d054      	beq.n	40bab6 <__udivmoddi4+0x166>
  40ba0c:	2100      	movs	r1, #0
  40ba0e:	e886 0021 	stmia.w	r6, {r0, r5}
  40ba12:	4608      	mov	r0, r1
  40ba14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba18:	fab3 f183 	clz	r1, r3
  40ba1c:	2900      	cmp	r1, #0
  40ba1e:	f040 808e 	bne.w	40bb3e <__udivmoddi4+0x1ee>
  40ba22:	42ab      	cmp	r3, r5
  40ba24:	d302      	bcc.n	40ba2c <__udivmoddi4+0xdc>
  40ba26:	4282      	cmp	r2, r0
  40ba28:	f200 80fa 	bhi.w	40bc20 <__udivmoddi4+0x2d0>
  40ba2c:	1a84      	subs	r4, r0, r2
  40ba2e:	eb65 0503 	sbc.w	r5, r5, r3
  40ba32:	2001      	movs	r0, #1
  40ba34:	46ac      	mov	ip, r5
  40ba36:	2e00      	cmp	r6, #0
  40ba38:	d03f      	beq.n	40baba <__udivmoddi4+0x16a>
  40ba3a:	e886 1010 	stmia.w	r6, {r4, ip}
  40ba3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba42:	b912      	cbnz	r2, 40ba4a <__udivmoddi4+0xfa>
  40ba44:	2701      	movs	r7, #1
  40ba46:	fbb7 f7f2 	udiv	r7, r7, r2
  40ba4a:	fab7 fe87 	clz	lr, r7
  40ba4e:	f1be 0f00 	cmp.w	lr, #0
  40ba52:	d134      	bne.n	40babe <__udivmoddi4+0x16e>
  40ba54:	1beb      	subs	r3, r5, r7
  40ba56:	0c3a      	lsrs	r2, r7, #16
  40ba58:	fa1f fc87 	uxth.w	ip, r7
  40ba5c:	2101      	movs	r1, #1
  40ba5e:	fbb3 f8f2 	udiv	r8, r3, r2
  40ba62:	0c25      	lsrs	r5, r4, #16
  40ba64:	fb02 3318 	mls	r3, r2, r8, r3
  40ba68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ba6c:	fb0c f308 	mul.w	r3, ip, r8
  40ba70:	42ab      	cmp	r3, r5
  40ba72:	d907      	bls.n	40ba84 <__udivmoddi4+0x134>
  40ba74:	19ed      	adds	r5, r5, r7
  40ba76:	f108 30ff 	add.w	r0, r8, #4294967295
  40ba7a:	d202      	bcs.n	40ba82 <__udivmoddi4+0x132>
  40ba7c:	42ab      	cmp	r3, r5
  40ba7e:	f200 80d1 	bhi.w	40bc24 <__udivmoddi4+0x2d4>
  40ba82:	4680      	mov	r8, r0
  40ba84:	1aed      	subs	r5, r5, r3
  40ba86:	b2a3      	uxth	r3, r4
  40ba88:	fbb5 f0f2 	udiv	r0, r5, r2
  40ba8c:	fb02 5510 	mls	r5, r2, r0, r5
  40ba90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40ba94:	fb0c fc00 	mul.w	ip, ip, r0
  40ba98:	45a4      	cmp	ip, r4
  40ba9a:	d907      	bls.n	40baac <__udivmoddi4+0x15c>
  40ba9c:	19e4      	adds	r4, r4, r7
  40ba9e:	f100 33ff 	add.w	r3, r0, #4294967295
  40baa2:	d202      	bcs.n	40baaa <__udivmoddi4+0x15a>
  40baa4:	45a4      	cmp	ip, r4
  40baa6:	f200 80b8 	bhi.w	40bc1a <__udivmoddi4+0x2ca>
  40baaa:	4618      	mov	r0, r3
  40baac:	eba4 040c 	sub.w	r4, r4, ip
  40bab0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bab4:	e79d      	b.n	40b9f2 <__udivmoddi4+0xa2>
  40bab6:	4631      	mov	r1, r6
  40bab8:	4630      	mov	r0, r6
  40baba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40babe:	f1ce 0420 	rsb	r4, lr, #32
  40bac2:	fa05 f30e 	lsl.w	r3, r5, lr
  40bac6:	fa07 f70e 	lsl.w	r7, r7, lr
  40baca:	fa20 f804 	lsr.w	r8, r0, r4
  40bace:	0c3a      	lsrs	r2, r7, #16
  40bad0:	fa25 f404 	lsr.w	r4, r5, r4
  40bad4:	ea48 0803 	orr.w	r8, r8, r3
  40bad8:	fbb4 f1f2 	udiv	r1, r4, r2
  40badc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40bae0:	fb02 4411 	mls	r4, r2, r1, r4
  40bae4:	fa1f fc87 	uxth.w	ip, r7
  40bae8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40baec:	fb01 f30c 	mul.w	r3, r1, ip
  40baf0:	42ab      	cmp	r3, r5
  40baf2:	fa00 f40e 	lsl.w	r4, r0, lr
  40baf6:	d909      	bls.n	40bb0c <__udivmoddi4+0x1bc>
  40baf8:	19ed      	adds	r5, r5, r7
  40bafa:	f101 30ff 	add.w	r0, r1, #4294967295
  40bafe:	f080 808a 	bcs.w	40bc16 <__udivmoddi4+0x2c6>
  40bb02:	42ab      	cmp	r3, r5
  40bb04:	f240 8087 	bls.w	40bc16 <__udivmoddi4+0x2c6>
  40bb08:	3902      	subs	r1, #2
  40bb0a:	443d      	add	r5, r7
  40bb0c:	1aeb      	subs	r3, r5, r3
  40bb0e:	fa1f f588 	uxth.w	r5, r8
  40bb12:	fbb3 f0f2 	udiv	r0, r3, r2
  40bb16:	fb02 3310 	mls	r3, r2, r0, r3
  40bb1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bb1e:	fb00 f30c 	mul.w	r3, r0, ip
  40bb22:	42ab      	cmp	r3, r5
  40bb24:	d907      	bls.n	40bb36 <__udivmoddi4+0x1e6>
  40bb26:	19ed      	adds	r5, r5, r7
  40bb28:	f100 38ff 	add.w	r8, r0, #4294967295
  40bb2c:	d26f      	bcs.n	40bc0e <__udivmoddi4+0x2be>
  40bb2e:	42ab      	cmp	r3, r5
  40bb30:	d96d      	bls.n	40bc0e <__udivmoddi4+0x2be>
  40bb32:	3802      	subs	r0, #2
  40bb34:	443d      	add	r5, r7
  40bb36:	1aeb      	subs	r3, r5, r3
  40bb38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40bb3c:	e78f      	b.n	40ba5e <__udivmoddi4+0x10e>
  40bb3e:	f1c1 0720 	rsb	r7, r1, #32
  40bb42:	fa22 f807 	lsr.w	r8, r2, r7
  40bb46:	408b      	lsls	r3, r1
  40bb48:	fa05 f401 	lsl.w	r4, r5, r1
  40bb4c:	ea48 0303 	orr.w	r3, r8, r3
  40bb50:	fa20 fe07 	lsr.w	lr, r0, r7
  40bb54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40bb58:	40fd      	lsrs	r5, r7
  40bb5a:	ea4e 0e04 	orr.w	lr, lr, r4
  40bb5e:	fbb5 f9fc 	udiv	r9, r5, ip
  40bb62:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40bb66:	fb0c 5519 	mls	r5, ip, r9, r5
  40bb6a:	fa1f f883 	uxth.w	r8, r3
  40bb6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40bb72:	fb09 f408 	mul.w	r4, r9, r8
  40bb76:	42ac      	cmp	r4, r5
  40bb78:	fa02 f201 	lsl.w	r2, r2, r1
  40bb7c:	fa00 fa01 	lsl.w	sl, r0, r1
  40bb80:	d908      	bls.n	40bb94 <__udivmoddi4+0x244>
  40bb82:	18ed      	adds	r5, r5, r3
  40bb84:	f109 30ff 	add.w	r0, r9, #4294967295
  40bb88:	d243      	bcs.n	40bc12 <__udivmoddi4+0x2c2>
  40bb8a:	42ac      	cmp	r4, r5
  40bb8c:	d941      	bls.n	40bc12 <__udivmoddi4+0x2c2>
  40bb8e:	f1a9 0902 	sub.w	r9, r9, #2
  40bb92:	441d      	add	r5, r3
  40bb94:	1b2d      	subs	r5, r5, r4
  40bb96:	fa1f fe8e 	uxth.w	lr, lr
  40bb9a:	fbb5 f0fc 	udiv	r0, r5, ip
  40bb9e:	fb0c 5510 	mls	r5, ip, r0, r5
  40bba2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40bba6:	fb00 f808 	mul.w	r8, r0, r8
  40bbaa:	45a0      	cmp	r8, r4
  40bbac:	d907      	bls.n	40bbbe <__udivmoddi4+0x26e>
  40bbae:	18e4      	adds	r4, r4, r3
  40bbb0:	f100 35ff 	add.w	r5, r0, #4294967295
  40bbb4:	d229      	bcs.n	40bc0a <__udivmoddi4+0x2ba>
  40bbb6:	45a0      	cmp	r8, r4
  40bbb8:	d927      	bls.n	40bc0a <__udivmoddi4+0x2ba>
  40bbba:	3802      	subs	r0, #2
  40bbbc:	441c      	add	r4, r3
  40bbbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40bbc2:	eba4 0408 	sub.w	r4, r4, r8
  40bbc6:	fba0 8902 	umull	r8, r9, r0, r2
  40bbca:	454c      	cmp	r4, r9
  40bbcc:	46c6      	mov	lr, r8
  40bbce:	464d      	mov	r5, r9
  40bbd0:	d315      	bcc.n	40bbfe <__udivmoddi4+0x2ae>
  40bbd2:	d012      	beq.n	40bbfa <__udivmoddi4+0x2aa>
  40bbd4:	b156      	cbz	r6, 40bbec <__udivmoddi4+0x29c>
  40bbd6:	ebba 030e 	subs.w	r3, sl, lr
  40bbda:	eb64 0405 	sbc.w	r4, r4, r5
  40bbde:	fa04 f707 	lsl.w	r7, r4, r7
  40bbe2:	40cb      	lsrs	r3, r1
  40bbe4:	431f      	orrs	r7, r3
  40bbe6:	40cc      	lsrs	r4, r1
  40bbe8:	6037      	str	r7, [r6, #0]
  40bbea:	6074      	str	r4, [r6, #4]
  40bbec:	2100      	movs	r1, #0
  40bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bbf2:	4618      	mov	r0, r3
  40bbf4:	e6f8      	b.n	40b9e8 <__udivmoddi4+0x98>
  40bbf6:	4690      	mov	r8, r2
  40bbf8:	e6e0      	b.n	40b9bc <__udivmoddi4+0x6c>
  40bbfa:	45c2      	cmp	sl, r8
  40bbfc:	d2ea      	bcs.n	40bbd4 <__udivmoddi4+0x284>
  40bbfe:	ebb8 0e02 	subs.w	lr, r8, r2
  40bc02:	eb69 0503 	sbc.w	r5, r9, r3
  40bc06:	3801      	subs	r0, #1
  40bc08:	e7e4      	b.n	40bbd4 <__udivmoddi4+0x284>
  40bc0a:	4628      	mov	r0, r5
  40bc0c:	e7d7      	b.n	40bbbe <__udivmoddi4+0x26e>
  40bc0e:	4640      	mov	r0, r8
  40bc10:	e791      	b.n	40bb36 <__udivmoddi4+0x1e6>
  40bc12:	4681      	mov	r9, r0
  40bc14:	e7be      	b.n	40bb94 <__udivmoddi4+0x244>
  40bc16:	4601      	mov	r1, r0
  40bc18:	e778      	b.n	40bb0c <__udivmoddi4+0x1bc>
  40bc1a:	3802      	subs	r0, #2
  40bc1c:	443c      	add	r4, r7
  40bc1e:	e745      	b.n	40baac <__udivmoddi4+0x15c>
  40bc20:	4608      	mov	r0, r1
  40bc22:	e708      	b.n	40ba36 <__udivmoddi4+0xe6>
  40bc24:	f1a8 0802 	sub.w	r8, r8, #2
  40bc28:	443d      	add	r5, r7
  40bc2a:	e72b      	b.n	40ba84 <__udivmoddi4+0x134>

0040bc2c <__aeabi_idiv0>:
  40bc2c:	4770      	bx	lr
  40bc2e:	bf00      	nop
  40bc30:	00000000 	.word	0x00000000
  40bc34:	3f000000 	.word	0x3f000000
  40bc38:	42b40000 	.word	0x42b40000
  40bc3c:	42b40000 	.word	0x42b40000
  40bc40:	00000000 	.word	0x00000000
  40bc44:	454c4449 	.word	0x454c4449
  40bc48:	00000000 	.word	0x00000000
  40bc4c:	51726d54 	.word	0x51726d54
  40bc50:	00000000 	.word	0x00000000
  40bc54:	20726d54 	.word	0x20726d54
  40bc58:	00637653 	.word	0x00637653
  40bc5c:	6c696146 	.word	0x6c696146
  40bc60:	74206465 	.word	0x74206465
  40bc64:	7263206f 	.word	0x7263206f
  40bc68:	65746165 	.word	0x65746165
  40bc6c:	75517820 	.word	0x75517820
  40bc70:	4f657565 	.word	0x4f657565
  40bc74:	6e656972 	.word	0x6e656972
  40bc78:	61636174 	.word	0x61636174
  40bc7c:	00000d6f 	.word	0x00000d6f
  40bc80:	73756f48 	.word	0x73756f48
  40bc84:	776f4465 	.word	0x776f4465
  40bc88:	0000006e 	.word	0x0000006e
  40bc8c:	6c696146 	.word	0x6c696146
  40bc90:	74206465 	.word	0x74206465
  40bc94:	7263206f 	.word	0x7263206f
  40bc98:	65746165 	.word	0x65746165
  40bc9c:	756f4820 	.word	0x756f4820
  40bca0:	6f446573 	.word	0x6f446573
  40bca4:	74206e77 	.word	0x74206e77
  40bca8:	0d6b7361 	.word	0x0d6b7361
  40bcac:	00000000 	.word	0x00000000
  40bcb0:	00554d49 	.word	0x00554d49
  40bcb4:	6c696146 	.word	0x6c696146
  40bcb8:	74206465 	.word	0x74206465
  40bcbc:	7263206f 	.word	0x7263206f
  40bcc0:	65746165 	.word	0x65746165
  40bcc4:	554d4920 	.word	0x554d4920
  40bcc8:	73617420 	.word	0x73617420
  40bccc:	00000d6b 	.word	0x00000d6b
  40bcd0:	6569724f 	.word	0x6569724f
  40bcd4:	6361746e 	.word	0x6361746e
  40bcd8:	00006f61 	.word	0x00006f61
  40bcdc:	6c696146 	.word	0x6c696146
  40bce0:	74206465 	.word	0x74206465
  40bce4:	7263206f 	.word	0x7263206f
  40bce8:	65746165 	.word	0x65746165
  40bcec:	69724f20 	.word	0x69724f20
  40bcf0:	61746e65 	.word	0x61746e65
  40bcf4:	206f6163 	.word	0x206f6163
  40bcf8:	6b736174 	.word	0x6b736174
  40bcfc:	0000000d 	.word	0x0000000d
  40bd00:	5252455b 	.word	0x5252455b
  40bd04:	5b205d4f 	.word	0x5b205d4f
  40bd08:	5d633269 	.word	0x5d633269
  40bd0c:	72705b20 	.word	0x72705b20
  40bd10:	5d65626f 	.word	0x5d65626f
  40bd14:	00000020 	.word	0x00000020
  40bd18:	4441445b 	.word	0x4441445b
  40bd1c:	5b205d4f 	.word	0x5b205d4f
  40bd20:	5d633269 	.word	0x5d633269
  40bd24:	6f727020 	.word	0x6f727020
  40bd28:	4f206562 	.word	0x4f206562
  40bd2c:	0000004b 	.word	0x0000004b
  40bd30:	5252455b 	.word	0x5252455b
  40bd34:	5b205d4f 	.word	0x5b205d4f
  40bd38:	5d633269 	.word	0x5d633269
  40bd3c:	65725b20 	.word	0x65725b20
  40bd40:	205d6461 	.word	0x205d6461
  40bd44:	00000000 	.word	0x00000000
  40bd48:	4441445b 	.word	0x4441445b
  40bd4c:	5b205d4f 	.word	0x5b205d4f
  40bd50:	5d633269 	.word	0x5d633269
  40bd54:	3a782520 	.word	0x3a782520
  40bd58:	0a207825 	.word	0x0a207825
  40bd5c:	00000000 	.word	0x00000000
  40bd60:	65637553 	.word	0x65637553
  40bd64:	216f7373 	.word	0x216f7373
  40bd68:	55504d20 	.word	0x55504d20
  40bd6c:	30353036 	.word	0x30353036
  40bd70:	636e6520 	.word	0x636e6520
  40bd74:	72746e6f 	.word	0x72746e6f
  40bd78:	216f6461 	.word	0x216f6461
  40bd7c:	0000000d 	.word	0x0000000d
  40bd80:	686c6146 	.word	0x686c6146
  40bd84:	4d202161 	.word	0x4d202161
  40bd88:	30365550 	.word	0x30365550
  40bd8c:	6e203035 	.word	0x6e203035
  40bd90:	206fa3c3 	.word	0x206fa3c3
  40bd94:	6f636e65 	.word	0x6f636e65
  40bd98:	6172746e 	.word	0x6172746e
  40bd9c:	0d216f64 	.word	0x0d216f64
  40bda0:	00000000 	.word	0x00000000
  40bda4:	5252455b 	.word	0x5252455b
  40bda8:	5b205d4f 	.word	0x5b205d4f
  40bdac:	5d633269 	.word	0x5d633269
  40bdb0:	72775b20 	.word	0x72775b20
  40bdb4:	5d657469 	.word	0x5d657469
  40bdb8:	00000020 	.word	0x00000020
  40bdbc:	5f636361 	.word	0x5f636361
  40bdc0:	25203a78 	.word	0x25203a78
  40bdc4:	000a2066 	.word	0x000a2066
  40bdc8:	5f636361 	.word	0x5f636361
  40bdcc:	25203a79 	.word	0x25203a79
  40bdd0:	000a2066 	.word	0x000a2066
  40bdd4:	5f636361 	.word	0x5f636361
  40bdd8:	25203a7a 	.word	0x25203a7a
  40bddc:	0a0a2066 	.word	0x0a0a2066
  40bde0:	00000000 	.word	0x00000000
  40bde4:	5f727967 	.word	0x5f727967
  40bde8:	25203a78 	.word	0x25203a78
  40bdec:	000a2066 	.word	0x000a2066
  40bdf0:	5f727967 	.word	0x5f727967
  40bdf4:	25203a79 	.word	0x25203a79
  40bdf8:	000a2066 	.word	0x000a2066
  40bdfc:	5f727967 	.word	0x5f727967
  40be00:	25203a7a 	.word	0x25203a7a
  40be04:	0a0a2066 	.word	0x0a0a2066
  40be08:	00000000 	.word	0x00000000
  40be0c:	63617473 	.word	0x63617473
  40be10:	766f206b 	.word	0x766f206b
  40be14:	6c667265 	.word	0x6c667265
  40be18:	2520776f 	.word	0x2520776f
  40be1c:	73252078 	.word	0x73252078
  40be20:	00000a0d 	.word	0x00000a0d
  40be24:	74727173 	.word	0x74727173
  40be28:	00000000 	.word	0x00000000
  40be2c:	6e697361 	.word	0x6e697361
  40be30:	00000066 	.word	0x00000066

0040be34 <npio2_hw>:
  40be34:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40be44:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40be54:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40be64:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40be74:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40be84:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40be94:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40bea4:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040beb4 <two_over_pi>:
  40beb4:	000000a2 000000f9 00000083 0000006e     ............n...
  40bec4:	0000004e 00000044 00000015 00000029     N...D.......)...
  40bed4:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40bee4:	000000f5 00000034 000000dd 000000c0     ....4...........
  40bef4:	000000db 00000062 00000095 00000099     ....b...........
  40bf04:	0000003c 00000043 00000090 00000041     <...C.......A...
  40bf14:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40bf24:	000000de 000000bb 000000c5 00000061     ............a...
  40bf34:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40bf44:	00000042 0000004d 000000d2 000000e0     B...M...........
  40bf54:	00000006 00000049 0000002e 000000ea     ....I...........
  40bf64:	00000009 000000d1 00000092 0000001c     ................
  40bf74:	000000fe 0000001d 000000eb 0000001c     ................
  40bf84:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40bf94:	000000e8 00000082 00000035 000000f5     ........5.......
  40bfa4:	0000002e 000000bb 00000044 00000084     ........D.......
  40bfb4:	000000e9 0000009c 00000070 00000026     ........p...&...
  40bfc4:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40bfd4:	00000039 00000091 000000d6 00000039     9...........9...
  40bfe4:	00000083 00000053 00000039 000000f4     ....S...9.......
  40bff4:	0000009c 00000084 0000005f 0000008b     ........_.......
  40c004:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40c014:	0000001f 000000f8 00000097 000000ff     ................
  40c024:	000000de 00000005 00000098 0000000f     ................
  40c034:	000000ef 0000002f 00000011 0000008b     ..../...........
  40c044:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40c054:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40c064:	00000027 000000cb 00000009 000000b7     '...............
  40c074:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40c084:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40c094:	00000075 00000027 000000ba 000000c7     u...'...........
  40c0a4:	000000eb 000000e5 000000f1 0000007b     ............{...
  40c0b4:	0000003d 00000007 00000039 000000f7     =.......9.......
  40c0c4:	0000008a 00000052 00000092 000000ea     ....R...........
  40c0d4:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40c0e4:	0000001f 0000008d 0000005d 00000008     ........].......
  40c0f4:	00000056 00000003 00000030 00000046     V.......0...F...
  40c104:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40c114:	000000f0 000000cf 000000bc 00000020     ............ ...
  40c124:	0000009a 000000f4 00000036 0000001d     ........6.......
  40c134:	000000a9 000000e3 00000091 00000061     ............a...
  40c144:	0000005e 000000e6 0000001b 00000008     ^...............
  40c154:	00000065 00000099 00000085 0000005f     e..........._...
  40c164:	00000014 000000a0 00000068 00000040     ........h...@...
  40c174:	0000008d 000000ff 000000d8 00000080     ................
  40c184:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40c194:	00000006 00000006 00000015 00000056     ............V...
  40c1a4:	000000ca 00000073 000000a8 000000c9     ....s...........
  40c1b4:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40c1c4:	0000008c 0000006b                       ....k...

0040c1cc <PIo2>:
  40c1cc:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40c1dc:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40c1ec:	1fc40000 1bc60000 17440000              ..........D.

0040c1f8 <init_jk>:
  40c1f8:	00000004 00000007 00000009              ............

0040c204 <atanhi>:
  40c204:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0040c214 <atanlo>:
  40c214:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040c224 <_global_impure_ptr>:
  40c224:	20400020 0000000a 00464e49 00666e69      .@ ....INF.inf.
  40c234:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40c244:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40c254:	37363534 62613938 66656463 00000000     456789abcdef....
  40c264:	6c756e28 0000296c 00000030              (null)..0...

0040c270 <blanks.7238>:
  40c270:	20202020 20202020 20202020 20202020                     

0040c280 <zeroes.7239>:
  40c280:	30303030 30303030 30303030 30303030     0000000000000000
  40c290:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040c2a0 <__mprec_bigtens>:
  40c2a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40c2b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40c2c0:	7f73bf3c 75154fdd                       <.s..O.u

0040c2c8 <__mprec_tens>:
  40c2c8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40c2d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40c2e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40c2f8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40c308:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40c318:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40c328:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40c338:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40c348:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40c358:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40c368:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40c378:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40c388:	79d99db4 44ea7843                       ...yCx.D

0040c390 <p05.6055>:
  40c390:	00000005 00000019 0000007d 00000043     ........}...C...
  40c3a0:	49534f50 00000058 0000002e              POSIX.......

0040c3ac <_ctype_>:
  40c3ac:	20202000 20202020 28282020 20282828     .         ((((( 
  40c3bc:	20202020 20202020 20202020 20202020                     
  40c3cc:	10108820 10101010 10101010 10101010      ...............
  40c3dc:	04040410 04040404 10040404 10101010     ................
  40c3ec:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40c3fc:	01010101 01010101 01010101 10101010     ................
  40c40c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40c41c:	02020202 02020202 02020202 10101010     ................
  40c42c:	00000020 00000000 00000000 00000000      ...............
	...

0040c4b0 <_init>:
  40c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c4b2:	bf00      	nop
  40c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c4b6:	bc08      	pop	{r3}
  40c4b8:	469e      	mov	lr, r3
  40c4ba:	4770      	bx	lr

0040c4bc <__init_array_start>:
  40c4bc:	00408ec1 	.word	0x00408ec1

0040c4c0 <__frame_dummy_init_array_entry>:
  40c4c0:	00400165                                e.@.

0040c4c4 <_fini>:
  40c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c4c6:	bf00      	nop
  40c4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c4ca:	bc08      	pop	{r3}
  40c4cc:	469e      	mov	lr, r3
  40c4ce:	4770      	bx	lr

0040c4d0 <__fini_array_start>:
  40c4d0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <__fdlib_version>:
20400014:	0001 0000                                   ....

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	0e28 2040                                   (.@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	b8b5 0040 b759 0040 0000 0000 c3ac 0040     ..@.Y.@.......@.
2040094c:	c3a8 0040 bde0 0040 bde0 0040 bde0 0040     ..@...@...@...@.
2040095c:	bde0 0040 bde0 0040 bde0 0040 bde0 0040     ..@...@...@...@.
2040096c:	bde0 0040 bde0 0040 ffff ffff ffff ffff     ..@...@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
